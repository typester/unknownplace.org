2009-11-24 (Tue)  Daisuke Murase  <typester@mujina.local>

	* 9:40 たこthon [life]:
	> [たこthon 2009/11/23(月) -  Lazy Programmer :-p](http://d.hatena.ne.jp/tomyhero/20091120/1258718763)

	というのに参加してきた。

	tomyhero さんの家なのでどんだけ奇天烈な家なんだろうと思ってワクワクして言ったら予想に反してまともな家でした。でもものすごく遠い。

	たこ焼き食べたり鯛焼き食べたりタコライスたべたりしてあとはハックしたりゲームしたり漫画読んだりする会らしい。

	予想に反して集中できたので

	 * オレオレlighttpdモジュールを本番投入したり
	 * 前から作ろうと思ってたiPhoneアプリをガリガリ実装したり

	した。iPhoneアプリはほしい機能全部はつけてないけどとりあえずそれ削れば公開はできそうだったので公開してから帰るかとおもってリリース作業してたら最後の最後で謎エラーで手間取りだめだった。今日の夜にでもアップしよう。

	たこ焼き器とPS3欲しくなった。

	Kindleもちょっとだけ欲しくなった。

2009-11-21 (Sat)  Daisuke Murase  <typester@mujina.local>

	* 12:08 mod_accessvalve [lighttpd]:
	lighttpd で一定時間におけるアクセス数をもとにアクセスを制限したいという用件があったのですが、それにマッチする良いモジュールがなかったので試しに書いてみた。

	> [typester's mod_accessvalve at master - GitHub](http://github.com/typester/mod_accessvalve)

	設定項目は

	 * `accessvalve.bucket-size`: `reset-interval` の時間内に許可するリクエスト数
	 * `accessvalve.reset-interval`: リクエスト数カウントをリセットする時間（秒） (デフォルト 60)
	 * `accessvalve.ban-duration`: リクエスト数が `bucket-size` を超えた場合にアクセスを拒否する時間（秒）(デフォルト 900)

	という感じで。また `bucket-size` を指定しない、もしくは `0` に設定するとそのブロックではこの機能は無効になる。

	このようなアクセス制限をあえて HTTPD でやる利点としては、Virtual Hostごとに設定を変えたり、特定のパスだけ制限したりと言うことができると言うことかなぁ。あとは 503 エラーとかかえせたりとかか。その分無駄なループが発生するのでオーバーヘッドになる。

	最初 lighttpd のサイトを検索すると `mod_throttle` というのを誰かが書いているのが見つかってそれを使おうとしたのだけど、設定ファイルの patch 処理がされてなく、上記のような設定ファイルの場所によって設定を変えるということができなかったので採用を見送った。

	また、単純なコネクションごとの帯域制限やコネクション数制限は lighttpd に付属の mod_evasive でできる。

	* 11:08 なぜか X 関係でビルドできないとき [lighttpd]:
	lighttpd 1.4.24 以降や現在の SVN head で `autogen.sh` を走らせてからビルドしようとするとなぜか X 関係のエラーが出て `make` が失敗するということがありますがそういうときは、

	    cp `which libtool` .

	とかすると `make` とおるようになります。それ以上追ってないけど。なんでだろ？

2009-11-19 (Thu)  Daisuke Murase  <typester@mujina.local>

	* 00:31 リニューアル [web] [life]:
	clmemo を開始してから4年ほど、ずっと変えていなかったサイトをサーバーが死亡したのを機にリニューアル。

	今年初めに作った [nim](http://github.com/typester/nim) をつかって全部静的ファイルな構成にしてみる。制限のきついレンタルサーバーならともかく、僕の環境ではまったく意味がない。最初は `typester.github.com` とかでやろうとおもったけど、その後移転したくなったときリダイレクトとかできないのはいやなのでやめた。

	でも自鯖はめんどくさいので [prgmr.com](http://prgmr.com/xen/) 借りた。なかなか良い。

	nim なら clmemo 以外にもコンテンツを扱えるのでぼちぼち増やしていく予定。とりあえずブログかなぁ。

	しかしやっぱりサイトをいじるのは楽しい。最近はブログサービスなどが普及してきてこういうことをやる人が少なくなってしまったけどもったいないなーとおもう。

2009-07-13 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:30 AnyEventでirssiプラグインを書く [perl] [irssi]:
	AnyEvent はその名の通りさまざまなイベントインタフェースに対応していて、その中に irssi が使用している Glib も含まれているため、irssiのプラグインの中で普通に AnyEvent を使用することができます。

	キーワード反応を [im.kayac.com](http://im.kayac.com/) で自分の IM に通知する [higlith2im.pl](http://svn.coderepos.org/share/lang/perl/irssi/scripts/hilight2im.pl) プラグインを AnyEvent を使用するように書き換えたのが以下です。

	    use strict;
	    use warnings;
	    
	    use Glib;
	    
	    use Irssi;
	    use AnyEvent::HTTP;
	    
	    use HTTP::Request::Common;
	    
	    our $VERSION = '0.1';
	    
	    our %IRSSI = (
	        name        => 'hilight2im',
	        description => 'notify hilight message to IM via im.kayac.com api',
	        authors     => 'Daisuke Murase',
	    );
	    
	    sub sig_printtext {
	        my ($dest, $text, $stripped) = @_;
	    
	        if ( $dest->{level} & MSGLEVEL_HILIGHT ) {
	            my $user = Irssi::settings_get_str('im_kayac_com_username') or return;
	            my $msg  = sprintf('[irssi] %s', $stripped);
	    
	            my $req = POST "http://im.kayac.com/api/post/$user", [ message => $msg ];
	            my %headers = map { $_ => $req->header($_), } $req->headers->header_field_names;
	    
	            my $r;
	            $r = http_post $req->uri, $req->content, headers => \%headers, sub { undef $r };
	        }
	    }
	    
	    Irssi::signal_add('print text' => \&sig_printtext);
	    Irssi::settings_add_str('im_kayac_com', 'im_kayac_com_username', '');

	fork する必要がなくなってシンプルですね！

	...とおもいきや現状の AnyEvent::HTTP はなんと HTTP::Request オブジェクトからのリクエスト送信に対応していないため、自分ですべてのリクエストを組み立てる必要があるようです。これは不便。。

	ですが、irssi の中で普通に AnyEvent を使うことができるのはなかなか便利です。お試しあれ！

	AnyEvent 版は [github](http://github.com/typester/irssi-plugins/blob/master/hilight2im.pl) にあげた。

2009-07-10 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:32 AnyEventの良いところを3行で [perl]:
	教えて！と言われたのでそのとき答えた物をここにも記す。

	 1. POE みたいにきもくない
	 2. Danga::Socket とかだと自分で実装しないといけないread queueとかそういうのも面倒見てくれる便利モジュールがある＞AnyEvent::Handle
	 3. ドキュメントがアツイ

	最後のは主に [AnyEvent::Intro](http://search.cpan.org/perldoc?AnyEvent::Intro) のことを言ってますが、これ一通り読めばとりあえず AnyEvent 使えるようになるっていうくらい完璧な内容となっています。

	AnyEventとは何かからはじまり、非同期プログラミングの説明からAnyEventを使用したシンプルな例が続き、AnyEvent::Socket や AnyEvent::Handle を使用するのを順々に詳しく説明してくれています。
	どうして AnyEvent::Handle みたいな物を使うといいのかというところまで書かれているので、非同期プログラミングやネットワークプログラミングにあまり詳しくない人でも読めるのではないでしょうか。

2009-07-09 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 19:34 AnyEvent で $poe_kernel->alias_set 的なことをする方法 [perl]:
	最近 [AnyEvent](http://search.cpan.org/dist/AnyEvent/) にはまっています。おもしろい！

	AnyEvent と同じ非同期プログラミングフレームワークであるところの [POE](http://search.cpan.org/dist/POE/) では

	    $kernel->alias_set('hoge');

	などとしておくと

	    $kernel->post( hoge => 'state' );

	みたいな感じでどこからでもそのコンポーネントを呼び出すことができました。
	しかし AnyEvent ではそう言った機能がないため以下のように [Object::Container](http://search.cpan.org/dist/Object-Container/) を使って解決することにしました。

	呼び出される側：

	    use AnyEvent;
	    use Object::Container 'event';
	    
	    my $cv = AnyEvent->condvar;
	    $cv->cb(sub {
	       my (@args) = $cv->recv;
	       # ここになんか処理
	    });
	    event->register( foo => sub { $cv } );

	呼び出す側：

	    use AnyEvent;
	    use Object::Container 'event';
	    
	    event('foo')->send(@args);

	Condvarをグローバルなシングルトンコンテナに入れ、それを使って相互にやりとりをするという感じですね。

	Object::Container は export する機能がなかったのですが、毎回 `Object::Container->get(...)` などとかくのがだるかったので import に引数渡すとその名前でコンテナを export する機能をつけました。(0.2以降)

	同等のことはいろいろな方法があると思いますが、これが一応今の所の僕の解となってます。参考までに！

2009-07-02 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 15:29 さっきのパッチ取り込んでもらった [android]:
	なんと [jesse](http://www.fsck.com/) のプロジェクトだったらしい。パッケージ名でなんか見たことあるなーって思ってたんだけど、気がつかなかったなぁ。世間せまい！

	コミット権もらったのでこれからもなんかあったら貢献しよう。

	* 11:37 k9mailを日本語環境でただしく使えるようにした [android]:
	GDP1 で android のメールアプリが `Connection error` と言うエラーで新しいメールをまったく受信してくれない状態になってしまった。GDDフォンだとこの問題はいまのところ出たことはない。

	昔、 brad のブログで [k9mail](http://code.google.com/p/k9mail/) というのを見たのを思い出したのでそれを入れてみたのだが、ヘッダーのエンコード処理がされておらず日本語の件名などをつかうと化け化けになってしまう。

	機能的には k9mail のほうが優れていて、このエンコード問題さえ解決できれば使えそうだなーと思ったのでいっちょパッチを書いてみた。

	    diff --git a/src/com/android/email/mail/internet/MimeHeader.java b/src/com/android/email/mail/internet/MimeHeader.java
	    index 24aad4d..a117e08 100644
	    --- a/src/com/android/email/mail/internet/MimeHeader.java
	    +++ b/src/com/android/email/mail/internet/MimeHeader.java
	    @@ -11,6 +11,7 @@ import java.util.List;
	     import com.android.email.Email;
	     import com.android.email.Utility;
	     import com.android.email.mail.MessagingException;
	    +import org.apache.james.mime4j.codec.EncoderUtil;
	     
	     public class MimeHeader {
	         /**
	    @@ -97,12 +98,35 @@ public class MimeHeader {
	             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out), 1024);
	             for (Field field : mFields) {
	                 if (!Utility.arrayContains(writeOmitFields, field.name)) {
	    -                writer.write(field.name + ": " + field.value + "\r\n");
	    +                String v = field.value;
	    +
	    +                if (hasToBeEncoded(v)) {
	    +                    v = EncoderUtil.encodeEncodedWord(
	    +                        field.value,
	    +                        EncoderUtil.Usage.WORD_ENTITY
	    +                    );
	    +                }
	    +
	    +                writer.write(field.name + ": " + v + "\r\n");
	                 }
	             }
	             writer.flush();
	         }
	     
	    +    // encode non printable characters except LF/CR codes.
	    +    public boolean hasToBeEncoded(String text) {
	    +        for (int i = 0; i < text.length(); i++) {
	    +            char c = text.charAt(i);
	    +            if (c < 0x20 || 0x7e < c) { // non printable
	    +                if (c != 0x0a && c != 0x0d) { // non LF/CR
	    +                    return true;
	    +                }
	    +            }
	    +        }
	    +
	    +        return false;
	    +    }
	    +
	         class Field {
	             String name;

	[github](http://github.com/typester/android-k9mail/commit/9c37dbdf51ec8ef009b4c6564b0cddcf5f25cbc7) にもあげた。

	この実装がただしいかどうかはわからないけど、これで一応ちゃんとエンコードされるようになる。

	ところで、おもしろいのがこのパッチは com.android. なパッケージを編集してしまっていると言うこと。
	なんと k9mail は com.android.* のパッケージも含んでいるのである。android のメール機能を持ってきて再利用している。
	これはアプリごとにVMが別れてるandroidだからできることなのかなぁとか思ったりした。

	エンコードされないとかどう見てもバグなので [issue](http://code.google.com/p/k9mail/issues/detail?id=534) 登録しておいた。パッチは採用されないと思うけどｗ
	android のメールではこの問題はおこらないということは com.android.* なところはいじらなくても実現可能ということなので。

2009-06-25 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 18:11 Text::MicroTemplate を拡張してみた [perl]:
	最近は [Text::MicroTemplate (TMT)](http://search.cpan.org/dist/Text-MicroTemplate/) をよく利用するようになったのですが、使用するにつれ不満なところが出てきたのでそれを解決するために少し拡張してみました。

	実際には拡張したのは Text::MicroTemplate ではなく、Text::MicroTemplate::File です。

	> [http://github.com/typester/text-microtemplate-extended-perl/tree/master](http://github.com/typester/text-microtemplate-extended-perl/tree/master)

	現在二つの機能を追加してあるのでそれを以下にまとめておきます。

	#### テンプレートの継承機能を追加

	テンプレートを分割するような規模になってくると現状の TMT では

	    <?=r $self->render_file('header.mt') ?>
	    
	    ここにコンテンツ
	    
	    <?=r $self->render_file('footer.mt') ?>

	などのように書くことになりますが、これは [TT](http://search.cpan.org/dist/Template-Toolkit/) の wrapper 機能などに慣れていると少しめんどくさい。

	<ins>追記： TMTでもwrapperはつかえるみたいです。＞ $mtf->wrapper_file</ins>

	そこで、TMT でも wrapper 機能をつかえるように！！
	・・・しようかと思ったのですがやめて、代わりに Django のテンプレートなどで採用されている継承という仕組みを実装してみました。

	詳しい説明は [Django のテンプレートのドキュメント](http://djangoproject.jp/doc/ja/1.0/topics/templates.html#template-inheritance)がとても詳しいのでそちらを参照するといいと思います。

	で、上記の Django ドキュメントにあるテンプレート継承の例をこの拡張版 TMT で書くとどうなるかというと、base.html (base.mt) が

	    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	    <head>
	        <link rel="stylesheet" href="style.css" />
	        <title><? block title => sub { ?>My amazing site<? } ?></title>
	    </head>
	    
	    <body>
	        <div id="sidebar">
	            <? block sidebar => sub { ?>
	            <ul>
	                <li><a href="/">Home</a></li>
	                <li><a href="/blog/">Blog</a></li>
	            </ul>
	            <? } ?>
	        </div>
	    
	        <div id="content">
	            <? block content => sub {} ?>
	        </div>
	    </body>
	    </html>

	child.html (child.mt) は：

	    ? extends 'base'
	    
	    <? block title => sub { ?>My amazing blog<? } ?>
	    
	    ? block content => sub {
	    ? for my $entry (@$blog_entries) {
	        <h2><?= $entry->title ?></h2>
	        <p><?= $entry->body ?></p>
	    ? } # endfor
	    ? } # endblock

	のようになります。

	TT のような wrapper という方式と、このような継承という仕組みはどちらも一長一短ありますが、柔軟にテンプレートを定義できるのは継承の方かなぁと感じてます。

	ちなみに Django テンプレートに実装されている `block.super` 相当の機能はまだ実装できていません。

	#### テンプレートに名前付き引数を渡せる機能を追加

	もう一つ、テンプレートに名前付きで値を渡せる機能も追加しました。オブジェクトを作成するときに

	    Text::MicroTemplate::Extended->new( include_path => ['.'], template_args => { foo => 'bar' } );

	などのように template_args パラメータにハッシュリファレンスを渡しておくと、テンプレート中でこのハッシュのキーを

	    <?= $foo ?> # => bar

	と参照することができるようになるという機能です。

2009-06-22 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:52 SBankNotify for android [android]:
	android アプリケーションの習作に、iPhone脱獄アプリ[SBankNotify](http://moyashi.air-nifty.com/hitori/2008/08/iphoneeiisoftba_1145.html)を android に移植してみました。

	インストールするだけで自動的に機能が有効になります。必要がなくなったらアンインストールしてください。
	機能の詳細などは上記の本家SBankNotifyのページを参照ください。

	アプリは android マーケットにアップしてあるのでマーケットアプリで「SBankNotify」と検索するとこのアプリが見つかると思いますが、正直めんどくさいので[このサイト](http://www.cyrket.com/package/org.unknownplace.sbanknotify)のQRコードを「BarcodeScanner」で読み取ってマーケットのアプリページに飛ぶのが簡単です。

	将来気が向いたら設定ダイアログも作ろうと思っています。通知のON/OFFとかその方法の選択とかですね。

	というわけで僕的 Hello Android World! でしたが、目的が不明なものを作ってしまった。。。今度はもう少しまともなアプリに挑戦します。

	ソースコードは github に置いています。

	> [http://github.com/typester/android-sbanknotify](http://github.com/typester/android-sbanknotify)

2009-06-17 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 17:45 lighttpd だけで多言語サイトを作る方法 [lighttpd]:
	lighttpd 1.4.21 以上では `$HTTP["language"]` という新しい変数(?)が設定の中で使えるようになり、これを使用するとクライアントの `Accept-Language` に応じて lighttpd の設定を変えることが可能になります。

	これを利用して多言語化しているサイトとしては [opensource.kayac.com](http://opensource.kayac.com/) が有名です。

	このサイトは以下のような設定で動作しております。

	    $HTTP["url"] !~ "^/(?:(?:css|js|img|images?|static|tmp)/|[^/]+\.[^/]+$)" {
	        $HTTP["url"] !~ "^/(en|ja)(?:$|/)" {
	            $HTTP["language"] =~ "(en|ja)" {
	                url.redirect = ( "^/(.*)" => "/%1/$1" )
	            }
	            $HTTP["language"] !~ "(en|ja)" {
	                url.redirect = ( "^/(.*)" => "/en/$1" )
	            }
	        }
	    }

	ちょっとややこしいですが、

	    $HTTP["url"] !~ "^/(?:(?:css|js|img|images?|static|tmp)/|[^/]+\.[^/]+$)" {

	で、cssやjsディレクトリ、もしくはルート直下のファイルへのアクセスはそのまま。

	    $HTTP["url"] !~ "^/(en|ja)(?:$|/)" {

	で、すでに `/ja/` や `/en/` へのリクエストであればそのまま。

	上記に該当しなかった場合、

	    $HTTP["language"] =~ "(en|ja)" {
	        url.redirect = ( "^/(.*)" => "/%1/$1" )
	    }

	で、`Accept-Context` が en か ja の場合はそれに応じてリダイレクト先を振り分ける。それ以外の時(対応していない言語の場合)は

	    $HTTP["language"] !~ "(en|ja)" {
	        url.redirect = ( "^/(.*)" => "/en/$1" )
	    }

	で、デフォルトの言語(ここではen)にリダイレクトする。

	というような感じで動作しております。

	このような使い方以外にもさまざまな使い方ができそうですね。覚えておくともしかしたら使えるかもしれません。

2009-06-09 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:04 .ppkファイルとか渡されて困ったとき [osx] [putty]:
	[PuTTY](http://ftp.chiark.greenend.org.uk/~sgtatham/putty/) 独自の形式の .ppk ファイルで鍵ペアを渡されて困ったときのためにメモ。

	PuTTY に付属している puttygen コマンドで普通の公開鍵・秘密鍵に分離できる。

	Debian 系なら `putty-tools` パッケージをインストールするだけでいいらしい(未確認)

	OSX だと ports 使うか自分でビルドする。

	ぼくは自分でビルドした。

	     wget http://the.earth.li/~sgtatham/putty/latest/putty-0.60.tar.gz
	     tar zxvf putty-0.60.tar.gz
	     cd putty-0.60/macosx
	     make puttygen

	で puttygen だけビルドできる。っていうか全体 make はぼくの環境では失敗した。まぁこれさえビルドできればOK。

	秘密鍵を取り出す。

	    ./puttygen unko.ppk -O private-openssh -o private_key

	公開鍵

	    ./puttygen unko.ppk -O public-openssh -o public_key

2009-06-08 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 20:21 ひさびさ [life]:
	やっと引っ越し先のネット環境が整ったのでまたここを更新できるようになった。

	ネットがない間は自分のメモを Google Cache 経由で読むという謎の状況になっていた。つらい。

2009-04-25 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 00:46 カヤックxクックパッド主催　技術者交流会で発表してきた [perl] [event]:
	これ

	> [カヤックxクックパッド主催　技術者交流会のお知らせ～おいしいソースのつくり方～](http://tech.kayac.com/archive/kayac-cookpad-engineers-event.html)

	オーディエンス的にperlの話よりいいと思ったので、もっと概念的な、もっといろいろオープンにしてこうぜ！っていう話をしました。

	スライドはこちら

	> [KAYAC and Open Source Project](http://svn.coderepos.org/share/docs/typester/kayac-cookpad-opensource/start.html)

	以下感想

	#### ElectricCafe.js [村式](http://ville.jp/) 中川さん

	js でポリゴン。写真を元にポリゴン化。すごい！

	村式と言えば鎌倉小町通り沿いにオフィスを構えたご近所さん。こんなところにこんな変態がいたとは！！(褒め言葉)

	また遊びに行かせてください！

	イケメンCTOの画像検索、全然出ないし！！！ だまされた！

	誰かが質問してたけど、特徴点をjsだけで自動で出せたら面白いなー。

	#### プログラミングの【さしすせそ】 [kwappa.net](http://www.kwappa.net) 塩谷さん

	 * 料理
	   * つくる -> たべる -> おいしい！
	 * プログラミング
	   * つくる -> うごかす -> たのしい！

	どっちも楽しい。**幸せを作る作業** だといっていた。いい言葉ダナー；；

	さて、どちらもやはり基礎が大事だよね！

	 * 料理
	  * さしすせそ
	 * プログラミング
	  * コンピューターサイエンス

	というわけで、基礎を勉強するコミュニティをつくったらしい。おわり。えー！

	詳細はこちら

	> [http://www.kwappa.net/](http://www.kwappa.net/)

	#### Railsメールウェア [Cookpad](http://cookpad.com) インターン中村さん

	Cookpadに「つくれぽ」という機能がある。

	レシピを公開してる人に対し、つくってみたよー、とかおいしかったよー、とかいうのを送れる機能らしい(たぶん)。ネーミングセンスいいなー。

	で、それを携帯で送れたらいいよね！っていうことになり、インターンの中村さんががんばったよっというお話。

	Javaの [James](http://james.apache.org/) を参考に Ruby で同じような物を実装したとのこと。すごいなー。

	perl だと [qpsmtpd](http://smtpd.develooper.com/) とかみたいなイメージかな。個人的には最近は qpsmtpd で受信してジョブキューにつっこんであとはゆっくりそっちで処理。というパターンをよく使うな。

	皮肉なことに James をホストしてる apache.org のメールサーバーは qpsmtpd だったりするのよねー。

	というわけで歓談タイムにqpsmtpdをプッシュしまくっておいた。

	あと作ったものを公開はしないんですか？ と聞いたところ stable になったら公開したい！ とのことなので期待。

	#### カヤックxクックパッド イケメンCTO二人 + 技評 馮さんのトークセッション

	クックパッド、何をするかを決めるときに何がベストかをすごい慎重に決める。何かをやるための時間を決めたらその 1/3 は計画に使う。

	そして驚いたのは、その計画は全員が納得するまでやるといっていたところ。気持ち悪くなると言っていた。

	そして計画で決めるのは仕様ではなく指標。ロジックとなる部分。

	完璧なロジックには反対できない。

	しかしそれでも会議の結論に対して全員が納得できるというのは相当なことだなーと思って、そのためにどういう手法をとっているのか質問した。

	3つあるという答え

	1. 会議の前に共有された3つの前提条件がある
	  * この3つがそろったものしかやらない
	2. EOGS (Emotion Oriented Goal Setting)
	  * ユーザーの欲求をもとにしてゴールを設定するための指標シート
	3. ロジックツリー （マインドマップ)
	  * 前述の通り決めるのはロジック

	質問したくせに、3つの前提条件の内容を失念してしまったのでググったところ、 ryo_katsuma さんのナイスな記事がひっかかった。

	> [Ruby on Rails セミナーに参加してきました - blog.katsuma.tv](http://blog.katsuma.tv/2008/11/ruby_on_rails_seminar_by_cookpad.html)
	>
	> * Bestなことを見つけるまでのの３つの輪
	>   * やりたい（情熱を持ってとりくめること）
	>   * できる（世界で１番になれること）
	>   * やるべきこと（儲かること）

	ってことかな？

	やっぱり会議前から前提条件をしっかりそろえて会議のコンテキストをそろえること、会議中も正しくゴールに近づけるようなシステムがある。

	広げるだけ広げて、収束しない会議ってよくあると思うんだけど、そういう人たちは参考にするといいと思った。僕もここはもう少し掘り下げてみたい。

	あと、イベント終了後にすこしお話しさせてもらったときに、「数値化して比較する」っていうことも最近はやってるとおっしゃっていた。どっちの方法が良いのか迷ったときに、効果や費用などすべてを数値化することで客観的に判断できる。なるほど。

	#### まとめ

	料理とプログラミングは似ている。

	cookpad 面白い会社。

2009-04-24 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 13:45 グラハム・エーカー氏が実在した件 [life]:
	今日はあるエントリに心を奪われた。

	> [新人プログラマーがプロのプログラマーとして独り立ちするための7つの条件 - ハックルベリーに会いに行く](http://d.hatena.ne.jp/aureliano/20090423/1240454590)
	>
	> 「無理を通して道理を引っ込ませてこそプロのプログラマー」ということだった。

	カッコイイ！

	しかし、ん？どっかで聞いたことある台詞だなと思ったら

	> [「そんな道理、私の無理でこじ開ける！」 グラハム・エーカー](http://unknownplace.org/memo/2008/03/01#e001)

	同じこと言ってる！

	Tさんは現代のグラハム・エーカーと言えよう。会ってみたいなー。

2009-04-21 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 13:46 Mouse なクラスと subtype [perl]:
	今日 Mouse を最新版にしたら書いていたコードが動かなくなった。

	subtype していたところで、

	    The type constraint 'Ark::Request' has already been created in Mouse::Util::TypeConstraints and cannot be created again in Ark::Context

	というエラーになってしまう。これは Mouse の subtype のところのコードを読めばすぐわかるが、違う場所で重複定義しようとしたときに出るエラーだ。

	subtype 一回しか書いてないのに重複定義とは何事か、と思ったが、今の Mouse では Mouse でクラスを作るとそのクラスに `class_type` が設定されるようになってるみたい。

	つまりこの場合は `Ark::Request` は Mouse なクラスなのですでに `class_type` されているのだが、それをさらに subtype で定義しようとしてエラーになってたというわけ。

	こちらの挙動が Moose と同じで、いままでの Mouse のほうがちょっと互換性がなかったということみたい。

	というようなことを Mouse メンテナーであるところの tokuhirom 氏や、MouseX ファウンダーであるところの ikasam_a 氏に教えてもらった。ありがとうございます！

	あわせて読みたい：

	> [Mouse の subtype に関する非互換 - TokuLog 改めB日記](http://d.hatena.ne.jp/tokuhirom/20090421/1240280869)

2009-04-20 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 20:45 Yokohama.pm Tech Talk #4 行ってきた [perl]:
	もう4回目か。。

	#### qudo x skinny (id:nekokak)

	`qudo` はクドーと読む。キュードーだと思ってた！(& キュードーのが良いなぁ)

	Skinny は前回(?)も発表したORM。`SQL::Parser` がしょぼい＆遅いので捨て、ルールベースにしたとのこと。

	それはいいんだけど、DSL まくっててちょっと個人的にはやだなぁ。DSL は覚えるのが大変。DSLは `::Declare` とかで別途やって欲しい感じ。どちらでも使えるのがいいと思います！

	現状は一部足りないところもあるけど、だいたいのところ(id:nekokakさんが普段使う領域)はうごくレベルらしい。

	Qudo は TheSchwartz みたいなジョブキュー。TheSchwartz の不満なところを直して、欲しかった物をつけた感じの物。

	 * ORM に依存しない
	 * DB 以外にも memcached とかキャッシュサーバーをバックエンドにも使える(予定)
	 * 適度なHookポイントをつけてプラッガブル！
	 * エラー処理管理しやすく (イイネ)
	 * 管理系コマンドも充実 (イイネ)
	 * テストモジュールも用意 (イイネ)

	というかなり良い感じの物になってるので、TheSchwartz つかってる僕としては触ってみたいなと思った。ORM 対応とかは正直 DBI にさえ対応してくれればいいんだけど。。

	ZIGOROu さんがMacBookになってる！！

	#### DI x Perl! (id:lestrrat)

	DIよくわかってない。

	オブジェクトの自動組み立てのことをいうらしい = 依存関係を満たしつつ初期化。

	。。。というと？

	自分で依存関係を考慮してコーディングしなくていい。なるほど。

	どうやるか？ 普段どおりのクラス定義 + 依存性定義ファイル + アセンブラ(なんだろこれ、前二つを結びつけて組み立てる物)

	Bread::Board の実際のコード例。見てもよくわからん。

	lestrrat化後はどうなるか （今後取り込まれる予定のもの)

	クラス構造使いやすく。（こっちの例はいい感じ）

	 * Bread::Board (coreモジュール、いままでのようにDSLではない)
	 * Bread::Board::Declare (いままでのようなDSLインタフェース)
	 * MooseX::Bread::Board もつくったよ

	lestrrat化したあとのものは僕にとってもわかりやすく、一度試してみたい。依存性を全く考慮することなくコーディングできるなら確かに楽なのかもしれないなぁ。

	やってみないとわからないので、これは取り込まれたら使ってみる。

	#### WAF のつくりかた (id:dann)

	おなかすいた。

	いろんな言語のWAFの特徴。最近Djangoってる僕としてはPythonのWAFについてまったく調べてないんじゃないの！！ と思ってしまったｗ Django 面白い機能いっぱいありますよ。

	で、それらをいいとこ取りしたのが Angelos!

	フックポイントは大文字！ きもい！

	デフォルトセットの概念は良い。 Module::Setup のフレーバーで定義。いいね。

	#### amazon の MapReduce エラスティックなんちゃら (id:lopnor)

	mapper or reducer スクリプトから CPAN モジュールを使用するための方法。

	local::lib して jar でかためて云々すれば普通に使えるらしい。

	#### Simo (id:perlcodesample)

	Moose とかみたいなやつ。Mouse が存在しなかったら触ってみたかも。

	Moose/Mouse との比較があるとよかったかもなぁ。機能比較はもちろんだけど、速度比較とかも。

	機能としては MOP 的なものが全くなさそう(?) なので、Moose/Mouse からの移行はなかなか難しそう。

	#### CAPとBASEとEventually Consistent (id:yohei)

	職業にふいたｗ

	赤ラクダ本とかしらない＞＜ MogileFS とか Perlbal とかの brad プロダクトを使ってるらしい。 MogileFS の運用話は聞いてみたかったけど懇親会で話す機会なかったなぁ。

	CAP定理！ どれもとりたいジレンマ。どれかを妥協せざるを得ない。

	Webアプリだとたいていの場合 C (Consistency) を妥協。

	その C の中の Eventually Consistent というのについての話。これについては「結果整合性」でググれば一番良いページがいちばんうえにくる！ [ここ？](http://www.hyuki.com/yukiwiki/wiki.cgi?EventuallyConsistent)

	BASE とか CAP とか全く知らなかったけど、Eventually Consistent 的な手法というのは Web 開発においてはよくつかわれていて、全然わかる話ではあった。

	自分の身近では実際の方法論などばかり話されるばかりで、あういう概念的な話は全く出ないので面白かった。もう少し知りたい。

	あわせて読みたい：

	 * [yohei-y:weblog: CAP と BASE について調べたこと](http://yohei-y.blogspot.com/2009/03/cap-base.html)
	 * [yohei-y:weblog: CAPのCとACIDのC](http://yohei-y.blogspot.com/2009/03/capcacidc.html)

	#### LT

	MacBookのバッテリー切れてメモがない。

	id:IMAKADO の perl-completion.el の説明。早口で perl-completion ユーザーの僕としても難しかった。非ユーザーは理解できなかったかも。

	ジョブキューは Qudo で良いよって言う結論。(うろ覚え)

	AAFind おもろいｗ やる男がやるプレゼンは新しい。

	#### まとめ

	Django本にサインもらった。うれしい

	* 10:31 my clmemo設定 [clmemo] [emacs]:
	このメモは [clmemo.el](http://pop-club.hp.infoseek.co.jp/emacs/clmemo.html) で書いてるわけだけど、もっと個人的なメモとるように、MacBookにもインストールしてみた。

	で、[僕のつかってる clmemo](http://unknownplace.org/pub/clmemo.txt) のフォーマットは、タイトル行に書いた時間をいれる、本文は Markdown というような物になっていて、この時間を入れるために[こんなパッチ](http://unknownplace.org/memo/2005/10/14#e005)を当てていた。

	けど今見てみたらそんなパッチ当てる必要もないことがわかった。

	こんな感じ、

	    (require 'clmemo)
	    
	    (setq clmemo-file-name "~/clmemo.txt")
	    (setq clmemo-time-string-with-weekday t)
	    
	    (setq clmemo-subtitle-char "[")
	    (setq clmemo-subtitle-punctuation-char '(" [" . "]"))
	    
	    (defadvice clmemo-get-title (after clmemo-get-title-with-time () activate)
	      (setq ad-return-value (concat (format-time-string "%H:%M ") ad-return-value)))

	でやればこのメモのフォーマットになる。いいね！

	clmemo.el のソースも昔は意味不明だったけど今はだいたいわかるし。やっぱり emacs つかうなら elisp 理解できないと損というか、もったいないなぁ。ということがわかった。

2009-04-08 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 14:16 古いバッファを自動で消したい！！#2 [emacs]:
	昨日のやつに言及いただいた。

	> [midnight.el で毎日 0 時に古いバッファを削除する - (rubikitch loves (Emacs Ruby CUI))](http://d.hatena.ne.jp/rubikitch/20090407/1239115399)
	>
	> 標準添付の midnight.el とかどうだろうか。

	まさにこれがやりたかった。ありがとうございます！

	で、設定ファイル書かなくても全部 customize だけでできるみたい。

	`customize-group midnight` して `midnight-mode` を `on` にすれば OK。ノーマルバッファの削除間隔はデフォルトだと3日だが、ちょっと短いのでそこも 7 とかに変更した。

	あとはまぁデフォルトで良いかな。

2009-04-07 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 11:58 古いバッファを自動で消したい！！ [emacs]:
	気がつくとemacsのバッファがすごい数になっていて補完などが重くなるのである程度たまったら自動で古い物(しばらくvisitしてない物)を自動的に削除するようなものが欲しい。

	とりあえずぼくのelisp力ではあんまり難しいことはできないので

	    (defun kill-old-buffers ()
	      (interactive)
	      (let ((count 0))
	        (dolist (b (buffer-list))
	          (incf count)
	          (if (> count 100)
	              (or (buffer-modified-p b)
	                  (kill-buffer b))))))

	とかいうのを書いてとりあえずはしのぐことにした。これは最後に使ったバッファ100個のこし、それ以前のバッファで修正フラグがたってないものを全部殺すというもの。

	`(buffer-list)` でとれるリストは anything などのように故意に最後に自分を突っ込んでる物以外はだいたい最後に訪問した順にくるようになってると思うのでまぁだいたいこれでやりたいことはできている感じ。

	100個より古いバッファとかもうほとんど参照しないよね。必要になったら開き直せば全然かまわない。

2009-04-03 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 15:01 詰まったFCGIプロセスを見つける方法 [perl]:

	    package FCGI::ProcManager::Debug;
	    use strict;
	    use warnings;
	    use base qw/FCGI::ProcManager/;
	    
	    sub pm_manage {
	        my $res = shift->SUPER::pm_manage(@_);
	    
	        # manager does not return pm_manage, so below code should run in server only
	        $0 = 'perl-fcgi (waiting)';
	        $res;
	    }
	    
	    sub pm_pre_dispatch {
	        $0 = sprintf('perl-fcgi (started %s)', scalar localtime);
	        shift->SUPER::pm_pre_dispatch(@_);
	    }
	    
	    sub pm_post_dispatch {
	        $0 = 'perl-fcgi (waiting)';
	        shift->SUPER::pm_pre_dispatch(@_);
	    }
	    
	    1;

	こんな感じの `ProcManager` のサブクラスを作り、これを代わりに使用すると、psコマンドでperlプロセスが詰まってないか確認することができるようになる。

	プロセスが待機中の時は

	    perl-fcgi (waiting)

	実行中の場合は

	    perl-fcgi (started Fri Apr  3 14:39:25 2009)

	とスクリプト実行開始時間がでるので、それを元に探せばいい。`$ENV{PATH_INFO}` 等も表示させるともっと親切かも。

	Catalyst のアプリの場合、

	    ./script/myapp_fastcgi.pl -manager FCGI::ProcManager::Debug

	等とすると使用するmanagerクラスを変更できるようになってるから、コードを変更せずすぐに導入できる点もグッド。

2009-03-26 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 17:32 lleval.el [perl] [emacs]:
	> [YappoLogs: danさんのllevalをもっと便利にするラッパー作った](http://blog.yappo.jp/yappo/archives/000651.html)
	>
	> 一時はcodepadの1/100くらいの利便性まで下がってしまって心配しましたが、80倍便利になってぼくたちのDan the APIが帰って来ました。

	ということで、emacs からたたけるようにしてみました。

	> [lleval.el](http://gist.github.com/85855)

	先日作成した codepad.el と同じようなインターフェースになっていて、`M-x lleval-buffer` でバッファをllevalする、`M-x lleval-region` で選択したリージョンを lleval する、となっています。

	言語はメジャーモードから自動判別されます。

	codepad よりレスポンスがはやくて快適ですね！

	Enjoy!

2009-03-25 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 17:45 CGI用の設定 [lighttpd]:
	[こういうようなFastCGI用の設定](http://unknownplace.org/memo/2007/03/16#e001)のCGIバージョン。

	こんな感じかなー。

	    server.document-root = "/Users/typester/dev/scratch/myapp/root"
	    
	    $HTTP["url"] !~ "^/(css/|images?/|js/|static/|tmp/|[^/]+\.[^/]+$)" {
	        cgi.assign = ( "" => "" )
	        alias.url = (
	            "" => "/Users/typester/dev/scratch/myapp/script/myapp.cgi",
	        )
	    }

2009-03-17 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 02:30 OSX でディスプレイが電源切れたことを検知したい [osx]:
	おもむろに Xcode のドキュメントを検索すると `CGGetOnlineDisplayList` とかいう関数が見つかったので

	    #include <CoreFoundation/CoreFoundation.h>
	    #include <ApplicationServices/ApplicationServices.h>
	    
	    int main (int argc, const char * argv[]) {
	        CGDisplayCount    displayCount;
	        CGDirectDisplayID displays[4];
	        int               i;
	    
	        CGGetOnlineDisplayList(4, displays, &displayCount);
	    
	        for (i = 0; i < displayCount; ++i) {
	            CGRect rect = CGDisplayBounds(displays[i]);
	            printf("%d: %.0fx%.0f ( ", i, rect.size.width, rect.size.height);
	    
	            if (CGDisplayIsActive(displays[i]))
	                printf("active ");
	    
	            if (CGDisplayIsAsleep(displays[i]))
	                printf("sleep ");
	    
	            if (CGDisplayIsBuiltin(displays[i]))
	                printf("builtin ");
	    
	            if (CGDisplayIsMain(displays[i]))
	                printf("main ");
	    
	            if (CGDisplayIsOnline(displays[i]))
	                printf("online ");
	    
	            printf(")\n");
	        }
	    
	        return 0;
	    }

	とかいうのを書いてみた。これで、

	    $ ./dispinfo
	    0: 1280x800 ( active builtin main online )
	    1: 1024x768 ( active online )

	とかいう出力が得られる。

	のだけど、ディスプレイの電源（上記の1）を切ってもこのプログラムの出力は全く変わらない。ケーブルを抜くと出力から消える。

	ここではケーブルは指したままで、ディスプレイの電源が落ちたことを検知したいという状況なので全然使えない。。

	どーしたらいいんだろ？

2009-03-12 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 17:37 codepad.el も書いた [perl] [emacs]:
	昨日つくった dan-perl.el なんだけど、

	> [404 Blog Not Found:Ajax - perlを実行するAPI](http://blog.livedoor.jp/dankogai/archives/51186815.html)
	> 
	> きっかけは、Codepadへの不満。PerlのVersionが5.8.0と古すぎる上、HTMLベースだと再利用がちょっと大変。というわけで別の車輪を再発明したわけです。上のサンプルを見てのとおり、perlの範囲内であればcodepadより自由な環境が楽しめます。

	ということなんだけど、実際のところはなんだか codepad よりも自由度が低いような気がします。。。 use できても実際に使おうとするとエラーになるモジュールが多いし。codepad だったら perl 以外もいけるし。

	というわけで codepad でよくね！ということで emacs インタフェースを作ってみました。

	> [codepad.el](http://gist.github.com/77962)

	`M-x codepad-run-buffer` とかするとカレントバッファをcodepadに投げてその実行結果を表示します。codepadでの言語はメジャーモードから自動的に判別するようになっています。

	ほか、選択したリージョンを実行する codepad-run-region や プロンプトでワンライナーを入れる codepad-run などの関数があります。

	言語をメジャーモードから取得するより自分で指定できるようにした方が良いのかもとか、実行したあとブラウザで結果ページを表示したほうがいいかもとか、いろいろありますがとりあえずこんなもんで。

2009-03-11 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 15:26 dan-perl.el 書いた [perl] [emacs]:
	また無駄な物を書いてしまった。

	> [http://gist.github.com/77312](http://gist.github.com/77312)

	参考：

	 * [404 Blog Not Found:Ajax - perlを実行するAPI](http://blog.livedoor.jp/dankogai/archives/51186815.html)

2009-03-05 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 20:40 CarbonEmacsの背後のWindowを切り替える [osx] [emacs]:
	そろそろ野球のシーズンですね。フルスクリーンEmacsの裏にメディアプレーヤーを置くとなかなか快適ということを発見しました。

	<a href="http://www.flickr.com/photos/typester/3330676348/" title="watching wbc while coding by typester, on Flickr"><img src="http://farm4.static.flickr.com/3374/3330676348_7c2e6869be.jpg" width="500" height="313" alt="watching wbc while coding" /></a>

	しかし、単純に裏に表示しているだけなため、Firefoxを開いたあとEmacsに戻ったりするとEmacsの裏の画面がFirefoxになってしまっていてイラッとします。

	そこでこんな elisp で emacs の裏の画面を好きなアプリケーションにすぐに設定できるようにしてみました。

	    (do-applescript "activate application \"VLC\"
	                     activate application \"Emacs\"")

	快適。

	ところで、これをもっと汎用的にして、VLC の部分を anything で選択きたら全画面 emacser にはものすごく便利なのかも。

2009-03-02 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 10:55 ライブドアテクニカルセミナーにいってきた [life]:
	先週末のライブドアテクニカルセミナーに行ってきた。

	感想

	 * シシンデラ
	   * 実運用ありきで開発
	   * パフォーマンスはなかなか良さそうであった
	   * けれども環境や、運用方法の制限は多めな感じ
	   * うちの環境にはちょっとマッチしないけど、そういうのが決まれば使えそう
	
	 * livedoor Blog
	   * 長いサービスだから過去の遺産がカオス
	   * 文字コード混在、共存させるバッドノウハウ。カオスｗ
	   * 大変そう
	   * ASPをやるらしい

	 * 金子さんのP2Pの話
	   * P2Pの歴史
	   * P2P自体というよりはP2Pネットワークの歴史
	   * Winny2や新しく作ってる何とかキャスト(名前忘れた..)の話
	   * 何とかキャストは交換鍵認証を採用
	   * 配信はDRMベース。現在はWMPのみ対応（ぇー
	   * 配信者が期限とか保存可否とかちゃんと制御できるらしい
	   * 何とかキャストに関しては言えないことが多いみたい(?)で全体的に曖昧な発表

	懇親会にも参加したけど、あういう雰囲気は苦手だなぁ。普通に居酒屋とかでやるほうがいいな。

	シシンデラとブログの話と金子さんのP2Pの話が面白かった。でも、Open&Share というテーマなのに金子さんがゲストというのに違和感を覚えた。

	しかし、ほぼ自社ネタだけであんなに長時間のセミナーを開けるのはすごいなー。

2009-02-19 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 12:13 VirtualBoxのゲストでNATネットワーク使ってるときの設定メモ [virtualbox]:
	いままではゲストにWindowsとかしかいれてなかったので、ホストからゲストにネットワークがつながってなくてもよかったけど、さっき Linux いれたら ssh できねーってこまった。

	マニュアル読んだら書いてあったがめんどうなのでメモ。

	NAT 接続の場合は VirtualBox 側でポートフォワードでゲストにつなげられるようにする機能がついてるけど、GUIがないのでコマンドたたくしかない。ホストの 2222 ポートをゲストの 22 ポートにする場合は

	    VBoxManage setextradata "debian" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/Protocol" TCP
	    VBoxManage setextradata "debian" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/GuestPort" 22
	    VBoxManage setextradata "debian" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/HostPort" 2222

	とするればいいみたい。`"debian"` は VM の名前で、pcnet というのは使用しているインタフェースの名前。`Intel PRO/1000` 使ってる人はここを `e1000` とするらしい。guestsshってのは適当な名前を自分でつければいいのかな。

	設定を消すときは最後の引数を消したのをもう一度実行すればいいようだ。ちょっとめんどうだなぁ。

	そんで、sshのポート番号とかたぶんすぐわすれるので、`~/.ssh/config` に

	    Host vbox
	      Port 2222
	      HostName 127.0.0.1

	とかしといた。しかし、vbox という名前を忘れたらどうしよう。。

2009-02-12 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:59 モダンPerl入門 [perl]:
	<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798119172/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/417K6qXAgvL._SL160_.jpg" alt="モダンPerl入門 (CodeZine BOOKS)" style="border: none;" /></a></div><div class="amazlet-info" style="float:left;margin-left:15px;line-height:120%"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798119172/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">モダンPerl入門 (CodeZine BOOKS)</a><div class="amazlet-powered-date" style="font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%">posted with <a href="http://www.amazlet.com/browse/ASIN/4798119172/unknownplace-22/ref=nosim/" title="モダンPerl入門 (CodeZine BOOKS)" target="_blank">amazlet</a> at 09.02.12</div></div><div class="amazlet-detail">牧 大輔 <br />翔泳社 <br />売り上げランキング: 468<br /></div><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798119172/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jp で詳細を見る</a></div></div><div class="amazlet-footer" style="clear: left"></div></div>

	読了！

	第1章は今風のperlのオブジェクト指向について。最近の流れ知らない人にはいいですね。

	第2章はその今風な書き方でのデザインパターン。ここが個人的にはすごく参考になった。やっぱりいつもかいてるようなコードで説明されるとわかりやすい。

	3，4章でDBやWAFについて。Catalystのロジック分離のところは、自分の説明が下手でなかなか伝わらないことが多いので、今度からはここを読めと勧めることにする。

	5章はシステム周り。デーモンの作成とか、そんなのdaemontoolsにまかせちゃうしなーとかおもっていたらちゃんとそこも説明されていた。さすがｗ

	ジョブキュー関係まで扱っていてやっぱりモダンだなぁ、と感じたのだけど、ジョブキューをどうして使うかというところの説明はもう少しあってもいいのかもと思った。時間のかかる処理をmod_perlやfcgi内でやるとどういうことになるのかとか。

	6章はテスト。テストの考え方と基本的な書き方。`Apache::Test` とかまで書いてる割には、あまり突っ込んだ書き方を説明してないところは少し残念。テスト用のライブラリとかmockの作り方くらいはあるといいのかなー。

	7章で最適化の話。`qr//` の話は知らなかったなー。

	8章はXS! いままで筆者が話してきたことの総括みたいな感じ。ここまでまとまってる本はないと思う。すばらしい！

	9章はCPANとか基礎知識の説明。おまけ的な感じ。

	というわけで、全体としてとてもよくまとまっていてすばらしいです。perl書く人すべてにおすすめ。

2009-02-06 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 20:37 Hiveminder.app [osx] [hiveminder]:
	お気に入りのタスク管理ツール [Hiveminder](http://hiveminder.com/) をちょっとハックして自分好みにしてみた。

	<a href="http://www.flickr.com/photos/typester/3257131671/" title="Hiveminder.app by typester, on Flickr"><img src="http://farm4.static.flickr.com/3347/3257131671_4449115c2c_o.png" width="505" height="554" alt="Hiveminder.app" /></a>

	 * Fluid でアプリケーション的に使えるように
	 * ページ内の jGrowl の通知を本物の Growl 使うように変更
	 * いまやってるタスクのタイムをカウント出来る機能
	 * でそれ(いまやるべきこと)を10分間隔で Growl 通知する機能

	など。すぐに他ごとしてしまう僕のような人には一番最後の機能がなかなか有効なはず。

	スクリプトのダウンロード、使い方などはgithubにアップしたのでそっち見てくださいませ。

	> [typester's hiveminder-local-timetrack at master - GitHub](http://github.com/typester/hiveminder-local-timetrack/tree/master)

	余談。

	そんなに Hiveminder がいいの？ と聞かれると返答に困るわけですが、[todo.pl](http://search.cpan.org/dist/App-Todo/bin/todo.pl) からのブレインダンプでのタスク登録 (todo.pl braindump) とか、指定した日付になるまでタスクリストからタスクを隠せる機能 ([hide until next monday]) だとか、タスクにアイデア的に登録したものをやんないよなーってものは永久に隠せたり（隠してるのはいつでも表示させることが出来るので過去のアイデアリストとして使える）とか他にはない気に入ってるところがたくさんあるので使い続けてます。

	@obra++ bestpractical++

	ってとこですかね！

	あと、いつものように、自分の必要な最小限の機能しかつくってないので、興味ある人いらっしゃいましたら是非とも一緒にハックしましょう。

2009-02-03 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 13:38 iPhone野良レポジトリの作り方 [iphone]:
	[coderepos](http://coderepos.org/share/) で野良レポジトリホストしたらいいんじゃね、っと思ったのでちょっとやり方をメモ。

	iPhone の野良レポジトリは Debian の apt ベースになってるので、開発者が作った .deb ファイルをホストする感じになるのかな。なのでとりあえずここでは .deb の作り方は省く。

	ホストの仕方は簡単で、.deb を同じディレクトリにつっこんでおいて、そのディレクトリ内で Debian の `dpkg-dev` パッケージをインストールすると入る `dpkg-scanpackages` コマンドを使って

	    dpkg-scanpackages -m . > Packages

	とやるとそのディレクトリの .deb をなめてパッケージ一覧を作ってくれる。これを bzip2 して Packages.bz2 にすれば最低限のレポジトリが完成する。簡単ですね！

	ただ、iPhone野良アプリの.debには独自のメタデータがあるので、 `dpkg-scanpackages` にそれを理解させるためにちょっと変更する必要はある。

	    --- /usr/bin/dpkg-scanpackages  2008-12-29 13:46:45.000000000 +0900
	    +++ dpkg-scanpackages   2008-12-10 14:12:55.000000000 +0900
	    @@ -25,7 +25,9 @@
	     
	     my @fieldpri = (qw(Package Package-Type Source Version Kernel-Version
	                        Architecture Subarchitecture Essential Origin Bugs
	    -                   Maintainer Installed-Size Installer-Menu-Item),
	    +                   Maintainer Installed-Size Installer-Menu-Item
	    +                  Name Author Homepage Icon
	    +               ),
	                     @pkg_dep_fields, qw(Filename Size MD5sum Section Priority
	                        Homepage Description Tag));

	僕の環境(Debian Lenny)ではこんな感じ。

	この `dpkg-scanpackages` でつくった Packages.bz2 があるだけで一応レポジトリとしては機能するけど、どうせなのでレポジトリのメタデータなどを置きたいかと思います。

	それは同じところに `Release` というファイル名で

	    Origin: Saurik's Example for Cydia
	    Label: Cydia Example
	    Suite: stable
	    Version: 0.9
	    Codename: tangelo
	    Architectures: iphoneos-arm
	    Components: main
	    Description: An Example Repository from HowTo Instructions

	こういうのを置いておけばOKです。各項目の説明は [saurik 先生のエントリ](http://www.saurik.com/id/7)の Step 4: Repository Metadata (Optional) というところを見るといいと思います。

	しかし coderepos は debian ベースではなかった気がするから、どういう場合はどうやるんでしょうね。。

2009-01-27 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 20:24 ローカルのgitレポジトリをgistにアップするgist.pl [git] [github]:
	とか作ってみた。

	> [gist.pl](http://gist.github.com/53293)

	git レポジトリのルートで実行するとそのレポジトリの内容を gist にポストし、レポジトリの remote に投稿した gist を追加します。

	いろいろ手抜きなので下に注意事項を書いておきます。

	 1. 正確にはレポジトリの中身ではなくてカレントディレクトリ以下のすべてのファイルを投稿しちゃう (.git以下はのぞく)
	 2. git config で github.user と github.token を登録しておく必要がある
	 3. remote 名 は origin きめうち
	 4. プライベートgistとかしらない

	などという感じです。特に1は注意。必要に応じてverupする感じで。

	gisty つかってたんですが、僕は何か作るときとりあえず git init するので、gisty だと gist に投稿したらそれ以降違う場所のレポジトリを使うという設計なのでちょっと面倒だったんですね。

2009-01-26 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 14:52 [emacs]:
	EmacsWiki のコードが冗長なので短くしてみた。

	    (setq erc-prompt (lambda ()
	                       (let* ((buffer (buffer-name))
	                              (channel (when (string-match "\\(#[^@]+\\)" buffer)
	                                           (match-string 1 buffer))))
	                         (erc-propertize
	                          (concat
	                           (or channel
	                               (if (and (boundp 'erc-default-recipients) (erc-default-target))
	                                   (erc-default-target)
	                                 "ERC"))
	                           ">")
	                          'read-only t 'rear-nonsticky t 'front-nonsticky t))))

	elisp的にはこういうのどうかくのが良いのかわからんけどとりあえず短くはなった。

	* 14:41 [emacs]:
	[id:IMAKADO](http://d.hatena.ne.jp/IMAKADO/) さんにバッファ作らずに使わずに正規表現マッチする方法教えてもらったのでちょっと短くできた。

	    (setq erc-prompt (lambda ()
	                       (let* ((buffer (buffer-name))
	                              (channel (when (string-match "\\(#[^@]+\\)" buffer)
	                                           (match-string 1 buffer))))
	                         (if channel
	                             (erc-propertize (concat channel ">") 'read-only t 'rear-nonsticky t 'front-nonsticky t)
	                           (if (and (boundp 'erc-default-recipients) (erc-default-target))
	                               (erc-propertize (concat (erc-default-target) ">") 'read-only t 'rear-nonsticky t 'front-nonsticky t)
	                             (erc-propertize (concat "ERC>") 'read-only t 'rear-nonsticky t 'front-nonsticky t))))))

	* 11:41 ERCのプロンプトにチャンネル名表示 [emacs]:
	というネタは [EmacsWiki: Erc Configuration](http://www.emacswiki.org/emacs/ErcConfiguration) の Channel-specific prompts に書いてあるんだけど、そこにも書いてあるとおり、初回表示時にはチャンネル名にならないのでこんな感じにハック。

	    (setq erc-prompt (lambda ()
	                       (let* ((buffer (buffer-name))
	                              (channel (with-temp-buffer
	                                         (insert buffer)
	                                         (beginning-of-buffer)
	                                         (when (re-search-forward "\\(#[^@]+\\)" nil t)
	                                           (match-string 1)))))
	                         (if channel
	                             (erc-propertize (concat channel ">") 'read-only t 'rear-nonsticky t 'front-nonsticky t)
	                           (if (and (boundp 'erc-default-recipients) (erc-default-target))
	                               (erc-propertize (concat (erc-default-target) ">") 'read-only t 'rear-nonsticky t 'front-nonsticky t)
	                             (erc-propertize (concat "ERC>") 'read-only t 'rear-nonsticky t 'front-nonsticky t))))))

	バッファ名からチャンネル名部分とるようにした感じ。

	1:1 トークとかどうなるかわからないのでとりあえず EmacsWiki のルーチンも書いておいた。

2009-01-23 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:38 dopplr.el [emacs] [elisp]:
	最近 [ERC](http://www.emacswiki.org/emacs/?action=browse;oldid=EmacsIRCClient;id=ERC) つかって IRC も emacs でやるようにしたのだけど、昔 irssi 用に作った [dopplr.pl](http://unknownplace.org/memo/2008/03/21#e002) とおなじことが emacs でもしたくなったのでちょっと書いてみたりした。

	> [dopplr.el](http://gist.github.com/50900)

	使い方は [dopplr.pl](http://unknownplace.org/memo/2008/03/21#e002) と同じで最初に

	    (setq dopplr-api-token "your api token") ; M-x customize-group RET dopplr でもできる

	しておいて、あとは

	    M-x dopplr-local-clock RET miyagawa

	するという感じになっています。

	dopplr.el などとたいそうな名前ですがまだこれしか作ってません。

	はじめて設定以外で elisp 書いたけどむずかしい。すごいぐちゃぐちゃになってしまった。絶対もっとうまく書けるはず。

2009-01-21 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:23 OSXで快適ビットマップフォント生活 [osx]:
	OSX の良いところの一つにアンチエイリアスの効いたきれいなフォントがあげられると思います。

	ただ、ターミナルやエディタなどでそう言うフォントを使用するとどうしても視認性の問題から文字サイズを大きくする必要があり、1画面あたりの情報量が減ってしまいます。

	また単純に僕がビットマップフォントが好きだという理由もあり、ずっと OSX でもビットマップフォントで開発したいなーと思ってました。

	しかし、Terminal.app や iTerm できれいに日本語を表示できるビットマップフォントを見つけられず、やむを得ずアンチエイリアスしてました。
	Osaka フォントとか、CarbonEmacs だとビットマップ表示で日本語きれいにひょうじできるのにTerminal.app やiTerm だとガタガタになってしまうし。。

	で、あきらめてたんですが、モトヤシーダというフォントならいけるよという話を聞いて設定してみたところわりときれいに表示させることが出来ました。

	モトヤシーダは

	> [http://www.motoyafont.jp/](http://www.motoyafont.jp/)

	こちらのサイトで販売されているのですが、お試しフリーフォントというところに入っていますのでとりあえず無料で試せます。僕はWin版をダウンロードしてCrossOver Macで自己解凍exeを展開しました。ただのlhaの自己解凍形式のようなのでlhaコマンドでも行けるそうです。

	そんなわけで Terminal.app + iTerm から CarbonEmacs + iTerm に移行しました。

	僕が愛用している CodingFontTobi というフォントは ttf 版だとなぜか 16pt 設定で 11pt 相当の表示というなぞの状態になっていて、日本語をうまく混在表示させるためにはasciiとそれ以外で違うフォント設定を使えるアプリケーションを使う必要があります。

	CarbonEmacsとiTermならそれができるということですね。CodingFontTobi 16pt + モトヤシーダ(EmacsではOsaka) 11pt という設定にしてます。

	これでやっと OSX でも満足行く表示になりました。やっぱりこっちのほうがいいですなー。

	<a href="http://farm4.static.flickr.com/3328/3214539860_d7f5df4081_o.png" title="CodingFontTobi by typester, on Flickr"><img src="http://farm4.static.flickr.com/3328/3214539860_f7b3899110.jpg" width="500" height="313" alt="CodingFontTobi" /></a>

	<del>スクリーンショットを貼ろうと思ったんですが、なぜかスクリーンショットとるとアンチエイリアスがかかってしまうという罠がありあきらめました。これはなんなんだろう。。</del> <ins>Flickrでリサイズされてるだけだった。。</ins>

	また、他にもいいビットマップフォントをご存じの方いらっしゃいましたら是非とも教えてください！！

2009-01-20 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 16:36 二重connect [kamaitachi]:
	> [Kamaitachi入門（その４） - ダウンロードたけし（寅年）の日記](http://d.hatena.ne.jp/download_takeshi/20090117/1232201013)
	>
	> なのでconnectについてはKamaitachi側ではon\_connectとon\_invoke\_connectの2つをdispatchしていることになりますね。なんで２重に待ち構えるような構成にしてるんだろ？なにか意味があるような気がしますが、よくわかりません。

	`on_connect` はTCP接続確立時のハンドラ、`on_invoke_connect` は他の関数呼び出しと同様 Flash Player から connect 関数がよばれたときに呼ばれるハンドラです。

	RTMP は正直なんでこうなんだろーっていう理解不能な仕様が結構ありますのでサーバー実装だけみてると結構混乱すると思います。

	クライアント側も参照すると多少マシになります。

	いまは Flex SDK を使用すればフリーで as3 な swf をつくることができますので、RTMP 実装で学ぶ as3 入門というのはどうでしょうか。

	あ、[wonderfl](http://wonderfl.kayac.com/) もオススメですよ。

	* 16:06 CarbonEmacs + CodingFontTobi [emacs]:
	フォント設定もさらしておく。

	`~/.emacs.d/conf/carbon-emacs-05font.el

	    ;; i <3 bitmap font
	    (setq mac-allow-anti-aliasing nil)
	    
	    (create-fontset-from-fontset-spec
	     (concat
	      "-*-fixed-medium-r-normal--10-*-*-*-*-*-fontset-tobi"
	      ",ascii:-apple-codingfonttobi-medium-r-normal--16-120-72-72-m-120-*-*"
	      ",japanese-jisx0208:-apple-osaka-*"
	      ",katakana-jisx0201:-apple-osaka-*"))
	    
	    (create-fontset-from-fontset-spec
	     (concat
	      "-*-fixed-medium-r-normal--10-*-*-*-*-*-fontset-proggy"
	      ",ascii:-apple-proggycleanttsz-medium-r-normal--16-120-72-72-m-120-*-*"
	      ",japanese-jisx0208:-apple-osaka-*"
	      ",katakana-jisx0201:-apple-osaka-*"))
	    
	    (set-default-font "fontset-tobi")

	CodingFontTobi と Proggy のフォントセットを定義して気分で使い分けてる。

	デフォルトの Monaco+ヒラギノ も捨てがたく、たまに使いたくなったりするのでアンチエイリアスは

	    ;; アンチエイリアストグル
	    (defun my-mac-toggle-antialias ()
	      (interactive)
	      (if mac-allow-anti-aliasing
	          (setq mac-allow-anti-aliasing nil)
	        (setq mac-allow-anti-aliasing t)))

	こんなんでトグルできるようにしてる。この関数よびだしたあと画面が更新されると反映される。

	こういう環境依存のコードは今までは自前で環境見てロードしていたのだけど、[id:IMAKADO](http://d.hatena.ne.jp/IMAKADO) さんが公開してくれた [init-loader](http://svn.coderepos.org/share/lang/elisp/init-loader/init-loader.el) 使うと `carbon-emacs-*` とか言うファイルは CarbonEmacs の時だけ読む、とかできて便利。

	* 11:28 CarbonEmacsを使ってみる [emacs]:
	先週 [id:IMAKADO](http://d.hatena.ne.jp/IMAKADO) さんにあって、`emacs` 使いこなしててかっこよかったので影響されて僕も GUI な emacs が使いたくなったのでこの間書いた [Cocoa Emacs](http://unknownplace.org/memo/2008/11/06#e001) を使い出そうとしたんだけど、なんかどうがんばってもバッファを縦分割したときのボーダーを表示させることが出来ないという理由であきらめた。(フリンジは消したかった)

	なので CarbonEmacs を入れた。こっちはなんかボーダー出た。

	Cocoa Emacs なら multitty で端末内でファイル開いちゃえばいいんだけど、CarbonEmacs にはそれがないので普通に emacsclient で開き、閉じたら端末にフォーカスが戻るという設定を書いた。

	具体的には emacsclient で開いたときは勝手に CarbonEmacs がアクティブになるので、CarbonEmacs 側で閉じたときに端末に戻るように、

	    ;; emacsclientで開いた端末をアクティブにする。とりあえずiTerm決めうち
	    (add-hook 'server-done-hook
	              (lambda ()
	                (do-applescript "tell application \"iTerm\"
	                                    activate
	                                 end")))

	とするだけでOKだった。

2009-01-16 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 15:38 TypePad Connect の使い方がわからない [life]:
	TypePad Connect よさそうなので使ってみようと思ったんだけど、発行されたコード貼り付けてもなんにも出ない。

	Firebug でみると embed.js というのが 500 になってるっぽい。なんか手順ちがうのかな、それともサービス側の問題なのかなぁ。

	とりあえず、このサイトの既存のコメント欄の下にコード貼り付けてみてあるんだけど、なんにも出てない状況。わかる人教えて！

	#### 追記

	なんかおかしかったっぽい。直してもらった！

2009-01-13 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 14:37 最後のタブ閉じたとき about:blank を開く設定 [firefox]:
	OSX にしてから Firefox で最後のタブを閉じたときにウィンドウが消えてしまうのが嫌だなーとおもっていたけど、いまふと about:config を close で検索してみたりしたら

	    browser.tabs.closeWindowWithLastTab

	という項目が見つかったので、試しにそれをトグルしてあげたら希望通りの動作になった。

	これがしたかった。満足。

2009-01-09 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 15:34 outputzのdailyランクをgrowl通知するスクリプト [outputz]:
	emacs と irssi で入力した文字数を [outputz](http://outputz.com/) に投稿してるわけですが、outputz での順位を定期的に通知されたらやる気が出るんじゃないかなーとおもってoutputzでの順位をgrowl通知するスクリプトを書いてみた。

	> [outputz-growl.pl](http://gist.github.com/45043)

	こんな感じになる。

	<a href="http://www.flickr.com/photos/typester/3181035287/" title="outputz-growl by typester, on Flickr"><img src="http://farm4.static.flickr.com/3437/3181035287_9746167a4c_o.png" width="314" height="116" alt="outputz-growl" /></a>

	あとはこれを CRON かなんかで回せば OK。

2009-01-08 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 13:19 git-svnなgitレポジトリをcloneするの法 [git]:
	`git svn clone` は svn ログをたどるためでかい svn レポジトリになるととんでもなく時間がかかります。

	なのですでに clone 済みの git レポジトリから clone したら簡単じゃんと思って素直に clone してみたのだけど、そのままじゃうまく clone 出来なかったのでメモ。

	こんな感じでやればおk

	    # とりあえずレポジトリ作る
	    mkdir test
	    cd test
	    git init
	    
	    # clone
	    git remote add origin http://co-workers-pc/dev/project/.git
	    git config --add remote.origin.fetch '+refs/remotes/*:refs/remotes/*'
	    git fetch
	    git reset --hard trunk
	    
	    # git svn の remote を再設定
	    git svn init -s http://yourrepos/svn/project/
	    git svn rebase

	なんだか手間かかるけど `git svn clone` するのと比べると圧倒的に速い。

	いきなり clone しないで `remote add` して config を追加してあげたあと fetch するのがポイントか。

	master を trunk として使わないなら `git reset` はいらんかな。あと、`svn init` で `-s` してないときはそもそも trunk ブランチとかないので注意。

2009-01-06 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 01:51 あけましておめでとうございます！ [life]:
	年賀状代わりにコチラをどうぞ。

	> [お年賀プロジェクト2009 - 面白法人カヤック -](http://nenga2009.kayac.com/)

	僕らのチームのは powered by [NanoA](http://kazuho.31tools.com/nanoa/) です。さくっと完成させることが出来ました。kazuho++

2008-12-31 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 16:25 今年も終わりますね [life]:
	来年もよろしくお願いします。

	まとめエントリを書こうと思ったけど、実家のネットが遅すぎて(ISDN!)書く気になれないのでこれにて。ここはssh経由のemacsで書いているのです。

	今年末は原点に返ってblosxomをいじっております。

2008-12-24 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 15:27 lighttpd 1.4.20 は CGI の STDERR をエラーログに出してくれない。 [lighttpd]:
	のでちょっとはまった。なんなんだ。

	コードを見るとなぜか `/dev/null` にリダイレクトしちゃっている。

	ログを追うと、

	> [http://redmine.lighttpd.net/repositories/revision/lighttpd/2163](http://redmine.lighttpd.net/repositories/revision/lighttpd/2163)

	この変更によるものらしいが、正直何してるのかよくわからない。

	とりあえず STDERR が闇に葬られるとか不便すぎるので

	    diff --git a/src/mod_cgi.c b/src/mod_cgi.c
	    index 6f27f8b..18f88c2 100644
	    --- a/src/mod_cgi.c
	    +++ b/src/mod_cgi.c
	    @@ -987,8 +987,6 @@ static int cgi_create_env(server *srv, connection *con, plugin_data *p, buffer *
	       	  	 *c = '/';
	     		    }
	     
	    -		openDevNull(STDERR_FILENO);
	    -
	    		/* we don't need the client socket */
	     		   for (i = 3; i < 256; i++) {
	     		       	  if (i != srv->errorlog_fd) close(i);

	などとしておいた。1.4.x 系では今のところ最新の 1.4.20 だけがこうなってる。

	チケット作っとこうとしたらもうあった。

	> [http://redmine.lighttpd.net/issues/show/1836](http://redmine.lighttpd.net/issues/show/1836)

	次のバージョンでは直ると良いね。

2008-12-18 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 11:00  [git]:
	> [multiverse.elで現在のファイルのスナップショットを取る - '(rubikitch wanna be (a . lisper))](http://d.hatena.ne.jp/rubikitch/20081218/multiverse)
	>
	> プログラミングしているとき、実験的修正をしたくなることがあるだろう。もし実験が失敗したときに元に戻す...なんてことは日常茶飯事だ。
	> 
	> RCS、CVS、Subversion、Gitなどのバージョン管理システムはまさしくそれをやっているのだが、未完成のままではコミットはできない。たとえば、複数の（細かな）実装が思い付いたとき、どっちかひとつをコミットしたいなんて場合とか。

	そこにgitを一緒に入れるのはなぜなんだ？

	それをやるためにgitみたいなdistributedなバージョン管理システムがあると言っても過言でないくらいだと思うのだが。

2008-12-10 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:25 xcode でも toolchain でもビルドできる iPhone アプリ構成を作る手順メモ [iphone]:

	まず、xcode で新規プロジェクト作成。Window-Based Application が余計なもの作らないのでおすすめ。

	    .
	    |____Classes
	    | |____my_test_projectAppDelegate.h
	    | |____my_test_projectAppDelegate.m
	    |____Info.plist
	    |____main.m
	    |____MainWindow.xib
	    |____my_test_project.xcodeproj
	    | |____project.pbxproj
	    | |____typester.mode1v3
	    | |____typester.pbxuser
	    |____my_test_project_Prefix.pch

	こんなファイル構成ができあがる。

	まず、nib ファイルは toolchain 環境では扱えないので MainWindow.xib は削除。Info.plist からも

	    <key>NSMainNibFile</key>
	    <string>MainWindow</string>

	って部分を削除。nib ファイルを使わないということはすなわち xcode のインターフェースビルダーが使えないということだけどまぁしょうがない。

	つぎ、プリコンパイルヘッダ (`my_test_project_Prefix.pch`) も僕はいらないので削除。また、project.pbxprojに

	    GCC_PRECOMPILE_PREFIX_HEADER = YES;
	    GCC_PREFIX_HEADER = my_test_project_Prefix.pch;

	という部分がDebugとReleaseの二カ所あると思うのでそこを

	    GCC_PRECOMPILE_PREFIX_HEADER = NO;

	に変更。

	Classes ってディレクトリ名が気に入らないので、src に変更。xcode側では読み込み直す。

	アイコンとかリソースファイル用には resources ってディレクトリを作っておく。

	最後に toolchain 用の Makefile をおく。

	この時点でファイル構成は

	    .
	    |____Info.plist
	    |____my_test_project.xcodeproj
	    | |____project.pbxproj
	    | |____typester.mode1v3
	    | |____typester.pbxuser
	    |____main.m
	    |____Makefile
	    |____resources
	    |____src
	    | |____my_test_projectAppDelegate.h
	    | |____my_test_projectAppDelegate.m

	こんな感じ。

	これでどっちでもビルドできるようなアプリを書くことが可能。

	めんどくさいので自動化したい。

	#### 追記＠2008-12-11

	`project.pbxproj` を直いじりすると、その後 xcode から実機デバッグしようとするとUUIDがちげーよとかいう警告がでるようになるっぽい。(実際にデバッグは出来るのけど)

	直いじりするかわりに xcode のプロジェクト設定で `GCC_PRECOMPILE_PREFIX_HEADE` とかを編集すれば大丈夫。

	* 14:43 KillAppleをCydiaからインストールできるようにしてみた [iphone]:
	この間作った [KillApple](http://unknownplace.org/memo/2008/10/08#e003) という iPhone のメモリに残ったビルドインアプリケーションを殺すアプリケーションですが、いろんなところでデモするとなかなか好評で、使いたいとおっしゃってくださる方もいたので、Cydiaからインストールできるようにしてみました。

	Cydia のソースに

	    http://apt.unknownplace.org/iphone/

	を追加すると、検索に KillApple が引っかかるようになると思いますのでそのままそれをインストールすればOKです。

	今後作ったほかのアプリもここで公開していこうかなと思っております。

2008-12-09 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:53 URLベースでのACLをkamaitachiにもつけた [perl] [kamaitachi]:
	> [Wowza Media ServerでSWFVerification(っぽいこと)をする方法 - blog.katsuma.tv](http://blog.katsuma.tv/2008/12/swf_verification_on_wowza.html)

	それなら kamaitachi でもできるよ。ってことで使いやすいようにサービス化。

	AutoConnect の代わりに、AutoConnectACL というサービスを使うと URL ベースでのアクセスコントロールをつけることができるようにしてみた。

	[echo サンプル](http://github.com/typester/kamaitachi/tree/master/example/lib/Service/Echo.pm)の例なら、

	    package Service::Echo;
	    use Moose;
	     
	    extends 'Kamaitachi::Service';
	     
	    with 'Kamaitachi::Service::AutoConnectACL';

	    sub allow_pages {
	        'http://www.unknownplace.org/*',
	        'http://unknownplace.org/*',
	    }
        
	    sub allow_swfs { 'http://unknownplace.org/*' }
	    
	    sub on_invoke_echo {
	        my ($self, $session, $req) = @_;
	        $req->response(@{ $req->args });
	    }

	のような感じで、`AutoConnectACL` を `with` して `allow_pages` と `allow_swfs` を定義すればそこに書かれたURLにマッチするアクセスだけを許可することが出来る。

	いちおう Flash の流儀にあわせてなんか glob マッチ方式にしてるんだけど、使いにくいので正規表現でもいけるようにしてある。

	    sub allow_pages { qr{^https?://(www\.)?unknownplace\.org} }

	とか Regexp リファレンスつかえばおｋ。

	`allow_pages` が swf の貼り付けてあるページの URL、`allow_swfs `が swf 自体の URL にマッチする感じ。

2008-12-08 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 12:16 kitasando.as #2 にいってきた [perl]:
	土曜に FMS 勉強会という名目で行われた kitasando.as で kamaitachi を紹介してきました。

	スライド：

	> [http://svn.coderepos.org/share/docs/typester/kitasandoas-2/start.html](http://svn.coderepos.org/share/docs/typester/kitasandoas-2/start.html)

	本家 FMS の話と、Wowza の話がおもしろかった。Wowza完成度高杉だろ。

	SWFVerification とか機能自体しらなかった。どうやるんだろうなぁ。connect時swfのURLは送られてくるけど、それだけじゃ無理だし。

2008-12-05 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:35 adlがうごかなくてはまる [air] [as3]:
	kamaitachi のサンプルアプリで Air アプリをつくろうとおもってつくろうとしたんだけど、`adl` がうまくうごかなくてはまった。

	環境は OSX 10.5.5 + Air1.5 + Flex SDK 3.2.0.3958。

	普通に実行すると

	    $ adl HelloWorld-app.xml
	    unknown error
	    Error: Error #2014: Feature is not available at this time.
	            at runtime::SecurityManager$/initAppDataDirRoot()
	            at runtime::SecurityManager$/GetPersistentStorageDirectoryName()
	            at runtime::AppRunner/run()
	            at global/runtime::ADLEntry()

	こんなんなる。別にコードが悪い訳じゃなくて、adtでパッケージ作るとそれは起動できる。

	でなんかよく見るとディレクトリ関係のとこでこけてるからためしに sudo でうごかしてやったらうごいた。。なんやねん。

	どっかのパーミッションかえてやればいいんだろうけどそれがどこだかわからんなぁ。

2008-12-02 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 18:53 "kamaitachi" perl flash media server [perl]:
	IRCチャンネルできました。

	> \#kamaitachi @ chat.freenode.net

	[kamaitachi](http://github.com/typester/kamaitachi) に興味なくても RTMP のパケットが云々という話とか興味ある人は入るとおもしろいかも。

2008-12-01 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 09:12 remedie & HE hackathon にいってきた [perl]:
	土曜にはじめてチェックアウトして翌日ハッカソンに挑むという無謀さでしたが、いやいやなかなか、おもしろかったです。

	remedieはつかってみるとかなり面白いですね。対応しているURLを含んでいれば別にメディアRSSとかじゃなくても追加できるので、おもむろに自分の del.icio.us などのページを食わせてあげても、YouTubeやニコニコ動画などをブックマークしてたらそれがリストにでてくる。

	気になる人のブックマークとかは突っ込んでおくだけですぐにその人がブクマったものをremedieで見られるという訳ですね。

	で、ハッカソンでなにをしてたかっていうことがいいたいんですが、刺されたくないのでやめておきます。コミットログとかから察してください。

	作ったもの、あとでコミっときます。

2008-11-29 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 10:49 Yokohama Perl Mongersテクニカルトーク#3にいってきた。 [perl]:
	ライブコーディングをしてきました。シンプルなwikiです。

	ソースコードはこちら。

	> [http://github.com/typester/yiki](http://github.com/typester/yiki)

	会場で書いたものに.gitignoreファイルを追加(coしたときにディレクトリがそろってないとうまく動かないので)しただけなものとなっています。

	コード書くのに必死だったのであんまり解説ができなかったのですが、まず最初に Yiki.pm というところに wiki のページ編集の機能をモジュールとして作成し、それをあとから作った Yiki::Web という Catalyst アプリから使うというのがポイントでした。

	単体モジュールとして wiki の機能を実装することでテストが書きやすいので安心だとか、ほかのアプリからも使えるだとかいろいろな利点が生まれます。

	今回のコーディングの流れは

	 1. `01_module.t` に SYNOPSIS を書いてみる。(自分がどんなふうにアプリを使いたいかデザインする)
	 2. その SYNOPSIS をもとにテストをおこす
	 3. Yiki.pmを実装
	 4. テストを走らせ正しく動作しているか確認
	 5. 3,4を繰り返す
	 6. それを Yiki::Web から使用する

	となっています。

2008-11-28 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 09:17 Shibuya Perl Mongersテクニカルトーク#10にいってきた。 [perl]:
	[kamaitachi](http://github.com/typester/kamaitachi) のデモをしてきました。

	スライド：

	> [kamaitachi - perl flash media server](http://svn.coderepos.org/share/docs/typester/shibuyapm-10/start.html)

	デモ使ったサーバーサイドとクライアントサイドのソースコードはこの辺にアップしました：

	> [example/shibuya.pm](http://github.com/typester/kamaitachi/tree/master/example/shibuya.pm)

	動かし方は

	    git clone git://github.com/typester/kamaitachi.git

	してきて、`example/shibuya.pm` で `perl server.pl` するとサーバーが立ち上がります。

	そのあと、`example/client` 以下にある swf ファイルをブラウザで開けばローカルでデモが動かせます。

	asソースをみてもらえばわかりますが、接続先が localhost 決めうちになっているため、それ以外のところで動かす場合は swf を作り直す必要があります。

	フリーで公開されている flex sdk をつかえば一応誰でもコンパイルできます。

	    mxmlc chat.mxml

	などとすればOK。

	というか本当は swf の URL から接続先のホスト名を自動的に設定したかったのだけど、mxml内でインクルードしてるasで、Stageオブジェクトを取得する方法がわからなかったのであきらめた。もしこの方法がわかったらコードをアップグレードします。

	というわけで、サーバー・クライアント両方のサンプルをやっと作れたので、これで一応誰でも試せるところまではきたかと。

	使ってみて、いろいろフィードバックいただけたら幸いです。

2008-11-26 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:10 HECon1にいってきた [perl]:
	カヤックサイトの裏側ではじつは `HTTP::Engine` が使われてるよ、っていう話をしてきました。

	id:IMAKADO さんに会えた。今日は懇親会に参加しないのであんまりはなせなかったのが残念。

	実は anything とか perl-completion とかいれてみたものの、あんまり使い方がわからなくて、第三期vimに移ろうかな期だったりしてた状況だったので、もう少しまじめに使ってみようかなと思ったりした。

	anything はまぁつかってるけど、実際のところ設定よくわからんし、下手に設定するとめっちゃ重くなるし、よくわかっていない。

	* 16:16 テスト [life]:
	終了。

2008-11-21 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:00 irssiからOutputzに文字数を投げる [web] [irssi]:

	> [EmacsからOutputzに文字数を投げる - antipop](http://d.hatena.ne.jp/antipop/20081120/1227180641)

	を見て、早速インストールして使ってみたら激しくおもしろい！

	irssiでもやりたくなったので、irssiで発言した文字数をOutputzに投げるプラグインを書いた。

	> [http://github.com/typester/irssi-plugins/tree/master/outputz.pl](http://github.com/typester/irssi-plugins/tree/master/outputz.pl)

	`~/.irssi/scripts` にファイルをおいて、irssi内で

	    /run outputz.pl

	して

	    /set outputz_key あなたの復活の呪文
	    /set outputz_uri 適当なURI

	すると設定完了で、あとは自動で発言数が投稿されます。

	<del>`outputz_uri` に `%s` をいれるとその部分はIRCのチャンネル名に置換されます。</del> `outputz_uri` は `URI::Template` 形式で指定できるようにしました。

	デフォルトは `irc://{server}:{port}/{channel}` です。

	つかえる変数は

	 * server: サーバーアドレス
	 * port: サーバーポート番号
	 * channel: 発言したチャンネル名
	 * server_tag: irssiでのサーバーのユニークタグ
	 * nick: そのサーバーでのあなたのニックネーム

	となっております。

	こないだ作った `PoCo::Client::HTTPDeferred` つかってるのでそのサンプルとしてもいいとおもいます。

	しかし、emacsよりirssiの方が文字数いってそうで集計を見るのが怖いです。。。

2008-11-14 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:40 カヤック本、2冊目 [kayac] [book]:
	2冊目が出たようです。興味がある人はぜひ。

	<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4833418932/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51pqEE1-%2B0L._SL160_.jpg" alt="面白法人カヤック会社案内" style="border: none;" /></a></div><div class="amazlet-info" style="float:left;margin-left:15px;line-height:120%"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4833418932/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">面白法人カヤック会社案内</a><div class="amazlet-powered-date" style="font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%">posted with <a href="http://www.amazlet.com/browse/ASIN/4833418932/unknownplace-22/ref=nosim/" title="面白法人カヤック会社案内" target="_blank">amazlet</a> at 08.11.14</div></div><div class="amazlet-detail">柳澤大輔 <br />プレジデント社 <br />売り上げランキング: 261<br /></div><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4833418932/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jp で詳細を見る</a></div></div><div class="amazlet-footer" style="clear: left"></div></div>

	ビジネス書ですよ。

	代表のコメントはこちら：

	> [121：「あなたは会社を愛していますか？」：柳澤大輔「面白法人カヤックのいきかた」](http://pc.nikkeibp.co.jp/article/column/20081106/1009470/)

	ついでに1冊目もおいておきますね。

	<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4396111177/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51TQ3HWntvL._SL160_.jpg" alt="この「社則」、効果あり。 (祥伝社新書 117)" style="border: none;" /></a></div><div class="amazlet-info" style="float:left;margin-left:15px;line-height:120%"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4396111177/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">この「社則」、効果あり。 (祥伝社新書 117)</a><div class="amazlet-powered-date" style="font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%">posted with <a href="http://www.amazlet.com/browse/ASIN/4396111177/unknownplace-22/ref=nosim/" title="この「社則」、効果あり。 (祥伝社新書 117)" target="_blank">amazlet</a> at 08.11.14</div></div><div class="amazlet-detail">柳澤 大輔 <br />祥伝社 <br />売り上げランキング: 1347<br /></div><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4396111177/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jp で詳細を見る</a></div></div><div class="amazlet-footer" style="clear: left"></div></div>

2008-11-13 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:04 MochiKit的にPoCo::Client::HTTPをつかえるラッパーを書いてみた。 [perl] [poe]:
	POE は結構好きなんだけど、使ってるにつれていろいろ不満が出てくる。

	Client::HTTP もその一つで、レスポンスを受け取るコールバックに CodeRef を指定できないくていちいちステートを作らないといけないのが嫌なので、こんなのを作ってみました。

	> [POE::Component::Client::HTTPDeferred](http://github.com/typester/poco-client-httpdeferred-perl)

	MochiKit のインタフェースを参考にしてます。

	こんな感じで使う。

	    use POE qw/Component::Client::HTTPDeferred/;
	    use HTTP::Request::Common;
	    
	    POE::Session->create(
	        inline_states => {
	            _start => sub {
	                my $ua = POE::Component::Client::HTTPDeferred->new;
	                my $d  = $ua->request( GET 'http://unknownplace.org/memo/' );
	    		    
	                $d->addBoth(sub {
	                    my $res = shift;
	    		    
	                    if ($res->is_success) {
	                        print $res->as_string;
	                    }
	                    else {
	                        warn $res->status_line;
	                    }
	    		    
	                    $ua->shutdown;
	                });
	            },
	        },
	    );
	    POE::Kernel->run;

	js やってる人にはちょっと見慣れた感じじゃない？

	これの Deferred 自体は全然機能足りてないけど、素で PoCo::C::HTTP つかうのと比べるとずいぶん楽になる。DeferredListもほしいな。

	* 10:40 ぼーっとしてるな [life]:

	 * いい天気だなーってゆっくり歩いてたら遅刻しそうになってダッシュ
	 * キウイスムージー買いにいったらマンゴーとかナタデココとかのスムージーはあるのにキウイだけ自販機から消えている
	 * しょうがないので梅こんぶ茶でも飲むかとおもってシンクに行くも手が勝手に珈琲フィルターとかをセットしてしまったので珈琲つくらざるをえなくなる
	 * しょうがないので珈琲飲む (イマココ)

2008-11-10 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 15:49 貶し甲斐のある男 [life]:
	昼飯時に京極夏彦の狂骨の夢の続きを読んでいたんだけど、そこに

	> 京極堂は実に冷たくそう云った。木場はどうも常日頃この古本屋やあの探偵の、そこの小説家に対する態度は冷たすぎると思っている。しかしそう思っている癖に口を開けば小説家を罵倒している自分にも善く気がつくのだ。どうやら関口とはそう云う男なのである。褒め甲斐はないが貶し甲斐はある。

	という一節があった。

	なるほど、まさに xcezx のことである。

2008-11-06 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 13:58 emacs23をつかってみた [osx] [emacs]:
	昨日のエントリで CarbonEmacs を使えばいいのかもと思ってちょっとためしてみようと思ったのだけど、どうせなら MultiTTY 使いたいなーなどという気持ちが出てきてしまった。

	それで emacs23 ベースな CarbonEmacs 的なのがないかと探してみたら、いまの CVS の emacs は普通に Emacs.app を作ることができるみたい。

	    cvs -z3 -d:pserver:anonymous@cvs.savannah.gnu.org:/sources/emacs co emacs

	とかで co してきて

	    ./configure --with-ns
	    make
	    make install

	で nextstep ディレクトリに Emacs.app ができている。

	CLI で起動したい場合は

	    Emacs.app/Contents/MacOS/Emacs -nw

	でおｋ。emacsclient は

	    Emacs.app/Content/MacOS/bin/emacsclient

	にある。etags とかもここにある。

	とりあえず multitty をためしてみるために Emacs.app と CLI (-nw) と両方立ち上げて

	    emacsclient -t /path/to/file

	としてみたところ、ちゃんとどちらの emacs でも同じファイルを開き、編集内容も共有できた。

	これで徐々に GUI な emacs に移行できるかなー。

2008-11-05 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 14:54 iTermでもremap.app_term_commandL2optionL [osx] [iterm]:
	[KeyRemap4MacBook](http://www.pqrs.org/tekezo/macosx/keyremap4macbook/index.html.ja) に `remap.app_term_commandL2optionL` という設定があって、これを使うと Terminal.app でのみ<del>左コマンドキーと左オプションキーを入れ替える</del><ins>左コマンドキーを左オプションキーにする</ins>ことができる。

	これを iTerm でも使いたかったので設定を追加しようと思ってソースを見てたら実はこのオプションは iTerm でも効くようにつくられているのだが、そのアプリケーション名の指定が間違っているだけだということがわかった。

	    diff --git a/src/core/server/server.cpp b/src/core/server/server.cpp
	    index d4695fe..40d1715 100644
	    --- a/src/core/server/server.cpp
	    +++ b/src/core/server/server.cpp
	    @@ -206,7 +206,7 @@ KeyRemap4MacBook_server::Server::do_ActiveApplicationInfo(KeyRemap4MacBook_bridg
	         reply->is_vi = true;
	       }
	       if (strcmp(applicationName, "com.apple.Terminal") == 0 ||
	    -      strcmp(applicationName, "iTerm") == 0) {
	    +      strcmp(applicationName, "net.sourceforge.iTerm") == 0) {
	         reply->is_terminal = true;
	       }
	       if (strcmp(applicationName, "com.vmware.fusion") == 0 ||

	としてやるだけで、iTerm でもつかえるようになった。めでたし。

	* 11:01 新卒者向け会社説明会 [life]:
	11/25 に弊社で新卒者向けの会社説明会をするようです。ここを読んでる人に対象者がいるかというとかなり微妙だと思いますが、興味がある方はぜひ申し込んでみてください。

	[申し込みページ](http://job.mynavi.jp/10/pc/NSSearchSeminarInfo.do?optNum=aLKcWC&corpId=83048)

	* 10:26 OSXターミナル事情 [osx]:
	新MacBookでの

	 1. Terminal.app
	   * 重さはmacminiで使うのと比べるとかなりましになってる(GPUのおかげ？)
	   * まぁでも若干重いよ
	   * 日本語入力中に画面が更新されると入力途中のが消える(これが地味にいたい)
	 2. iTerm
	   * ATOKでの変換の文節区切りがわからない
	   * 重い
	   * 入力ソースをUSにしないとmetaがつかえない
	 3. urxvt (X11)
	   * 軽い！
	   * 日本語入力が死ぬ

	SKKを使いこなせる人ならurxvtで決まりという感じな気がするが、僕は無理なので Terminal.app がメインになるかなぁ、という感じ。

	でも、日本語入力中に画面更新されると入力途中なのが消えちゃうってのがあるのでirssiとかはきつい。ただemacsつかわなければiTermの重さはそんなに気にならないのでemacsはTerminal.appをつかい、irssiはiTermをつかうという両刀で行こうかと思っているところ。

	ちなみにLimeChatも試してみたけどやっぱり使いにくいなぁ。irssiサイコウ！

	ここまで書いて、CarbonEmacsが使いこなせればiTermだけでいいんじゃないかという気もしているところ。

2008-10-29 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:58 GrowlのON/OFFをホットキーでできるようにする [osx] [growl] [applescript]:
	人に画面見せてるときなどに、恥ずかしい通知がくるとこまるのでホットキーで Growl 通知の ON/OFF を切り替えたいと思ったのだが、なぜかググっても見つからないので、ごにょごにょしてみた。

	    tell application "System Events"
	        set isRunning to (count of (every process whose name is "GrowlHelperApp")) > 0
	    end tell
	    
	    if isRunning then
	        tell application "GrowlHelperApp" to quit
	    else
	        tell application "GrowlHelperApp" to launch
	        
	        tell application "GrowlHelperApp"
	            set the allNotificationsList to {"Growl Toggler"}
	            register as application "Growl Toggler" all notifications allNotificationsList default notifications allNotificationsList
	            notify with name "Growl Toggler" title "Growl started" description "" application name "Growl Toggler"
	        end tell
	    end if

	Growl を起動状態をトグルする AppleScript。

	終了するときは何も言わずに Stop するが、スタートしたときは Growl 通知で Growl started と出るようにした。

	これをアプリケーションとして保存して、あとは QuickSilver の Trigger 機能とかでホットキーで起動できるようにすれば完了。

	一応これで動くのだが、AppleScript をアプリケーションにすると重いなぁ。。

	* 10:51 javascriptで誕生日から年齢 [javascript]:

	    (new Date(new Date() - new Date("1981/02/11"))).getFullYear() - 1970;

	こんなんでいいんだろか。

2008-10-08 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:06 build-inアプリケーションを殺すだけのアプリ [iphone]:
	> [http://github.com/typester/killapple-iphone](http://github.com/typester/killapple-iphone)

	作ってみた。絶対ありそうだけど。

	起動すると

	    killall -KILL MobilePhone MobileSafari MobileMail MobileMusicPlayer

	してすぐに終了するアプリです。

	これらの組み込みアプリケーションは終了したつもりでもメモリに残るので、起動したままにすると全体が重くなります。

	ホームボタン長押しすれば終了させられるのですがそれもめんどいので、いっぱつで皆殺しにできるものを作りました。

	SpringBoard を殺すアプリは KillSB というのがあるんだけど、SpringBoard は再起動に時間がかかるので最後の手段にしておきたい。ほとんどの場合そこまでしなくてもこっちで十分なはず。

	* 21:15 iPhone勝手アプリ用 Module::Setup フレーバー [iphone]:
	> [http://gist.github.com/15463](http://gist.github.com/15463)

	Yappo++

	* 17:33 iPhoneアプリをLinuxで作成するの法 [iphone] [linux]:
	iPhone Developer Program の申請が全然通らないので、勝手アプリの作成環境を整えてみた。

	Cydia でおなじみの saurik 氏がクロスコンパイル環境の作り方を以下のページに書いてくれていて、基本これに従えばOK。

	> [Upgrading the iPhone Toolchain - Jay Freeman (saurik)](http://www.saurik.com/id/4)

	すごいなー。saurik++

	簡単に環境作れるようにスクリプトにまとめた。ヘッダのコピーのとことかちょっと追加してある。

	> [http://gist.github.com/15487](http://gist.github.com/15487)

	<script type="text/javascript" src="http://gist.github.com/15487.js"></script>

	簡単に説明。

	iPhone のファームウェアのファイルを、ごにょごにょ(ググればすぐわかる)して展開して `~/tmp/iphone/iPhone2.1` にコピー。

	iPhone SDKをダウンロードしてきて展開して `MacOSX10.5.pkg` と `iPhoneSDKHeadersAndLibs.pkg` を `~/tmp/iphone/Developer` に展開。

	[http://www.opensource.apple.com/darwinsource/Current/](http://www.opensource.apple.com/darwinsource/Current/) から

	 * CF-*
	 * DiskArbitration-*
	 * IOCDStorageFamily-*
	 * IODVDStorageFamily-*
	 * IOGraphics-*
	 * IOHIDFamily-*
	 * IOKitUser-*
	 * IOStorageFamily-*
	 * Libc-*
	 * WebCore-*
	 * cctools-*
	 * configd-*
	 * launchd-*
	 * libsecurity\_authorization-*
	 * libsecurity\_cdsa\_client-*
	 * libsecurity\_cdsa\_utilities-*
	 * libsecurity\_cms-*
	 * libsecurity\_codesigning-*
	 * libsecurity\_cssm-*
	 * libsecurity\_keychain-*
	 * libsecurity\_mds-*
	 * libsecurity\_ssl-*
	 * libsecurity\_utilities-*
	 * libsecurityd-*
	 * xnu-*

	をダウンロードして `~/tmp/iphone/apple` に展開。(`*`はバージョン番号)

	で、あとは上のスクリプト実行すれば `~/app/toolchain` にクロスコンパイル環境がインストールされる。YATTA!

	ちなみに僕の Debian 環境ではこの作業をするために

	    flex bison gcc-multilib gobjc

	などのパッケージを追加でインストールする必要があった。

	これで iPhone 用のバイナリが作れるようになる。あとは ssh なり何なりで iPhone にファイルを転送すればOK。

	ただ iPhone は署名済みなアプリケーションしか実行できないのでそこもまた saurik 氏の記事

	> [Bypassing iPhone Code Signatures - Jay Freeman (saurik)](http://www.saurik.com/id/8)

	を参考にすれば回避できる。

2008-10-02 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:09 片手入力時のイライラ [iphone]:
	片手で文字入力してると親指の付け根部分が画面に触れちゃう問題だけど、

	<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001BXYBDC/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41obLVSESXL._SL160_.jpg" alt="iPhone 3G用シリコンジャケット(レッド) RT-P1C3/R" style="border: none;" /></a></div><div class="amazlet-info" style="float:left;margin-left:15px;line-height:120%"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001BXYBDC/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">iPhone 3G用シリコンジャケット(レッド) RT-P1C3/R</a><div class="amazlet-powered-date" style="font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%">posted with <a href="http://www.amazlet.com/browse/ASIN/B001BXYBDC/unknownplace-22/ref=nosim/" title="iPhone 3G用シリコンジャケット(レッド) RT-P1C3/R" target="_blank">amazlet</a> at 08.10.02</div></div><div class="amazlet-detail">レイ・アウト (2008-07-11)<br />売り上げランキング: 12098<br /></div><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001BXYBDC/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jp で詳細を見る</a></div></div><div class="amazlet-footer" style="clear: left"></div></div>

	これ買ったら、親指部分が少し浮くせいか、付け根部分が画面に触れなくなって快適になった！

	しかしこのカバー、摩擦係数が高いのでiPhoneをポケットに滑り込ませられなくなってちょっと不便。

2008-10-01 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:42 OSXの.dmgファイルをLinuxでごにょるの法 [linux] [osx]:
	[dmg2img](http://vu1tur.eu.org/tools/) というのがよくできてる。

	    dmg2img xcode.dmg xcode.img

	とすると `xcode.img` という `HFS+` のイメージファイルにしてくれる。

	で、

	    mount -t hfsplus -o loop xcode.img /mnt

	とかでマウントできる。

	その中のpkgファイルの中身を取り出すには

	    xar -xf /mnt/Packages/MacOSX10.5.pkg Payload
	    mv Payload Payload.gz
	    gunzip Payload.gz
	    mkdir dump
	    cd dump
	    cat ../Payload | cpio -i -d

	とかするとdumpディレクトリ以下にpkgが展開されるという感じ。

2008-09-22 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 09:40 iPhoneでも片手入力できる [iphone]:
	とか言ってるやつは死ねばいいと思う。

	僕はかなりがんばらないと無理だなー＞＜

	テンキー入力でバックスペース押そうとして親指のばすと親指の付け根付近が画面左下のほうを押してしまい入力モードが切り替わってしまってイライラするし、メールだと送信ボタンが上のほうにありすぎてそもそも片手だと押せないし。

	手が小さいのかなぁーともおもうけど、女性だったら僕より手の小さい人はいっぱいいるだろうしなー。

2008-09-16 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:30 複数起動Firefox [firefox]:
	昔、[wshでやるの](http://unknownplace.org/memo/2006/01/07#e004)かいてたけど、今のは

	    firefox.exe -no-remote -p profile2

	でいいらしい。せこんさんにおしえてもらった。

2008-09-08 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 10:22 レンズゲッツ [life]:
	[こないだ言ってたやつ](http://unknownplace.org/memo/2008/08/11#e001)がamazonで在庫で出したので即注文した！

	使いやすいズームがほしかったんだけどやっぱり使ってみたら想像通りよかった。満足。

	* 10:21 What are you coding? [life] [coderepos]:
	いいねいいね。

2008-09-05 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 15:54 livedoorクリップがなんかおかしい [life]:
	livedoorクリップのブクマみてたら

	> 関連ページ : [\[ unknownplace.org \]の新着ページ](http://clip.livedoor.com/site/unknownplace.org)

	ってのがあるんだけど、ここが開くとまったく新着じゃないという。

	なんだろ？

2008-09-04 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 18:11 TheSchwartzのテストが通らなくてあせった件 [perl] [theschwartz] [mysql]:
	TheSchwartzをインストールしようとしたらテストが通らなかった。

	テストが通らなくても、原因を見ると失敗していても影響ないような失敗をしていることが多いので気軽にソースをのぞいて見たところどうもそんな気楽な感じでもなくて普通にエラーっててどうしたもんかと思った。

	具体的には

	    $ prove -bv t/unique.t
	    t/unique....
	    1..12
	    ok 1 - made first feed major job
	    ok 2 - The object isa TheSchwartz::JobHandle
	    ok 3 - made another feed major job
	    ok 4 - no handle
	    ok 5 - made scratch major job
	    not ok 6 - The object isa TheSchwartz::JobHandle
	     
	    #   Failed test 'The object isa TheSchwartz::JobHandle'
	    #   at t/unique.t line 44.
	    #     The object isn't defined
	    ok 7 - made first feed major job
	    ok 8 - The object isa TheSchwartz::JobHandle
	    ok 9 - made another feed major job
	    ok 10 - no handle
	    ok 11 - made scratch major job
	    ok 12 - The object isa TheSchwartz::JobHandle
	    # Looks like you failed 1 test of 12.
	     Dubious, test returned 1 (wstat 256, 0x100)
	     Failed 1/12 subtests
	     
	    Test Summary Report
	    -------------------
	    t/unique (Wstat: 256 Tests: 12 Failed: 1)
	      Failed test:  6
	      Non-zero exit status: 1
	    Files=1, Tests=12,  0 wallclock secs ( 0.02 usr  0.01 sys +  0.14 cusr  0.03 csys =  0.20 CPU)
	    Result: FAIL

	こんな感じ。

	`$client->insert` が正しく JobHandle オブジェクトを返していないということは job を insert できてないってことなのでこれは問題である。

	しょうがないのでもう少し追うと、このテストは3回 insert をしていて2回目の insert はわざと失敗させている。TheSchwartz はこの失敗した場合にエラーコード 1062 だけを特別扱いし、それ以外の場合はそのDBが死んだと判断して `mark_as_dead` する。

	`Data::ObjectDriver::Driver::DBI` の `last_error` とか `Data::ObjectDriver::Driver::DBD::mysql` の `map_error_code` あたりを参照のこと。

	1062 というのはこの `DOD::DBD::mysql` にハードコードされていて、MySQL の `Duplicate entry '%s' for key %d` とかいうエラー。

	この辺の実装もどうかと思うが、ここで僕の環境では 1582 というエラーコードが帰ってきていたため、DBが `mark_as_dead` されてしまい、次のinsertも失敗するということになっていたようだ。

	ちなみにエラーコードは違ったけれども `Duplicate entry '1-major' for key 'funcid_2'` という期待するエラーが返ってきていた。

	この環境の MySQL はずいぶん前に入れた 5.1beta (5.1.18-beta) で、ほかの5.0なマシンではテストとおるので、5.1 になってエラーコード変わったのかなぁと思って[マニュアル](http://dev.mysql.com/doc/refman/5.1/en/error-messages-server.html)見てみたけど変わってないので、よくわからないけどとりあえずMySQLを最新(5.1rc)にしてみたらテストとおるようになってしまった。

	古い5.1は罠だということかなー。

2008-09-03 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 19:26 GRDでとった動画がうまくアップロードされない件 [life]:
	vimeoとflickrをためしたのだが、vimeoは30秒くらいの動画でも一瞬で終わってしまう動画になり、flickrにいたっては変換エラーになってしまう。

	ffmpegにかけてみても普通に変換できるんだけどなぁ。

	というわけでffmpegかましてからアップしたらいけた。ううむ。

	<object width="400" height="300"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=1657180&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=1657180&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="300"></embed></object><br /><a href="http://vimeo.com/1657180?pg=embed&amp;sec=1657180">Cable Car</a> from <a href="http://vimeo.com/typester?pg=embed&amp;sec=1657180">typester</a> on <a href="http://vimeo.com?pg=embed&amp;sec=1657180">Vimeo</a>.

	* 14:51 早起き [life]:
	しようとしてるせいで体調が悪い。そして眠い。

	意味あんのかこれ。

2008-09-02 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 18:07 メールのinboxを整理した [mail] [iphone]:
	inboxに40万件くらいメールためていたらiPhoneでinboxのメールを見ることが不可能だったので古いメールを全部Archiveディレクトリに移動させることにした。

	ちょっとぐぐると[これ](http://www.ducea.com/2006/11/25/cleanup-maildir-folders-archive-delete-old-mails/)とか[これ](http://www.sundru.net/bblog-stuff/?postid=8)とかみつかったがどうもうまくうごかんので

	    find ~/Maildir/cur/ -mtime +90 -exec mv {} ~/Maildir/.Archive/cur/ \;

	とかやっちゃった。

	そしたらiPhoneからメール見えるようになりました。まる。

	整理したとは言わんな。

2008-09-01 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 11:32 Yokohama.pm Tech Talk #2 の資料 [perl] [yokohama.pm]:
	yokohama.pm のあとそのままバカンスに突入したため遅くなりましたがさきほど資料を coderepos にアップしました。

	> [Perl RTMP implementation](http://svn.coderepos.org/share/docs/typester/yokohamapm-2/start.html)

	実装も一週間前でログが途絶えてますがgithub & codereposにアップしました。

	> * [http://github.com/typester/kamaitachi](http://github.com/typester/kamaitachi)
	> * [Git.CodeRepos/share/lang/perl/Kamaitachi.git](http://git.coderepos.org/cgi-bin/gitweb.cgi?p=share/lang/perl/Kamaitachi.git;a=summary)

	まだAPIをつくってないので実装が内部に直書きになっていますのでまぁ参考まで。

	この記事時点でのmasterブランチがwebcamからライブ動画を配信するもの、stream_mp3ブランチがmp3をオンデマンド配信する実装となってます。

2008-08-19 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 03:00 Data::AMFの速度 [perl]:
	> [AMF と Perl について - yoshizu@S2F](http://blog.s2factory.co.jp/yoshizu/2008/08/amf-perl.html)

	XS版を作ったとしてもMooseつかっているかぎりCGIでのパフォーマンスは望めないかなぁ。逆にmod_perlとかFastCGIであれば今のでもそんなに遅くはないはず。

	ただ、Remoting(RPC) 目的でAMFを使うのはそんなにメリットないんじゃないかなーとは思う。

2008-08-11 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 11:23 レンズ [life]:
	<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000HP9OF0/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51DA8G1QP7L._SL160_.jpg" alt="TAMRON SP AF 17-50mm F2.8 Di II LD Aspherical [IF] デジタル専用 &#945;システム用 A16M" style="border: none;" /></a></div><div class="amazlet-info" style="float:left;margin-left:15px;line-height:120%"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000HP9OF0/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">TAMRON SP AF 17-50mm F2.8 Di II LD Aspherical [IF] デジタル専用 &#945;システム用 A16M</a><div class="amazlet-powered-date" style="font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%">posted with <a href="http://www.amazlet.com/browse/ASIN/B000HP9OF0/unknownplace-22/ref=nosim/" title="TAMRON SP AF 17-50mm F2.8 Di II LD Aspherical [IF] デジタル専用 &#945;システム用 A16M" target="_blank">amazlet</a> at 08.08.11</div></div><div class="amazlet-detail">タムロン (2006-12-20)<br />売り上げランキング: 51980<br /></div><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000HP9OF0/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jp で詳細を見る</a></div></div><div class="amazlet-footer" style="clear: left"></div></div>

	これほしいんだけど、なんかどこも品切れだなぁ。ううむ。

2008-08-05 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 14:24 最も重要なことの一つ [life]:
	って日本語なんかおかしくない？

	* 14:23 サイレントバイオリンでバイオリンを始めてはだめだと思う [life]:
	> [ヴァイオリンを始める - cloned.log](http://d.hatena.ne.jp/cloned/20070513)
	> 
	> 会社の同僚からサイレントヴァイオリンを借りることができたので、のんきに練習しようと思う。

	サイレントバイオリンだとバイオリンを弾く上で最も重要なことの一つだとおもわれる「楽器を鳴らす」という感覚が見につかないんじゃないかなぁとおもう。サイレントバイオリンをさわったことがないので想像でしかないけど。

	って一年以上昔のエントリでしたね。。

	* 10:56 PREDATORS [life] [music]:
	<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001DLX4YO/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51dIthkrKpL._SL160_.jpg" alt="牙をみせろ" style="border: none;" /></a></div><div class="amazlet-info" style="float:left;margin-left:15px;line-height:120%"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001DLX4YO/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">牙をみせろ</a><div class="amazlet-powered-date" style="font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%">posted with <a href="http://www.amazlet.com/browse/ASIN/B001DLX4YO/unknownplace-22/ref=nosim/" title="牙をみせろ" target="_blank">amazlet</a> at 08.08.05</div></div><div class="amazlet-detail">THE PREDATORS <br />エイベックス・マーケティング (2008-10-15)<br />売り上げランキング: 469<br /></div><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001DLX4YO/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jp で詳細を見る</a></div></div><div class="amazlet-footer" style="clear: left"></div></div>

	一枚だけのネタバンドだと思いきや二枚目が！

2008-08-04 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 21:08 おめでとう、山本昌！ [life]:
	山本昌おめでとう！

	感動した！

2008-07-25 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 17:55 Moose版Twircつくた。 [perl]:
	lopnorさんにwassrにいないから不便だよハゲ、などということを言われたのでwassrアカウント作った。

	でwassrはIMに対応してるっぽいので、[この辺](http://unknownplace.org/memo/2007/04/15#e001)でつくったTwircというtwitter用のIM-Jabberゲートウェイアプリを改造してtwitter以外のサービスでも汎用的に使えるようにした。

	    channels:
	      - name:   '#twitter'
	        target: 'twitter@twitter.com'
	      - name:   '#wassr'
	        target: 'wassr-bot@wassr.jp'

	こんな感じでいろいろサービス増やせるようになった。まぁtwitterはいまIM死んでるから使えないけど。

	ついでにMoose化。ついでにgithubにうつした。

	> http://github.com/typester/twirc/tree/master

	* 14:08 MooseX::POE [perl]:
	ほめてる人が多いけど、僕はなんか微妙だなぁ。

	自分が POE になれてるからだと思うのけど、素で書いたほうがわかりやすい。

	Moose はつかうけど MooseX::POE はつかわない方向。

2008-07-23 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 15:39 master にコミットしちゃったのが微妙だけど branch に保存して残しておきたいとき [git]:
	> [master にコミットしちゃったのが微妙だけど branch に保存して残しておきたいとき - 8時40分が超えられない - subtech](http://subtech.g.hatena.ne.jp/secondlife/20080722/1216713334)
	>
	> これ便利だなー branch 切らずに master に直接いれちゃえいう時が良くありますね(ブランチ切れよ)。んであとから見直したら微妙だはずしたい、というとき。push してなければ
	>
	>     git branch bimyou_branch
	>     git reset --hard modositai_tokorono_sha1
	>
	> だけで master は元に戻るし、branch には残ってるしでばっちり。git おてがるー。(こまめにブランチは切りましょう)

	いいね！ git++

	ただ「**pushしてなければ**」っていうのを見逃してかわいそうなことになる人がいるかもしれないので強調しておく。push しちゃってたらやっちゃだめよ！

	* 15:38  [perl] [catalyst]:
	とりあえず `Test::WWW::Mechanize::Catalyst` は使わずに `Catalyst::Test` だけでがんばることにした。

	* 11:32 Perl 5.10 + Test::WWW::Mechanize::Catalyst [perl] [catalyst]:
	うごかんわけだが、みんなどうしてんの？

	5.10 の問題ではなくて、最新版の libwww-perl (5.10に付属)の問題という話だけど、5.8.x でも LWP あげたらおなじことになるのかなー。

2008-07-22 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 13:33 Firefoxタブ [firefox]:
	Firefox3、なんかいつのまにかすべてのウィンドウがタブで開くようになってしまっていた。

	ポップアップとかでサイズ指定してあるのとかはポップアップしてほしいのだけど、やり方忘れていてググった。

	    user_pref("browser.link.open_newwindow", 3);
	    user_pref("browser.link.open_newwindow.restriction", 3);

	たぶんこれでおｋ

	* 11:50 Web Designing 2008年08月号 [life]:
	忘れるところだった。

	<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001C40JWC/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/511HcD0JdNL._SL160_.jpg" alt="Web Designing (ウェブデザイニング) 2008年 08月号 [雑誌]" style="border: none;" /></a></div><div class="amazlet-info" style="float:left;margin-left:15px;line-height:120%"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001C40JWC/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">Web Designing (ウェブデザイニング) 2008年 08月号 [雑誌]</a><div class="amazlet-powered-date" style="font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%">posted with <a href="http://www.amazlet.com/browse/ASIN/B001C40JWC/unknownplace-22/ref=nosim/" title="Web Designing (ウェブデザイニング) 2008年 08月号 [雑誌]" target="_blank">amazlet</a> at 08.07.22</div></div><div class="amazlet-detail"><br />毎日コミュニケーションズ <br /></div><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001C40JWC/unknownplace-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jp で詳細を見る</a></div></div><div class="amazlet-footer" style="clear: left"></div></div>

	未来系Ajaxサンプル集というところの記事の一部を書かせていただきました！

	Ajaxといいつつも実際にはJS+Flashの記事となっております。

2008-07-17 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 18:12  [life]:
	会社の人が使ってるというOpenVPNというのもよさそうだなぁ。

	* 17:32 hamachiを使わない生活 [life] [p2p]:
	いつからつかってるかもう忘れちゃったんだけど、いつのころからか [hamachi](http://hamachi.cc/) っていうVPN的なソフトにかなり依存するようになってしまっていて、たまに hamachi のサーバーがメンテとかしてたりすると悲しいことになってしまう状況になっていたので、ずっと何とかしないとなーといけないと思っていた。

	で、ちょっとまえに [n2n](http://www.ntop.org/n2n/) という hamachi と同じようなことを実現できるオープンソースなソフトウェアを見つけていたので、今日の hamachi のメンテを機に使ってみた。

	イメージとしては、hamachi の中央サーバーを自分で立てられるようになった版。みたいなイメージでいいと思う。

	hamachi との使用感の違いとしては

	 * 自分でサーバーを立てられる
	 * hamachiでは自動的に割り当てられるIPを自分で決めなければいけない
	 * windowsバイナリは有料。svn見るとソースはあるっぽいけど。。。？
	 * サーバー(supernode)が機能不足。接続制限とかクライアントの一覧とかを出したい

	などなど。最後のは自分でハックしたいなー。

	windowsで使えないのは人によっては痛いかもしれない。僕はいらないけど。

	とりあえず Linux (debian amd64) と OSX (intel leopard) ではうまく動いてるようだ。

2008-07-04 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 15:09 ハーフサイズの写真のCD書き込みには対応しておりません [life]:
	いつも出してる安プリント屋でこんなようなことを言われた。

	ハーフサイズのカメラを使うのは久しぶりだったんだけど、同じ店で前まではやってくれてたんだけどなぁ。

	しょうがないので現像だけしてもらった。

	うーむ。フィルムスキャナ買うかなぁ。。世知辛い世の中になってきた。

2008-06-30 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 11:14 ちがった [life]:
	アップデートできないのはFiddlerのせいだったけど、Fiddlerおとしてても最初のダイアログは出るなぁ。

	チャットとか無視しまくっていて39件の新規イベントとかなってるのがためすぎとかそういうことはあるだろうか。ちょっと全部開いてみるか。

	* 10:50 わかった。 [life]:
	Fiddlerでグローバルフックしてる状態だと出るようだ。

	その状態だとSkypeアップデートも失敗する。あせる。。

	* 10:45 Skype [life]:
	> Format '%0:s' invalid or incompatible with argument.

	って言うダイアログがでまくるんだが、なんなんだろう。バージョンは 3.8.0.115

2008-06-24 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 13:14  [life]:
	かえってすぐホルモン食べに行って、いまタイ料理を食べに行った。

	満足満足。

	あとは餃子とビールが欲しい。

	* 09:54 帰国！ [life]:
	時差ぼけがひどい。

2008-06-19 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 19:30 irssi-proxy++ [irssi]:
	通常 IRC は自宅サーバー上の irssi でやってるのだが、イタリアの回線が細いため ssh が重くてイライラする。

	tiarra はずさなければよかったなぁと思ったが、irssi にも proxy 機能あった気がするなぁと思い直してそれを使ってみた。

	まず、

	    /load proxy

	して proxy モジュールをロード。

	するとパスワード設定されてないYO! とかいう警告が出るので

	    /set irssiproxy_password hogehoge

	などとしてパスワードを設定する。

	最後に

	    /set irssiproxy_ports freenode=16667 ircnet-ja=16668 skype=16669 local=16670

	とかすれば指定したポートで proxy が立ち上がる。

	あとはローカルのIRCクライアントからそこにつなぐだけ！ 快適快適。

2008-06-07 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 15:56 Ciao! [life]:
	I'm in Florence!

2008-06-05 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 14:11 ところで MooseX::Getopt で Pod::Usage 的なことをする方法がわからない [perl] [moose]:
	のだがどうすればいいんだろうか。

	* 14:09 App::Flight [perl]:
	昨日のは `App::Flight` にしますかね。

	FCGIネームスペースを騙るにはあまりにも僕の使い方にかたよりすぎているしな。

2008-06-04 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 13:51 flightというアプリを作ってみたのだがどうか [perl]:
	> [http://github.com/typester/flight/tree/master](http://github.com/typester/flight/tree/master)

	lighttpdを使用してFastCGIスクリプトのテスト(開発)サーバーを簡単に立てられるアプリです。

	    $ flight -p 3000 yourscript.fcgi

	とかすると `localhost:3000` でそのfcgiスクリプトが動くという感じ。

	catalystだったら

	    $ flight -p 3000 ./script/myapp_fastcgi.pl

	でOK。

	Catalyst用にはすでに専用のヘルパーを書いていて、lighttpdでテスト(開発)サーバーを立てられるようにしていたのだけどそれをもっと汎用的にした感じ。

	ネームスペースは `FCGI::Server::Lighttpd` とかしちゃってるのだけどどうだろう？ `App::Flight` とかのがいいのかなー。

	意見求む。

2008-06-03 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 00:01 Sansa Express がフリーズ [life]:
	一年半くらい使っていてはじめてフリーズした。

	USBスロットから抜いても表示がConnectedなままになって、もう一度さすと不明なデバイスとして認識されるようになってしまった。

	マニュアル落としてきてハードウェアリセットの方法を調べてみると

	> press and hold the **Select** button while pressing the **Volume Up (+)** buttons simultaneously.

	ってあったのでそれやったらなおった。。マニュアル++

2008-06-01 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 17:30 oh [web]:
	googleのfaviconかわっとる。

	* 16:39 西武ドーム！ [life]:
	今年初観戦は交流戦。はじめて西武ドームいった。

	<a href="http://www.flickr.com/photos/typester/2540874598/" title="ノリ by typester, on Flickr"><img src="http://farm3.static.flickr.com/2370/2540874598_1508f78df7.jpg" width="500" height="500" alt="ノリ" /></a>

	普通のドームと違って、野外球場に後付で屋根をのせた感じで外にいる感じがして気持ちいい！ いい球場だと思った。

	試合のほうははじめいきなり小田の守備妨害とかなんやかんやで憲伸がくずれて心配だったけど途中立ち直り、ウッズ+井端で華麗に逆転を決め快勝！

	交流戦って微妙な制度だよなとおもってたけど、観戦するのはたのしいな。

2008-05-30 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 18:03 freenodeなんか変わった [life]:
	nickservとかchanserv周り。

	systemlogみたらそれっぽい全体Noticeがきてた。

2008-05-29 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 17:28 PDF::FromImage [perl]:
	とか言うのを作った。exampleディレクトリにimages2pdf.plというのがあって、これつかうと

	    image2pdf.pl -o output.pdf *.png

	とかやることによりコマンドラインで渡した画像から一気にPDFのスライドが作れる。

	install_script するかまよったけどとりあえずしなかった。うかつにやるとおこられそうだしな。。

	* 14:21 メーラー [life]:
	mutt ユーザーだけど、人には Mew をすすめているという不思議。

	Mew は `~/Maildir` を直読みできないという一点のみが不満だ。(かならずMew専用のコピーを作るため直読みではない)

	* 13:32 memo memo [life]:
	ここはメモ用だったはずなんだけど最近はそうでもなくなってるな。

2008-05-22 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 15:17 YAPC::Asia 2008 Tokyo [perl] [yapc]:
	去年は参加できなかったため、2年ぶりのYAPCでした。

	僕のセッションの資料もアップしておきました。

	 * [FormValidator::Assets](http://svn.coderepos.org/share/docs/typester/formvalidator-assets/start.html)
	 * [Open Fastladder with Plagger](http://svn.coderepos.org/share/docs/typester/openfastladder-with-plagger/start.html)

	やっぱり参加するとグッとモチベーションがあがりますね。

	2年前うけた衝撃も大きかったですが、今年もいろいろな人からアイデアややる気をもらいました。

	ところでこの2年間でひとつ大きく変わったなぁと思うのは、perlハッカーの使っているPCの種類が変わったことです。

	2006年時には

	<a href="http://www.flickr.com/photos/nagayama/121922373/" title="Thinkpad大杉 by nagayama, on Flickr"><img src="http://farm1.static.flickr.com/41/121922373_f28de88572.jpg" width="500" height="333" alt="Thinkpad大杉" /></a>

	こんな感じで Thinkpad が幅をきかせまくっていたと思うのですが、今回の hachathon で Thinkpad を使っていたのは僕と mizzy さんだけ！

	今年はみんな Macbook。

	<a href="http://www.flickr.com/photos/typester/2508074878/" title="R0010880.JPG by typester, on Flickr"><img src="http://farm4.static.flickr.com/3198/2508074878_e0ab3cf8ce.jpg" width="500" height="375" alt="R0010880.JPG" /></a>

	Hackathon きてた人の9割くらいは macbook だったんじゃなかろうか。。

2008-05-16 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 11:48 心配かけてたようなので書いておきますね！ [life]:

	 * yusukebeと終電で帰る
	 * yusukebe大船で降りる
	 * 北鎌倉まできて次だなと思う
	 * 次の駅で降りたらなぜか逗子だった
	 * 何がおきたのかわからなかったがとりあえずタクシーで会社までかえる
	 * なぜか会社の人たちとラーメン食いに行く
	 * ラーメン食べたいとかいってたはずなのにチャーハン頼む
	 * おなかいっぱいで帰宅
	 * スライド書くはずが、つかれたーと横になったらそのまま爆睡
	 * 7時すぎにハッとおきる
	 * 急いで会場へ
	 * 会場で急速でスライドを仕上げる (spork++)

	という感じでした。

	しかしやっぱりsporkは便利だネー。一瞬でスライド作れますよ奥さん。

2008-05-12 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 12:51 Google Docs にファイルアップロードするスクリプト [perl]:
	を書いてみた。

	[http://github.com/typester/www-google-docs-upload/tree/master/example/gdoc-upload.pl](http://github.com/typester/www-google-docs-upload/tree/master/example/gdoc-upload.pl)

	muttとかサーバーサイドのメーラーを使っているとコンソールで開けない添付ファイルが来たときちょっと困るなーと思っていて、いままではsshfsとかでマウントしてあるところに一時的にファイルを保存してそこをローカルのPCから開いていたけど面倒。

	いちおうimapも使えるようにしてあるので添付ファイルだけほかのメーラーで読むというのもありかなと思ったけどBeckyもThunderbirdも(imap経由だからか)重くてよけいめんどい。

	で、mutt からパイプでわたすだけで google docs にアップロードされたら便利だなーと思って作ってみたというところ。

	ただパイプで渡したのを File::Temp で保存してそれをアップしてるのだけど、Google Docs側が拡張子でファイルの種類を判別してるようで、`File::Temp->new` しただけだと拡張子がつかなくてアップされない＞＜

	ので現状は

	    | gdoc-upload.pl -n ppt

	とか拡張子を指定する必要がある。

2008-04-29 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 00:25  [git]:
	つーか、guidesにあるじゃねーか！！！

	secondlife-- (と人のせいにする)

	> [Remove a remote branch &mdash; Git Guides &mdash; GitHub](http://github.com/guides/remove-a-remote-branch)

2008-04-28 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:33 remote branch を削除する方法 [git]:
	忘れないうちにメモ

	     ~/dev/git/test (master)
	    $ git checkout -b testbranch
	    Switched to a new branch "testbranch"
	    
	     ~/dev/git/test (testbranch)
	    $ vim test.txt
	    
	     ~/dev/git/test (testbranch)
	    $ git commit -a
	    Waiting for Emacs...
	    Created commit 7dea716: modified test.txt
	     1 files changed, 1 insertions(+), 0 deletions(-)
	    
	     ~/dev/git/test (testbranch)
	    $ git push origin testbranch
	    Counting objects: 5, done.
	    Compressing objects: 100% (2/2), done.
	    Writing objects: 100% (3/3), 267 bytes, done.
	    Total 3 (delta 0), reused 0 (delta 0)
	    refs/heads/testbranch: 0000000000000000000000000000000000000000 -> 7dea716ff6f4984c3d0256d09279e9d954af3dc4
	    To git@github.com:typester/test.git
	     * [new branch]      testbranch -> testbranch
	    
	     ~/dev/git/test (testbranch)
	    $ git checkout master
	    Switched to branch "master"
	    
	     ~/dev/git/test (master)
	    $ git branch -D testbranch
	    Deleted branch testbranch.
	    
	     ~/dev/git/test (master)
	    $ git push origin :heads/testbranch
	    refs/heads/testbranch: 7dea716ff6f4984c3d0256d09279e9d954af3dc4 -> deleted
	    To git@github.com:typester/test.git
	     - [deleted]         testbranch

2008-04-04 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 17:18 vc-annotate [emacs] [git]:
	> [Emacs の vc-annotate - naoyaのはてなダイアリー](http://d.hatena.ne.jp/naoya/20080404/1207294998)

	そういえば設定したなとおもっておもむろに `M-x vc-annotate` してみたら git でもできた！

	<a href="http://www.flickr.com/photos/typester/2386414551/" title="Untitled by typester, on Flickr"><img src="http://farm3.static.flickr.com/2265/2386414551_150b942f0f_o.png" width="820" height="562" alt="untitled" /></a>

	設定はこんなんで

	> [http://svn.coderepos.org/share/dotfiles/emacs/typester/.emacs.d/conf/50_git.el](http://svn.coderepos.org/share/dotfiles/emacs/typester/.emacs.d/conf/50_git.el)

	elファイルはgit自体についてくる。

2008-03-31 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 14:20 花粉症な人に優しい店員がいるアマゾンクラブ [life]:
	今年は花粉症にならなかったなぁと安心していたら先週末あたりから発症。昨日とかほんとひどかった。

	そんな中飲みにいった[アマゾンクラブ](http://www.amazon-club.com/)というところには親切な店員がいて、おしぼりを顔にあてていたら、「つらいでしょう、暖かいほうが楽ですよね」と新しいおしぼりを持ってきてくれたり、「僕の相棒置いておくんで使ってください」って鼻セレブもってきてくれたりした。

	おかげでほんとに助かった。また行く！

2008-03-21 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:38 dopplrのnickからその人のローカル時間を表示するirssiプラグインを書いた [irssi] [dopplr]:
	IRCで話していると、相手は今何時なんだろうと思うことがよくあります。

	今日とあるチャンネルでそのことについて話していて、dopplrの情報使ったらいいんじゃないかとひらめいたので早速irssiプラグインを作ってみました。

	> [http://coderepos.org/share/browser/lang/perl/irssi/scripts/dopplr.pl](http://coderepos.org/share/browser/lang/perl/irssi/scripts/dopplr.pl)

	これを入れた状態で

	    /clock miyagawa

	とか打つとmiyagawaさんがいまどこにいて、そこはいま何時かというのを出してくれます。便利！

	    23:40 -!- Irssi: typester is at home in Kamakura (03/21 23:40)

	という感じの出力です。(これは /clock typester した結果)

	使い方は `~/.irssi/scripts` 以下にスクリプトをおいて `/run dopplr` でロード。その後

	    /set dopplr_token 認証用token

	としてtokenを登録したら/clockコマンドが動くようになります。

	tokenはまじめに取得するのは面倒なのですが、

	[http://www.dopplr.com/account/api\_session\_token](http://www.dopplr.com/account/api_session_token)

	ここからテスト用のtokenを作成できるのでここのを使うと楽です。

	もちろんdopplrのAPIを使ってるので、dopplr上で自分がみることができる人の情報しかとってこれませんのであしからず。

	* 14:58 todo.plが古かったらしい [hiveminder]:
	hiveminderのtodo.plってbraindumpはできるけど、今あるタスクを一括でテキスト編集しようとするとdownload -> edit -> uploadってやんないといけなくてめんどいよね。なので適当にhmeditってスクリプト書いてやってる。

	っていう話をcho45にしたらなにいってんすかeditdumpでできますよプクｗ みたいな事を言われたのでtodo.plを最新のにしたらできた。くそう。

	今まで使ってたhmeditはこんな感じ。もういらないけど、今までありがとう。

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    use File::Temp;
	    
	    my $hm     = 'todo.pl';
	    my $editor = $ENV{EDITOR};
	    
	    my $fh = File::Temp->new;
	    my $fn = $fh->filename;
	    $fh->close;
	    
	    system("$hm dl $fn");
	    die $! unless -e $fn and my $size = -s _;
	    
	    system("$editor $fn");
	    
	    exit if $size == -s $fn;
	    
	    system("$hm ul $fn");

2008-03-18 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 02:34 .emacsを公開した！ [emacs]:
	kentaroさんが最近やたらemacsづいてるので影響を受けて先週末に.emacsを整理したのでついでにcodereposにあげてみました。

	> [http://coderepos.org/share/browser/dotfiles/emacs/typester](http://coderepos.org/share/browser/dotfiles/emacs/typester)

	整理したら300行ちょっとしかなくなってしょんぼり。まぁまだ今までやってた設定全部は移せてないのだけども。

	あとmmm-modeに再挑戦したがやっぱりむりだった＞＜ javascript.elでコメントアウトしたりしてるのがその名残。

	nxml-mode + css-mode はうまくいくんだが javascript-mode とだとうまくうごかんなぁ。

2008-03-17 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 02:20 こえ部にゆずがあらわれた [life]:
	これやばい。

	<div style="text-align:center; width:240px;font-size:11px;"><a href="http://koebu.com/">声で遊ぶコミュニティ こえ部</a></div><script type="text/javascript" src="http://koebu.com/js/bp.js#koe=6690205cd65f96552875a338ae9a8e3d2d623b02"></script>

	プロですかこれは。

2008-03-12 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 12:24 convertコマンド [perl]:
	ImageMagickのconvertコマンドをsystem関数でたたいてた古いプログラムを動かす必要があったのだが、そのためだけにImageMagickインストールするとか面倒すぎたので、perlでconvertコマンド的なものを書いてお茶を濁した。

	ファイル形式の変換とリサイズしかできない。

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    use Getopt::Long;
	    
	    use Imager;
	    use Path::Class qw/file/;
	    
	    GetOptions(
	        \my %options,
	        qw/geometry=s/,
	    );
	    
	    my $in  = file($ARGV[0]);
	    my $out = file($ARGV[1]);
	    
	    my ($width, $height) = ($options{geometry} || '') =~ /(\d+)x(\d+)/;
	    
	    # read
	    my $img = Imager->new;
	    $img->read( file => "$in" ) or die 'Cannot read: ', $img->errstr;
	    
	    # scale if exists geometry option
	    if ($width and $height) {
	        $img = $img->scale( xpixels => $width, ypixels => $height, type => 'nonprop' );
	    }
	    
	    # write
	    $img->write( file => $out ) or die 'Cannot write: ', $img->errstr;

2008-03-05 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 13:32 Catalyst MVC [catalyst]:
	Catalyst に関してだけ言えば Model いらなくね？という話もわかるのだが、アプリの複数の箇所で共通で使うオブジェクトはModelを使うと楽だし論理的な実装になるとおもう。

	僕のMVCの理解が変かもしれないけど、今はそんな感じで考えている。＞共通で使うオブジェクトはModel

	そんで、`Catalyst::Model` 微妙っていうのはやっぱり Catalyst 専用の Model つくってもほかから利用できないしなってのがあるんだけど、それは `Catalyst::Model::Adaptor` で解決。jrockway++

	なので、単体で動作する何らかのモジュールをまずつくり、それを Model::Adaptor で連結する、というのが今の好きな方法。

2008-03-01 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 05:19 グラハムエーカー上級大尉がアツイ件 [life]:
	彼を見るのが楽しみで毎週ガンダム見てるといっても過言ではない。

	> 「そんな道理、私の無理でこじ開ける！」

	とか

	> 「男の誓いに訂正はない！」

	とかあついっすなー。

	電王でもユウトが好きだったし、こういうキャラクターが好きなんでしょうな。

2008-02-29 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 19:12  [catalyst]:
	> 俺は MyApp::Context って名前で BK まとめてるな。

	こっちのがカコイイ！

	* 12:17 Catalystアプリオレオレポリシー [perl] [catalyst]:
	下記camr作った時点での僕のポリシーは

	 1. アプリ名にかかわらず設定ファイルはconfig.yamlとconfig_local.yaml
	 2. でも変更することがないほとんどの設定はyamlには書かない。yamlがごちゃっとするときもい
	 3. ForceUTF8系モジュールは使用しない。内部がきちんとutf8で統一されていれば必要ない。
	 4. MyApp::UtilsとかいうのでいろいろBKなことをまとめてする。uri_forを気に入るように直したり、FillInFormの挙動変えたり

	なんか抜けてる気がするけどこんな感じ。

	* 02:54 Webカメラから直接写真をFlickrにあげる [perl]:
	> [はてなフォトライフでWebカメラから直接写真を撮影してアップロードできるようになりました - はてなフォトライフ日記 - 機能変更、お知らせなど](http://hatena.g.hatena.ne.jp/hatenafotolife/20080228/1204189811)

	をみて、おもろいなーとおもったので僕も作ってみた。Flickrバージョン。

	> [http://coderepos.org/share/browser/websites/camr/trunk](http://coderepos.org/share/browser/websites/camr/trunk)

	本家に比べると大分しょぼいけど、動いたので満足した。なんかこれだけで3時間くらいかかった。。

	ローカル git レポジトリからあげる方法がわからなんだので、普通に svn import した＞＜

2008-02-21 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 15:44 TDD支援elisp [emacs]:
	> [TDDの勘所とTDD支援超簡易Emacs Lisp - aikeの日記](http://d.hatena.ne.jp/aike/20080217)

	が面白いなーと思ったので自分用に改造してみた。

	モードラインの色を変えるようにしただけだけど。

	<a href="http://www.flickr.com/photos/typester/2281395034/" title="2008-02-21_1542 by typester, on Flickr"><img src="http://farm3.static.flickr.com/2328/2281395034_e528694896_o.png" width="460" height="458" alt="2008-02-21_1542" /></a>

	    ;; C-c m でTDDのモード切替え
	    
	    (defvar tdd-bgcolor-alist
	          '(("Think"      ."snow")
	            ("Red"        ."#ff4444")
	            ("Green"      ."#44dd44")
	            ("Refactoring"."#ffaa44")))
	    
	    (defvar tdd-bgcolor-mode 3)
	    (defvar tdd-bgcolor-mode-name "")
	    (let (
	          (cell (or (memq 'mode-line-position mode-line-format)
	                    (memq 'mode-line-buffer-identification mode-line-format)))
	          (newcdr 'tdd-bgcolor-mode-name))
	      (unless (member newcdr mode-line-format)
	        (setcdr cell (cons newcdr (cdr cell)))))
	    
	    (defun tdd-bgcolor-rotate ()
	      (interactive)
	      (let (pair)
	        (if (>= tdd-bgcolor-mode 3)
	            (setq tdd-bgcolor-mode 0)
	          (setq tdd-bgcolor-mode
	                    (+ tdd-bgcolor-mode 1)))
	        (setq pair
	          (nth tdd-bgcolor-mode tdd-bgcolor-alist))
	        (setq tdd-bgcolor-mode-name (format "[%s]" (car pair)))
	        (message tdd-bgcolor-mode-name)
	        (set-face-foreground 'mode-line (cdr pair))))
	    
	    (global-set-key "\C-cm" 'tdd-bgcolor-rotate)

2008-02-20 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 02:19 fast-forward merge [git]:
	は git-svn なブランチ上では予期せぬ動作になるので使用しない方がいいっぽい。

	新しいコミット発生しないので git svn dcommit できなくなる。

2008-02-19 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:56 git-svn 作業フロー [git]:
	plagger レポジトリで作業するとする。svkとの比較つき。

	#### まず git レポジトリ作成

	    git svn init -s http://svn.bulknews.net/repos/plagger/ plagger

	これで、plaggerってディレクトリにgitレポジトリができる。svk mirror的なものですね

	#### 次にsvnとデータをsyncさせる。

	    cd plagger
	    git svn fetch

	これは svk sync 的なもので対象の変更をすべてtrackしてmerge情報とかを記録する。なので重い。体感では svk sync 以上。

	ちなみに最初の init の代わりに clone とすると一気に fetch までしてくれる。

	#### trunk で作業するよ (ここからが通常のワークフロー)

	    git checkout trunk

	で trunk に移動。

	svn が変更されてるかもしれないので

	    git svn rebase

	でチェック。(svk pull 的なもの)

	いろいろ編集後

	    git commit -a

	で git レポジトリにコミット。この時点ではローカルの git レポジトリにしか反映されてない。

	svn に反映させるには

	    git svn dcommit

	とする。これが svk push 的なもの。

	ここまでが一応 co から ci までの流れ。

	もう少し例。

	#### fastladder-crawler ブランチで作業してみる

	ブランチに移動

	    git checkout fastladder-crawler

	いろいろ変更後コミット

	    git commit -a

	#### このブランチをtrunkにマージしよう

	まずtrunkに移動して

	    git checkout trunk

	マージ

	    git merge fastladder-crawler

	これだけ。すばらしく簡単。

	#### ローカルブランチを作って作業も簡単

	まずtrunkのローカルブランチをつくる。まずtrunkへ移動

	    git checkout trunk

	test という名前のブランチ作成してそこに移動

	    git branch test
	    git checkout test

	これは以下で一発にできる

	    git checkout -b test

	いろいろ編集して test ブランチにコミット

	    git commit -a

	それを trunk に反映

	    git checkout trunk
	    git merge test

	用が済んだらtestブランチ削除

	    git merge -d test

	とかいう感じ。

	ブランチ作ったりマージしたりがさくさくできて気持ちいい。svk ユーザーは一度さわってみるといいと思う。

	* 18:09 zsh の prompt に git のブランチ情報を表示 [git] [zsh]:
	[svk でやってたもの](http://unknownplace.org/memo/2008/02/04)の git 版。

	<a href="http://www.flickr.com/photos/typester/2276187593/" title="git branch info in zsh prompt by typester, on Flickr"><img src="http://farm3.static.flickr.com/2243/2276187593_458d4fe402_o.png" width="356" height="169" alt="git branch info in zsh prompt" /></a>

	`ref: refs/heads/` という部分を消していいのか、ほかのものが入る場合があるのかよくわからなかったので全表示している。

	まぁぱっと見で git とわかるからいいかということでとりあえず。

	codereposにあげてあるよ。

	あぁ、なんか ref: とかすらでずに sha-1 ハッシュ値だけのときもある。もう少し調べないとだめだ。

	* 16:14 git [git]:
	cho45 さんがイイヨイイヨいっていたので git & git-svn ちょっと試し中。

	大体基本的な使い方はわかった。

	マージが簡単なのはほんとにいい。svk の smerge がより簡単になった感じだ。

	ブランチの処理もsvkよりこっちのほうが好き。作りまくって、マージしたら消す。

	まだわからないのは適当な場所で git init してスクラッチ的にプロジェクトつくったときそれを svn のほうにマージするにはどうしたらいいのかがまだわからない。

	git-svn なレポジトリからスクラッチのほうを pull すればいいのかな？ あとでためそう。

	あと svk とちがって zsh の補完がかなり高機能でうれしい。svk のはほとんどないも同然。(あるけど遅いので使ってない)

	もうしばらく使ってみてから使うかどうか決める。

2008-02-17 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 23:07 utf8::is_utf8 [perl]:
	miyagawaさんが#catalystでいってたことやっと理解できた、きがする。

	    use Data::Dumper;
	    
	    my $s = "H\x{c3}\x{ab}llo";
	    
	    utf8::decode($s);
	    
	    warn Dumper $s;        # => "H\x{eb}llo"
	    warn utf8::is_utf8($s) # => 1

	だけれども

	    my $s = "H\x{eb}llo";
	    
	    warn utf8::is_utf8($s) # => Warning: something's wrong

	ということで、`"\x{6751}\x{702c}\x{5927}\x{8f14}"` などというData::Dumper表記でかならずしも utf-8フラグがたつわけじゃない。ということがいいたかったんだと思うのだけれど、

	そもそも &euml; が latin-1 では `"\x{eb}"` だけど utf-8 では `"\x{c4}\x{ab}"` であるということを僕が認識してなかったせいでおかしなことになった。すみません。

2008-02-16 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 19:34 Catalyst::Controller::Resources [perl] [catalyst]:
	かっこいい。

	オレオレ規約をもとに雛形を生成するヘルパースクリプトでがんばるよりこういう自分用のコントローラをつくるほうがスマートだなぁ。

	Catalystユーザー的にはオールドタイプな自分としては見習おうと思った。

2008-02-09 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 01:37 OpenFL + Plagger::Plugin::Store::Fastladderも実戦投入した！ [plagger]:
	といっても今まで使ってたyamlに `- module: Store::Fastladder` の項目を追加しただけだけど。

	今までの `Store::DBIC` (PlaggerLDR) のも残してあるので今はどちらも使える状態。

	ちなみに使用感は PlaggerLDR とほとんど同じだなぁ。グリモンなくても使えたりするのが Store::Fastladder のほうがいいところだけど、いますぐ PlaggerLDR から乗り換えるメリットはあまりないのかも。(PlaggerLDR使ってる人はね)

	PlaggerLDRよくわからんくてつかってないけど、使いたかったというような人にはかなりおすすめだ。動作している OpenFL の環境があれば Store::Fastladder は plagger の yaml にそのデータベース情報を書くだけで動作する。

	あと、OpenFL のデータベースは SQLite じゃなくて mysql を使ってる。PlaggerLDR で経験したのだが、SQLite だとフィード増えてくるとかなり重くなる。せいぜい数ヶ月が限度。

2008-02-08 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:19 ユニークなランダム文字列 [perl]:
	すでに生成したIDかどうかを気にする必要がないユニークな文字列を作成しようとした場合

	    use Data::UUID;
	    use MIME::Base64::URLSafe;
	    
	    print urlsafe_b64encode( Data::UUID->new->create );

	こんな感じにやるのがいいのかなぁ。これで22文字。

	んー。

	エントリーのURLとかにつかいたくてもう少し短くしたいけど、文字列生成したときに重複してないか調べるためにDBを引くというのがイヤダナー。

2008-02-07 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 18:30 plaggerをfastladderのクローラーとして使う [plagger]:
	のを作ってみた。

	> [http://plagger.org/trac/changeset/2000](http://plagger.org/trac/changeset/2000)

	やっとPlaggerLDRいらずになるかなー。

	まだDBのカラムの役割とかよくわかってなくて適当な値いれてたりするとこあります。

	* 18:29  [ruby]:
	クローラー動かすのに

	    sudo gem install rfeedfinder

	も必要だった。

	あれクローラーじゃなくてfeedをsubscribeするときに必要だったのかも。覚えてないけどとりあえず必要。

	* 15:18  [ruby]:
	メモついてるYO! ってつっこまれた。

	> [http://fastladder.googlecode.com/svn/trunk/fastladder/INSTALL.txt](http://fastladder.googlecode.com/svn/trunk/fastladder/INSTALL.txt)

	ほうほう。

	* 14:35 fastladderメモ [ruby] [debian]:
	動かすのに必要だったもの

	    sudo aptitude install ruby ruby1.8-dev rubygems
	    sudo aptitude install libfreeimage-dev
	    sudo gem install rails
	    sudo gem install sqlite3-ruby
	    sudo gem install feed-normalizer

	DBセットアップ

	    rake db:migrate RAILS_ENV=development

	起動

	    ./script/server -e development

	すばらしすぎるなぁ。

2008-02-05 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 16:51 JSON::XS を実戦投入した [perl] [catalyst]:
	いままでずっと `JSON::Syck` を使い続けていたのだけど、いまの `JSON::Syck` には

	    /y|Y
	    |n|N
	    |yes|Yes|YES
	    |no|No|NO
	    |true|True|TRUE
	    |false|False|FALSE
	    |on|On|ON
	    |off|Off|OFF
	    |null|Null|NULL
	    |~
	    /x

	の正規表現にマッチする値はシングルクオートでくくられてしまうという仕様があり、これはJSONの仕様に反するのでパーサーによっては正しく処理できないものがある。

	これがFlashから使うJSON APIでもろにはまって、adobe の corelib に入っている JSON のパーサーはこれをパースできない。(rubyのyamlパーサーでもエラーになるようだ)

	cho45さんが[これを直すパッチ](http://rt.cpan.org/Public/Bug/Display.html?id=32910)を書いてくれたのだけど、いい機会なので `JSON::XS` を試してみた。`JSON::Syck` のドキュメントからも言及されてるしね。

	`Catalyst::View::JSON` から使うには以下のような感じで `MyApp::View::JSON` をかけばOK。

	    package MyApp::View::JSON;
	    use strict;
	    use base 'Catalyst::View::JSON';
	    
	    use JSON::XS ();
	    
	    sub new {
	        my $self = shift->NEXT::new(@_);
	    
	        my $dumper = JSON::XS->new->latin1;
	        $self->json_dumper(sub { $dumper->encode($_[0]) });
	    
	        $self;
	    }
	    
	    1;

	`JSON::Any` つかってないのは Any だと環境変数で使用ライブラリを上書きできてしまっていやなので XS を直使用している。

	一日くらい社内でテストしたけどだいじょうぶっぽかったのでさっき本番投入してみた。どうだろうな。

2008-02-04 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:26 branchでもtrunkでもないときはdepotpathそのまま表示するようにしてみた [zsh] [svk]:
	<a href="http://www.flickr.com/photos/typester/2241200579/" title="show svk depot path in zsh prompt by typester, on Flickr"><img src="http://farm3.static.flickr.com/2338/2241200579_1c4439762a_o.png" width="400" height="220" alt="show svk depot path in zsh prompt" /></a>

	これだけでもいいかもしんない。

	* 21:43  [zsh] [svk]:
	`.zshrc` といっしょにcodereposにあげた。

	> [http://coderepos.org/share/browser/dotfiles/zsh/typester](http://coderepos.org/share/browser/dotfiles/zsh/typester)

	* 19:57 さっきのsvkpath.plの修正版 [zsh] [svk]:
	`File::HomeDir` と `Path::Class` を使わずに愚直にかいてみたがあまり体感変わらず、ためしに `YAML` を `YAML::Syck` にしてみたら激早くなった。

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    use YAML::Syck;
	    
	    my $path   = $ARGV[0] or die;
	    my $config = YAML::Syck::LoadFile( $ENV{HOME} . '/.svk/config' );
	    
	    my $hash = $config->{checkout}{hash};
	    my @path = split '/', $path;
	    
	    my $svkinfo;
	    do {
	        $svkinfo = $hash->{ join '/', @path }
	    } while !$svkinfo and pop @path;
	    
	    exit unless $svkinfo;
	    
	    if (my ($trunk, $branch) = $svkinfo->{depotpath} =~ m!(?:/(trunk)|/(branches/[^/]+))$!) {
	        print '(' . ($trunk || $branch) . ')';
	    }

	こんな感じ。

	このくらいの体感速度なら割と普通に使えそう。

	* 18:46 zsh の PROMPT に svk の trunk|branches/... を表示してみるテスト [zsh] [svk]:
	毎回svk infoしてどこにいるか確かめるのが面倒になったので、

	    PROMPT='%(?..exit %?)
	     %{[33m%}%~%{[m%} %{[91m%}`perl /home/typester/dev/scratch/svkpath.pl $(pwd)`%{[m%}
	    %{[38m%}%(!.#.$)%{[m%}%{m%} '

	PROMPTをこんなにして

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    use YAML;
	    use File::HomeDir;
	    use Path::Class qw/file dir/;
	    
	    my $path   = $ARGV[0] or die;
	    my $config = YAML::LoadFile( file(File::HomeDir->my_home, '.svk', 'config') );
	    
	    my $hash = $config->{checkout}{hash};
	    $path = dir($path);
	    
	    my $svkinfo;
	    do {
	        $svkinfo = $hash->{"$path"}
	    } while !$svkinfo and $path ne ($path = $path->parent);
	    
	    exit unless $svkinfo;
	    
	    if (my ($trunk, $branch) = $svkinfo->{depotpath} =~ m!(?:/(trunk)|/(branches/[^/]+))$!) {
	        print '(' . ($trunk || $branch) . ')';
	    }

	とかしてみた。

	これで

	<a href="http://www.flickr.com/photos/typester/2241740400/" title="show svk info by typester, on Flickr"><img src="http://farm3.static.flickr.com/2038/2241740400_53ea62b31a_o.png" width="370" height="97" alt="show svk info" /></a>

	こんな感じになるわけだけども、毎回perl呼んでるので重い。

	軽くできないかなー。

	perlでやるなら裏でデーモン化してそこ呼ぶようにするのがいいのか。でもそこまでがんばる必要があるのかどうか。

2008-02-01 (Fri)  Daisuke Murase  <murase@kayac.com>

	* xなんとかさん [life]:
	> [ボクの名前の由来 - ANOTHER PIECES](http://d.hatena.ne.jp/xcezx/20080201/1201824171)

	最近では xcezx さんのことをはなすときに、「せず」さんがさぁ、なんてことをいうと「せずさんてだれ？」ということになって結局、「ほら、あのx何とかって人だよ」って言うと通じるということが多く、二度手間なため、最初からxなんとかさんって呼ぶようにしてる。

2008-01-30 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 12:18 コード再利用の話 [perl] [catalyst]:
	基本自社サービス or 個人サービスしかつくってないので、本当にcatalystを使っているとコピペ地獄になる。

	また同じことかいてるなーってのが多すぎるため、むかついてなるべくコピペを減らす工夫をしている。

	codereposにあげたcatstarterってのもそうだし、あとはヘルパーを結構書いてる。

	Catalystのヘルパーってまぁ要するにコードジェネレータなんだけど、ユーザー登録とかログイン・ログアウトとかほんとにいつもかいてるのでその辺はヘルパー一発で雛形生成するようにしてたりとか、jsのajax apiのサーバーサイドとかもjson形式を決めうちにしちゃってこれも雛形生成している。

	いまの `Catalyst::Helper` って新しいコード生成には使えるけど既存のクラスにメソッド追加とかそういうのできないのが不満。なんかつくりたい。

	この辺の話はちゃんとまとめたいな。catalyst conやりたい！

	* 12:14  [perl] [catalyst]:
	> [Catalyst::Plugin::URI::MtimeQueryとCatalyst::Plugin::Assets - dann@catalyst - Catalystグループ](http://catalyst.g.hatena.ne.jp/dann/20080129/1201620323)
	>
	> Catalyst::Plugin::AssetsにCatalyst::Plugin::URI::MtimeQueryのアイデアをインスパイアしたものを加えると、Assetsも結構使えるかも知れないなぁ。export\_with\_mtimequeryみたいなのがあればいいのかも。

	これ今まさに仕事で使おうと思ってかいている。

	そのうち公開します！

2008-01-29 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 09:33 SoozyCon4の資料 [life]:
	お疲れさまでしたー。

	過去のスライドも一緒にまとめてcodereposっておきました。

	> [http://svn.coderepos.org/share/docs/typester/soozycon4/index.html](http://svn.coderepos.org/share/docs/typester/soozycon4/index.html)

2008-01-26 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 13:57 マックのコーヒーについて [life]:
	> [http://gourmet-cdn.oricon.co.jp/special/20080119.html](http://gourmet-cdn.oricon.co.jp/special/20080119.html)

	マックのコーヒーの味については、最近のんでないからわからないのだけど、1年半くらい前に言及している。

	> [http://unknownplace.org/memo/2006/04/16#e002](http://unknownplace.org/memo/2006/04/16#e002)
	>
	> マックのコーヒーがうまくなってる件。普通にのめるよ。すごい。
	>
	> ファストフードでは一番うまいんじゃない？これ。いつからだろ。。

	値段を考えたらマックが一位でも不思議じゃないかなぁ。

2008-01-23 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 17:31 DBIx::Classで論理削除 [perl] [dbic]:
	DBICで論理削除をしたくなったので調べていたのだが、うまく書く方法がイマイチなかった。

	まず、削除フラグを常にチェックするようにするのは簡単で、テーブルクラスに

	    __PACKAGE__->resultset_attributes({ where => { deleted => undef }});

	とか書いてくだけでつねにWHERE句に `deleted IS NOT NULL` が入るようになる。これはマニュアルに書いてある通り。

	問題は削除するときで、テーブルクラスで `delete` 定義してそこで `update({ deleted => 1 })` とかやればいいかなと思いきや、そうすると cascade delete 効かなくなってしまっていやだ。

	DBICのrowに対するdeleteチェーンは大まかに

	 1. ユーザー定義テーブルクラスでのdelete (定義されてる場合)
	 2. DBIx::Class::Relationship::CascadeActions
	 3. DBIx::Class::Row

	となっていて、2 で cascade delete の処理が入り。3で実際に row が削除される。

	(正確には2ではnextよんでからcascade deleteしてるため 1 -> 2 -> 3 -> 2 という感じである)

	それでこの場合は実際に削除するのを `update({ deleted => 1 })` に置き換えたいので 3 の直前に自分のメソッドを差し込んでそこでチェーンをとめるという実装がしたいと思った。

	のだけどしばらく考えたけどいいやり方が見つからなかったので結局 1 のユーザー定義クラスで

	    sub delete {
	        my $self = shift;
	    
	        $self->update({ deleted => 1 });
	    
	        my $source = $self->result_source;
	        $self->search_related($_)->delete_all
	            for grep { $source->relationship_info($_)->{attrs}{cascade_delete} } $source->relationships;
	    
	        $self;
	    }

	などと全部詰め込む感じでお茶を濁した。

	論理削除を今まで使ってなかったのでいまさら感がありますが、DBICで論理削除ってるひとでいいやり方知ってる人いたら教えてください！

2008-01-18 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 03:23 uri_forのやつ [perl] [catalyst]:
	uri_withも同じようにおかしかったのでそっちもなおしてもらった。

2008-01-17 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:44 IRCのログをそのまんま貼り付けるという行為 [irc]:
	sexさんがtokuhiromのログをコピペして貼っているけれども、IRCでの会話をそのままコピペしてブログるということはなんというかあまりよろしくないと思っている。

	まぁtokuhiromだからいいという話もあるけどｗ

	なんというかIRCでの発言というのはその場の流れだとか雰囲気だとかがあってその中での発言になっているから、自分の言葉で～さんが～といっていた、的に自分の言葉で記事にするのはいいとおもうけど、そのままコピペしちゃうというのは違うと思うのだ。僕だけかもしれないけど。

	でも、tokuhirom自身もログ張るときはnick伏字にしてたりしてて、あれは多分こういう考え方してるからなんじゃないかなーと思っている。

	IRCのログを収集するサービスが不人気だったのも同じような理由な気がするし。

	まぁなんかここのとこ連続してログコピペしてる記事をみたので書いてみた次第です。

	* 03:19 uri_forのパッチ [perl] [catalyst]:
	いまどきのperl使いな皆様におかれましては内部ではutf8フラグを立てたutf8 stringとして文字列を扱っていると思いますが、そういった場合は `uri_for` は正しく動作します。

	そうではなく、utf8 bytes を渡した場合、今の `uri_for` では壊れたURIが帰って来るというバグがあります。単純なミスなのだけど。

	かなり前からなんだけど誰も気がつかないのか必要ないのか一向に直らないので業を煮やしてメールでパッチ送ったところすぐに反映してくれた。ナイス。

	> [http://dev.catalyst.perl.org/svnweb/Catalyst/diff/Catalyst-Runtime/5.70/trunk/lib/Catalyst.pm?rev1=7391;rev2=7392](http://dev.catalyst.perl.org/svnweb/Catalyst/diff/Catalyst-Runtime/5.70/trunk/lib/Catalyst.pm?rev1=7391;rev2=7392)

	パッチはこんなん。

	canonical してないのは仕様らしい。(昔のはしてたよね？)

	mst によれば

	> For RSS/atom feeds etc.

	とのこと。どゆこと？

	* 01:09 Colin Moock さんのイベント [life] [as3]:
	> [trick7.com blog: 1月16日イベント告知](http://www.trick7.com/blog/2008/01/11-181146.php)

	いってきましたー。Flash系のイベントに参加したのははじめてだったのだけど、asよりということもあるかもしれないけど、とても面白かった。

	感想など。

	 * Colinさんによる ECMAScript4 の話
	   * ECMAScriptの話はへーという感じである
	   * 日本語うまい
	   * null の発音はヌルではなくてどっちかといえばナルに近くて最初訳してくれるまで何言ってるのかわからなかった。

	 * yossyさん
	   * javaっぽくリフレクションできるやつ。個人的には興味ないけどすごくよくできてる感がした。
	   * AS3Unit いいねー
	   * as2でもaddChildとかどーのこーの。as2の話はよくわからん。addChildをアドチルドといっていたのがきになりまくる。
	   * swfassistすげーー。スイフ(スウィフ？)アシストって呼んでたのもびっくりした。swf == スイフ？ ってよむんだー。

	 * むらゴンさん
	   * タッチパネルThinkpadは思った以上によさげ。
	   * 最初Flash IDEの画面出ててこれはアウェイかなーと思いきや動画にエフェクト二種類かけてその解説など。おもしろかった。
	   * プレゼン画面が黒板にチョークを模したもので実際にチョークで字かいたりできた。質感もよかった。おもれー。

	 * せこん
	   * 多言語化の話。よかった。僕も使いたい。(機会があれば)
	   * 「gettextって便利なあぷりがあるんですよぅ」とか1から説明していたりとアウェイ感でてておもしろかった。

	 * むらけんさん + 寺井さん
	   * バカスｗ

	 * 岩崎さん
	   * なんかフレームワークのイベントマネージャの話。よくわからなかった。

	 * yu-kobayashiさん
	   * HotRubyの話。こないだblog記事みたときもおどろいたけど、実際に3Dのピンボールうごいてるのみてぽかーんとした。

	 * 飛び入りの人
	   * ダッシュ四駆郎。その発想はなかったなぁｗ

	 * 質疑応答
	   * as3からByteArray+Socketで直接MySQL接続できるとはいってもそれを実際のサービスで使うのはねーよｗｗｗ
	     FlashPlayerからつなげる == だれでもそのMySQLにつなげる。ですからね。

	本当にただの感想です。

	yossyさんと話すチャンスがなかったのでsparkprojectをDISれなかったのが残念である。

2008-01-15 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 06:41 WWW::HatenaDiary [perl]:
	CPANの更新Feedで存在を知った罠。どんだけcoderepos見てないんだよ。。。

	`Fuse::Hatena` のコードちょっと使ってるみたいなこと書いてあるけど、逆にこれを `Fuse::Hatena` で使わせてもらおうｗ

	* 06:39 POE::Component::WWW::Google::Calculator とか [perl]:
	> [POE::Component::WWW::Google::Calculator - A non-blocking POE wrapper around WWW::Google::Calculator - search.cpan.org](http://search.cpan.org/perldoc?POE::Component::WWW::Google::Calculator)

	PoCo::Genericってもんを知らないのかなこの人は。。。

2008-01-08 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:40  [perl] [dbic]:
	> [DBIx::Class::AsArrayHash - Hatena::Diary::Neko::kak 500 Internal Server Error](http://d.hatena.ne.jp/nekokak/20080108/1199788416)

	うんうん、DBICつかってるとmapまくりよね。僕ならこう書いてるな。

	    my @rets = map { $_->get_columns }, $rs->all;

	DBIC::AsArrayHashいらないってのは同意。

	retrieveとかCDBI的なのもあれ。

	* 01:53 mmm-mode [emacs]:
	> [mmm-mode and nxml-mode - Yet Another Hackadelic](http://d.hatena.ne.jp/ZIGOROu/20080107/1199720692)

	mmm-mode はいままで3回くらい挑戦してると思うけどうまく使えたためしがないのであきらめている。

	今度社内でemacs自慢大会やるつもりなのでそのときにだれかやってくれないかな。

2008-01-03 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 21:34 なんか荒れてるやつ読んだ [perl]:
	論点とは違うけど、ひとつ思ったこと。

	自分の書いたコードが module author に気に入られず採用されなかったときには、テストケースにして送ってみるといいと思いますよ。

	自分のコーディングポリシーと違うコードだとか、そもそもいけてないとかいう理由で送られてきたパッチをスルーするのはよくある話だと思いますが、そういう場合にはテストケースとして送りつけるというのが作者側としてはありがたいです。

	送られてきたパッチを読んでどのようなことがしたいのかを読み取って自分で実装してもいいけれど、やりたいことが明確にわからなかったり、実装したけどこれであってるのかどうかよくわからなかったりして、その結果よくわからないからスルーなどということになるわけですが、テストがあればそれを通るようにするだけなので。

	* 15:06 あけましておめでとうございます [life]:
	本年もよろしくお願いします。

	今年はちゃんと(?)帰省しているのだけど、正月から大雪で大変だった。今日帰るので心配していたのだけど、幸い晴れてくれた。

	今新幹線待ってるところで、新横浜のカオスっぷりを想像して憂鬱な気分。

	品川まで新幹線にすればよかった。鎌倉にはそっちのほうが乗り継ぎ的にも便利だし。

2007-12-28 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 07:19 GR Digital2 [life]:
	買った！

2007-12-26 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:18 NEXT、C3 [perl]:
	僕はわりと好きかも。

2007-12-25 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 02:28 Safari3でExternalInterfaceる際のBK [life] [as3] [bk]:
	as側で

	    ExternalInterface.addCallback("foo"...)

	した場合Safariからは

	    document["swfid"].foo

	でその関数が取れるわけですが、どうもこのオブジェクトをSafariがキャッシュしやがるらしく、二回目以降のロードで

	    typeof(document["swfid"].foo) == "function"

	は**swfがロードされる前**でも真になります。

	上記コードでswfのロードチェックを行っていたためはまりました。。

	解決法として

	    ExternalInterface.addCallback("ready", function():Boolean { return true });

	とかを作り、typeofチェックに加えて、この関数を実際によんでちゃんとtrueが返って来るまで待つようにしたらOKでした。やれやれ。

2007-12-21 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 13:47 こうしたいflymake [emacs]:
	> [Emacs で JavaScript のシンタックスエラーを検出する](http://dev.ariel-networks.com/Members/matsuyama/flymake-for-javascript)

	これ読んですぐ導入したflymake。上記サイトのを少し改造したらperlでもできたのでいまはjsとperlでリアルタイムでシンタックスエラーチェックができている。

	僕はすごくtypoがおおいと思うのだけどこれを導入してからtypoではまることがずいぶん減った。もうないとこまるelispのひとつになってる。

	ちなみにperl版はこんな感じにしている。

	    (require 'flymake)
	    
	    ;; flymake for perl
	    (defvar flymake-perl-err-line-patterns '(("\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]" 2 3 nil 1)))
	    (defconst flymake-allowed-perl-file-name-masks '(("\\.pl$" flymake-perl-init)
	                                                   ("\\.pm$" flymake-perl-init)
	                                                   ("\\.t$" flymake-perl-init)))
	    
	    (defun flymake-perl-init ()
	      (let* ((temp-file (flymake-init-create-temp-buffer-copy
	                         'flymake-create-temp-inplace))
	             (local-file (file-relative-name
	                          temp-file
	                          (file-name-directory buffer-file-name))))
	        (list "perl" (list "-wc" local-file))))
	    
	    (defun flymake-perl-load ()
	      (interactive)
	      (defadvice flymake-post-syntax-check (before flymake-force-check-was-interrupted)
	        (setq flymake-check-was-interrupted t))
	      (ad-activate 'flymake-post-syntax-check)
	      (setq flymake-allowed-file-name-masks (append flymake-allowed-file-name-masks flymake-allowed-perl-file-name-masks))
	      (setq flymake-err-line-patterns flymake-perl-err-line-patterns)
	      (flymake-mode t))
	    
	    (add-hook 'cperl-mode-hook '(lambda () (flymake-perl-load)))

	でも、これだと単純に `perl -wc` しているだけで編集中の lib パスなどを @INC につっこまないため、その lib 以下にあるモジュールを use したりするとそこでエラーになってしまう。

	なので今はモジュールやCatalystアプリの開発するときはいちいち emacs 上で `M-x setenv` してその lib パスを PERL5LIB にセットしている。。ちょうめんどくさい。。

	そんでこれを自動化したいわけだがどうすればいいのかなぁ。

2007-12-20 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 15:13  [catalyst] [dbic]:
	舌足らずすぎた。

	    Model::DBIC:
	      connect_info:
	        - dbi:mysql:table
	        - root
	        - on_connect_do:
	            - SET NAMES utf8
	          cursor_class: DBIx::Class::Cursor::Cached
	      cache_file: __path_to(tmp/query_cache)__

	さっきはこんなconfigで使った場合のコードです。

	* 13:33 DBIx::Class::Cursor::Cachedつかってみた [catalyst] [dbic]:
	すばらしすぎる。もっと早く使えばよかったとおもった。

	`Catalyst::Model::DBIC::Schema` で使う場合はこんな感じでOK。

	    sub new {
	        my $self = shift->NEXT::new(@_);
	    
	        my $cache = Cache::FastMmap->new( share_file => $self->{cache_file} );
	    
	        $self->schema->default_resultset_attributes({
	            cache_object => $cache,
	        });
	    
	        $self;
	    }

	そんで、あとはsearchのattrとして { cache_for => 300 } とかかいてやればそのクエリは300秒キャッシュされる。

	実際にはsearch時ではなくてallとかnextのときにそのクエリをキャッシュしてる。

	ちなみに`default_resultset_attributes`に`cache_for`を含めるとすべてのクエリがキャッシュされる。

	* 01:14 lighttpd+fastcgiで [lighttpd] [perl]:
	fastcgiだけ再起動したい場合に、再起動中にアクセスあるとfastcgiプロセスが上がったあとも500になってしまうことがあるのだけど、みんなどうしてる？

2007-12-19 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 15:49 3008WFP [life]:
	気になる。

	* 14:12 Firefox 3.0 b2 [firefox]:
	入れた。b1からCheck for updatesしてそのままアップデート。

	URLの履歴がタイトルも出るようになった。これはどうだろうなぁ。

	b1のときでも表示にタイトルは出てなかったけどアドレスバーにタイトル文字列いれても履歴にマッチしていたのでまぁでるほうがわかりやすいのかな？

	b1は割と普通に常用していたのだけど、快適。

	tomblooが動かないのと、delicious bookmarksで自分のブックマークとのsyncができないので自分のタグが補完されなくてうざいのくらいが困るところ。

	でもずっとつかってても2系みたいに重くなんないのでもう2には戻れない感じ。

2007-12-17 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 16:43 黒田 [life]:
	アツいなぁ。カッコいい。

	プロ野球でいまどきこんな男はほかにいないんじゃないか。広島がうらやましい。

2007-12-10 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:27 好きを貫く [life]:
	> [「好きを貫く」よりも、もっと気分よく生きる方法 - 分裂勘違い君劇場](http://d.hatena.ne.jp/fromdusktildawn/20071209/1197232409)

	プログラミングがすきって、すげーアバウトだなぁ。ほんとにプログラマだったのかなー。

	僕らプログラマが～が好きなんですよねーっていうときは大体プログラムの中での～がという意味になることが多いと思う。

	プログラマ同士でプログラムがすきなんだよねなどという会話はない。

	> そもそも、人は、その瞬間、瞬間で、いろんなことに興味をもち、
	> いろんなことをやりたくなる、自由で軽やかに発散していく欲望を持っている。

	とかもその通りなのだけど、何でプログラムとその他というくくりなのかｗ

	* 14:24 auto-save-buffers-enhancedでsvkのcoパス更新 [emacs]:
	`~/.svk/config` を起動時にしか見に行かないということで、emacs起動後にcoパスが増えた場合などリロードしたいとおもったら

	    M-: (auto-save-buffers-enhanced-add-svk-checkout-path-into-include-regexps)

	とすればいいらしい。メモメモ。

2007-12-08 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 22:00 Firefox3でPlaggerLDRを無理やり動かした [firefox]:
	試してみたのだけど、`unsafeWindow.API.prototype` が undefined とかいわれて今までのスクリプトは使えなかった。

	`unsafeWindow.API` 自体は見えているようだ。これはどういうことなんだろう？ 詳しい人教えてほしい＞＜

	よくわからないので、API オブジェクトを user.js 内にコピペして再定義してあげてちょっとごにょったら動いた。

	とりあえずcodereposにおいておいた。

	> [http://svn.coderepos.org/share/lang/javascript/userscripts/hackldrapi_fx3.user.js](http://svn.coderepos.org/share/lang/javascript/userscripts/hackldrapi_fx3.user.js)

	設定するところは面倒だったので引き継いでない。自分で about:config とかで設定する必要あり。

2007-12-04 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:28 tombloo [life]:
	最新版はなんかfirebugないと動かない。

	    --- chrome/content/library/00_Components.js.orig        2007-12-03 11:55:00.000000000 +0900
	    +++ chrome/content/library/00_Components.js     2007-12-04 23:22:39.000000000 +0900
	    @@ -50,7 +50,7 @@
	    
	     // ----[Utility]-------------------------------------------------
	     function log(msg){
	    -       if(DEBUG)
	    +       if(getPrefValue('extensions.tombloo.debug'))
	                    typeof(console)!='undefined'? console.log.apply(console, arguments) : ConsoleService.logStringMessage(''+msg);
	     }
	     var debug = log;

	adhocすぎるけどこうするとうごく。

	深追いしようと思ったけどよくわからないのでやめた＞＜

2007-11-14 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:42 タグクラウドモジュール [perl]:
	いろいろあるけどなんでどれもこれもHTML作っちゃうんだろう。もっとシンプルなのほしい。hashで返してくれればいいよ。

	とりあえず `WWW::CloudCreator` つかって

	    $c->stash->{tags} = [
	        map +{
	            name  => $_->[0],
	            level => do { $_->[2] =~ /(\d+)pt/ },
	            link  => $c->uri_for('/tag', $_->[0]),
	            count => $_->[1]
	        },
	        grep {ref} $cloud->gencloud
	    ];

	こんなことして希望通りのものを作ってみてる。こういうのがほしいのだが。

	上記の謎の `grep {ref}` はWWW::CloudCreatorがタグが空な場合空配列かえせばいいのになぜか空文字かえしてくるといううんこな実装なのでそれ対策。

2007-11-07 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:38  [zsh]:
	適当なレンタルサーバー、redhat es4 でたぶんredhatデフォと思われるzshでやってもできるのを確認した。色分けはされなかった。

	* 18:15 treeコマンド [zsh]:
	> [tree コマンドが便利 - IT戦記](http://d.hatena.ne.jp/amachang/20071107/1194419207)

	ほー。

	僕はこんなことしてた。

	    ls *(/)

	とか

	    ls **/

	zsh。デフォのzshだと僕が思っているような挙動にならないかも。

	あんまりつかわないけど。。

	ll (-l) にするとちょっとtreeっぽくなる。

2007-11-06 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 19:11 Prism [life]:
	というのを教えてもらった。

	> [http://labs.mozilla.com/2007/10/prism/](http://labs.mozilla.com/2007/10/prism/)

	昔、

	> [unknownplace.org - 2006/09/15 - bubbles](http://unknownplace.org/memo/2006/09/15#e002)
	>
	> これずっと欲しかったアプリだわぁ。Geckoベースなやつないかな。

	とかいってたけど、まさにこれ。結構いいんじゃないコレ。

2007-11-01 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 12:13 mobirc-irssi が実用に耐えうるようになりましたのでお知らせします [perl] [irssi]:
	この間ちょっと紹介したirssiのプラグインスクリプトとして[mobirc](http://coderepos.org/share/wiki/mobirc)をつかう[mobirc.plスクリプト](http://svn.coderepos.org/share/lang/perl/irssi/scripts/mobirc.pl)ですが、実用に耐えうる段階まできましたので再度紹介しておきます。

	画面サンプルはこんな感じ。(スクリーンショットが取れるPSPでの画面です)

	<a href="http://www.flickr.com/photos/typester/1812523046/" title="Photo Sharing"><img src="http://farm3.static.flickr.com/2081/1812523046_4256fac3f8_o.png" width="480" height="272" alt="psp x mobirc x twirc" /></a>

	素のmobircはIRCクライアント機能と、HTTPD機能を両方持ち、tiarraなどのIRCプロクシにつなぐことで使用するものになっていますが、こちらのirssiプラグインではmobircのIRCクライアント機能はirssiプラグインとして実装していますので、irssiさえあれは利用することができます。

	イメージ的にはirssiがHTTPDを立てている感じになってます。

	またキーワード設定などもirssiのハイライト設定を使用していますので、別途mobirc側でキーワード設定をする必要がないのもちょっとうれしいところです。

	実際の使い方(インストールの仕方)としては

	 * mobirc.plをirssiのスクリプトディレクトリ (~/.irssi/scripts) にコピーor symlink

	 * irssi起動時にmobircのlibパスを環境変数に入れとく

	   `PERL5LIB=/path/to/mobirc/lib irssi`

	   とか。同じ意味なら何でも。
	   
	 * irssi起動したらmobirc.plをロードする ( /script load mobirc )

	   ここで `Can't locate XXX.pm in @INC` とか言われる場合モジュール足りないのでそれいれる。
	
	 * ロードしたら config.yaml 自分用にいじって、そのパスをirssiで設定する

	   `/set mobirc_config_path /path/to/config.yaml`

	 * 設定完了したら /mobirc start すると HTTPD がたちあがる

	 * mobirc started ってirssiコンソールに出てればOK。httpでつないで確認する。

	とかでOK。

	ほか機能としては、

	 * `/mobirc stop` でhttpd停止。
	 * `/mobirc stop` -> `/mobirc start` でyaml読み直してHTTPD再起
	 * `/set mobirc_auto_start on` しておけば次回から `/script load mobirc` するだけでHTTPDたちあがる
	 * `/script load` するのさえめんどいというひとはスクリプトを `~/.irssi/scripts` におくかわりに `~/.irssi/scripts/autorun` におけば irssi 起動時に自動起動する

	という感じ。irssi使いには必須のスクリプトかと思います！

	Enjoy!

2007-10-29 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 01:49 mobirc クールすぎる [perl] [irssi]:
	> [mobirc 0.01 released - TokuLog 改め だまってコードを書けよハゲ](http://d.hatena.ne.jp/tokuhirom/20071028/1193526466)

	すばらしすぎる！

	ソース見ると、IRCクライアント部分とHTTPD部分わかれてるから、IRCクライアント部分を丸々irssiプラグインで置き換えるのも簡単にできそう。

	irssi使うようになってからtiarraみたいなプロクシを使わなくなったので、irssiプラグインだけでkeitairc見たいの作りたかったんだよなー。tokuhirom++

	てわけで日本シリーズ見ながら作ってみた。

	> [mobirc.pl](http://coderepos.org/share/browser/lang/perl/irssi/scripts/mobirc.pl)

	こんなんで一応動く。

	irssiプラグイン内でPOEセッション(POE::Session::Irssi)作って、その中で Mobirc::HTTPD 動かしてる。

	動くことは動くけど、設定決め打ちだし、unloadもできないのでプラグイン再起動イコールirssi再起動で、まだ実用には耐えない。

	とりあえず動くことはわかったのであとは暇なときにでも。

2007-10-26 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 03:32 OSXのFileReference [flash]:
	FlashのFileReferenceでのファイルアップロードはFlashPlayerから直接ファイルがアップロードされるのだけど、WindowsだとIEからリクエストされてるのと同じ感じになって(おそらくWinInet APIをつかっているからだと思う)、アクセス先がBasic認証とかかかっていてもIEの認証がとおっていればちゃんとファイルアップロードできる。

	でも、OSXの場合は完全にFlashPlayerが独立しているらしく、Basic認証がかかっているとファイルアップロードできないようだ＞＜

	それをしらなかったのでykskに無駄に苦労をさせてしまった。もうしわけない！

	とりあえずIP認証で代用した。そんな罠があるとはな。。

2007-10-20 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 15:30 IRCで呼ばれたらIMで通知するirssiスクリプト [perl] [irssi]:
	僕は以前からIRCでキーワード反応した時に [GNU screen のステータスコードに通知を出すようにしている](http://unknownplace.org/memo/2005/12/06#e008 "unknownplace.org - 2005/12/06 - IRC でよばれたら表示") のだけど、ターミナル見てないときがつかないので、またまた [im.kayac.com](http://im.kayac.com/) をつかって、IMに通知する [irssi](http://irssi.org/) のスクリプトを書いてみた。

	> [http://coderepos.org/share/browser/lang/perl/irssi/scripts/hilight2im.pl](http://coderepos.org/share/browser/lang/perl/irssi/scripts/hilight2im.pl)

	使い方は

	    /set im_kayac_com_username ユーザー名

	で自分のim.kayac.comユーザー名をセットするだけ！

	あとはirssiで設定したキーワード(irssiではhilightという)を含んだメッセージを受信するとIMに通知される。

2007-10-18 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 17:22 元気玉メールをIMで通知する [life] [mail] [im]:
	弊社には元気玉という仕組みがあって、詳しくは[代表のブログを参照](http://pc.nikkeibp.co.jp/article/NPC/20061023/251448/ "24： 時々、元気玉が飛び交います：日経パソコンオンライン")、これに誰よりも速く返信するために元気玉という文字がメールの件名に含まれていた場合即座にIMに通知するような仕組みを作った。

	うちで使用しているメール配信ソフトウェアは postfix+maildrop で、IMへの通知には [im.kayac.com](http://im.kayac.com "im.kayac.com - Simple instant message (IM) posting API") のAPIを使用。

	非常に簡単にできた。まずmaildropのフィルタ `~/.mailfilter`:

	    DECODED_SUBJECT = ""
	    if ( /^Subject:\s*(.*)$/ )
	    {
	            MATCH1 = escape($MATCH1)
	            DECODED_SUBJECT = `echo $MATCH1 |/home/typester/bin/subjectdecoder.pl`
	    }
	    
	    if ( $DECODED_SUBJECT =~ /元気玉/ )
	    {
	            cc "|/home/typester/bin/mail2im.pl"
	    }

	二つのスクリプトを読んでます。subjectdecoder は単にMIMEエンコードされてる件名をutf-8にして戻してあげるだけのもので、mail2im.plが実際にIMメッセージを送るスクリプト。以下がその中身。

	subjectdecoder.pl:

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    use Encode;
	    
	    my $subject = do { local $/; <STDIN> };
	    $subject =~ s/\\(.)/$1/gs;
	    
	    print encode('utf-8', decode('MIME-Header', $subject));

	mail2im.pl:

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    my $mail = do { local $/; <STDIN> };
	    
	    use Encode;
	    use Email::MIME;
	    use Mail::Address;
	    
	    my $msg = Email::MIME->new($mail);
	    
	    my $subject = encode('utf-8', $msg->header('Subject'));
	    my ($from)  = Mail::Address->parse( $msg->header('From') );
	    
	    exit unless $subject && $from;
	    
	    use LWP::UserAgent;
	    use HTTP::Request::Common;
	    
	    my $res = LWP::UserAgent->new->request(
	        POST "http://im.kayac.com/api/post/typester",
	        [ message => "[E-Mail] $subject (@{[$from->address]})" ]
	    );

	件名デコードしないとmaildropで日本語の件名のマッチングができないのが面倒だけど(これってなんとかならんのかな)、それでも簡単にできた！ im.kayac.com++ (自画自賛

	* 13:32 こうだったらいいのに auto-save-buffers [emacs]:
	開いてるファイルが svn(k) の copath だったらON、それ以外だったらOFFって自動でなるといいのになー。

	今は

	    (run-with-idle-timer 0.5 t 'auto-save-buffers "^/home/typester/dev/" "^$")

	とかしてるけれど、その領域でもたまにsvn管理じゃないファイルつかったりするし、それで自動保存されると困るし。

2007-10-17 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 10:42 bm.el [emacs]:

	    (global-set-key "\M-1" 'bm-toggle)
	    (global-set-key "\M-3" 'bm-next)
	    (global-set-key "\M-2" 'bm-previous)

	とかで設定してるけどまったく使ってない。

2007-10-12 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 08:07 Module::Install [life]:
	> [Clouder::Blogger: Module::Installを使ったプロジェクトのincディレクトリについて](http://clouder.jp/yoshiki/mt/archives/001006.html)
	>
	> CodeReposとかみると、あんまりModule::Installを使ってる人がいないので、あんまりModule::Installって使われてないのかな？

	えーー。

	    $ grep 'inc::Module::Install' lang/perl/**/Makefile.PL
	    lang/perl/Gopper/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/JSONRPC-Transport-TCP/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/KGopherd/Makefile.PL:use inc::Module::Install;
	    lang/perl/Mozilla-Screenshot/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/Mozilla-UserPreferences/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/POE-Component-Server-JSONRPC/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/PlPy/trunk/PlPy/Makefile.PL:use inc::Module::Install;
	    lang/perl/Senna-Storage/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/Text-Nyarlax/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/URI-KeywordExtract/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/WWW-LivedoorPICS/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/WWW-Various-Scrapers/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/WebService-Coneco/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/WebService-Veoh/trunk/Makefile.PL:use inc::Module::Install;
	    lang/perl/WebService-YouTube/tags/WebService-YouTube-1.0.2/Makefile.PL:use inc::Module::Install;
	    lang/perl/WebService-YouTube/tags/WebService-YouTube-v1.0.1/Makefile.PL:use inc::Module::Install;
	    lang/perl/WebService-YouTube/trunk/Makefile.PL:use inc::Module::Install;

	けっこうあるじゃん！

	Module::Starterはあんまりつかってるひといないかもね。

	miyagawaさんの[pmsetup](http://svn.bulknews.net/repos/public/misc/pmsetup)がシンプルでいい感じです。

2007-10-05 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:46 できた [emacs]:

	    (remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)

	 * ref: [hiChangeLog / 2007-04](http://aki.issp.u-tokyo.ac.jp/itoh/hiChangeLog/html/2007-04.html#2007-04-09-1)

	* 16:19 emacsclient で開いたバッファを閉じるときに [life] [emacs]:
	> Buffer `svk-commitvP9pW.tmp' still has clients; kill it? (yes or no)

	などといわれるのをなくしたいのだが、どうすればいいのか！ 強制yesでいいんだけど。

	それとも `C-x #` 的なもので保存せずに閉じるものあるのかな。

2007-10-03 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:14 ustreamのflvの音声変換 [ustream]:
	[nelly2pcm](http://code.google.com/p/nelly2pcm/) + [sox](http://sox.sf.net/) でいけました！

	    nelly2pcm test.flv | sox -t raw -c 1 -2 -r 11000 -s - test.wav

	\#plagger-ja++

	* 19:18 ustreamの録画flvデータのURLを得るスクリプト [perl] [ustream]:
	> [Clouder::Blogger: ustreamの録画した動画のflvをダウンロードする方法](http://clouder.jp/yoshiki/mt/archives/000996.html)
	> 
	> これは想像ですが、swf内でhttp://gw.ustream.tv/gateway.phpをPOSTしているのはわかっているので、そこで取得しているのか、もしくはJavaScriptでAjaxをつかってどこかから取得しているのか、といったところだと思いますが、いずれにしてももう少し解析が必要です。

	とあるのをみて、gateway.php を調べてみました。

	これはFlashのAMFのRPCサーバーで、録画されたものを再生するときには `client.watch_video` という関数を呼んでいるようです。

	as3で書くと

	    package {
	        import flash.display.*;
	        import flash.net.*;
	    
	        public class gw extends Sprite {
	            public function gw() {
	                stage.align = StageAlign.TOP_LEFT;
	                stage.scaleMode = StageScaleMode.NO_SCALE;
	    
	                var cid:String = stage.loaderInfo.parameters["cid"];
	                if (cid) {
	                    var nc:NetConnection = new NetConnection();
	                    nc.objectEncoding = ObjectEncoding.AMF0;
	                    nc.connect("http://gw.ustream.tv/gateway.php");
	                    nc.call("client.watch_video", new Responder(gatewayHandler), { cid: cid });
	                }
	            }
	    
	            private function gatewayHandler(res:Object):void {
	                for (var i:String in res) {
	                    log(i+": "+res[i]);
	                }
	            }
	        }
	    }

	こんな感じになります。cid は再生URL `http://ustream.tv/recorded/RLdKCmCouWOpkkEznZH4QA` とかの `RLdKCmCouWOpkkEznZH4QA` 部分です。

	これをperlで呼ぶにはどうしたらいいか！ ということでがんばってみました。

	CPANにこのAPIのサーバー側の実装 (AMF::Perl) があったのでそれを適当に読んだり、実際API呼んでるときのパケットと見比べたりしつつして以下のようにすればできました。

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    use AMF::Perl;
	    use LWP::UserAgent;
	    
	    my $cid = shift || '5Fq8cQp9eHsEEknbQ22OOZniqS2xUiuz';
	    
	    my $amf = AMF::Perl::Util::Object->new;
	    $amf->addBody('client.watch_video', '/1', { cid => $cid });
	    
	    my $outputstream = AMF::Perl::IO::OutputStream->new;
	    my $serializer = AMF::Perl::IO::Serializer->new($outputstream, 'utf-8');
	    $serializer->serialize($amf);
	    
	    my $amfdata = $outputstream->flush;
	    
	    $amfdata =~ s/\xff\xff\xff\xff/\0\0\0\x31\x0a\0\0\0\x01/;
	    
	    my $ua = LWP::UserAgent->new;
	    
	    my $req = HTTP::Request->new( POST => 'http://gw.ustream.tv/gateway.php' );
	    $req->content( $output );
	    $req->content_type('application/x-amf');
	    $req->content_length( length $amfdata );
	    
	    my $res = $ua->request($req);
	    
	    my $deserializer = AMF::Perl::IO::Deserializer->new(AMF::Perl::IO::InputStream->new($res->content), 'utf-8');
	    
	    use YAML;
	    print Dump $deserializer->getObject->getBodyAt(0)->{value};

	これで

	    ---
	    err_desc: ok
	    server_id: 9
	    success: 1
	    user_id: 32983
	    video_length: 366.207
	    video_name: broadcast/35957/1191239239348
	    video_type: broadcast

	とかいう出力がでます。これから

	    http://flash{server_id}.ustream.tv:18881/{video_name}.flv

	というflvのURLが作れます。

	perlソースの途中の謎の置換 `s/\xff\xff\xff\xff/\0\0\0\x31\x0a\0\0\0\x01/;` してて、これはなにかよくわかってません。ただ実際のパケットと見比べて違う部分置換してみたらいけたという代物です。

	あとこれで得られるflvデータの音声部分が謎のcodecで変換できない！ だれかこれをmp3とかにする方法ご存知のかたいましたらぜひともお知らせください！

2007-10-02 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 09:19 やっぱり [life]:
	miyagawaさんと桜井侑斗は似ている説。

	> [http://www.tv-asahi.co.jp/den-o/](http://www.tv-asahi.co.jp/den-o/)

	どうか。

	* 07:17 Shibuya.pm tech talk #8 [life] [shibuya.pm]:
	Flash with perlとかいうタイトルでLTしてきました。with perl の部分ありませんでしたがｗ

	スライドはここにおいておきます。

	> [http://unknownplace.org/slides/shibuyapm-8/start.html](http://unknownplace.org/slides/shibuyapm-8/start.html)

	まとめでいうのわすれたのだけど、ここで紹介したファイルアップロード、クロスドメイン通信、XMLSocketなんかを全部jsから使えるってのがアツイです。みんなやってみて！

	あと、PSPでスライド操作するやつもcodereposに上げました。

	> [http://coderepos.org/share/browser/lang/perl/misc/typester-shibuyapm-8-psp](http://coderepos.org/share/browser/lang/perl/misc/typester-shibuyapm-8-psp)

	時間なかったのでPSP側の画面真っ白なんだけど、時間表示したり、IRCチャット表示したりとか、作りこんだら楽しそうかも。

2007-09-27 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 00:16  [life]:
	danさんのところで

	> [404 Blog Not Found:プログラムの楽しさを子供に教えるべきか?](http://blog.livedoor.jp/dankogai/archives/50912230.html)
	>
	> 世の中には、「この時期に習っておかないと一生自分のものにならない」というものもあれば、「いつはじめても、モノにできる」というものもある。「流暢な外国語」は前者だが、プログラミングは明らかに後者。

	をとかいうのを読んで、あー、ぼくも小さいころから楽器を習わされていて、たしかに大人になってからはじめたら到底今のレベルにはたどり着けないなーとおもった。親に感謝しなければ。

	しかしもう5年くらいまったくひいていない。だめすぎる。。＞＜

	つわけで弦を買った。

	<a href="http://www.flickr.com/photos/typester/1443456112/" title="Photo Sharing"><img src="http://farm2.static.flickr.com/1365/1443456112_e7233b5000.jpg" width="500" height="333" alt="fiddle strings" /></a>

	明日からちゃんと毎日ひく所存です。

2007-09-18 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 08:29 CCFF7 [life] [game]:
	週末会社に送られてきているのを発見して、ちょいと拝借してやってみてたのだけど、意外と面白くて連休でクリアしてしまった。

	アクションなのだけど難易度的にはすごく簡単で、たいていの敵が初回で、もしくは1,2回やりなおせばクリアできる。約12時間くらいで終わってしまった。ミッションはまったくやってないけど。

	強くてニューゲーム的なことができるみたいだけど、ストーリー悲しすぎるのでもう一度やるきにはならない。。。

	ほんとうにかなしいなぁ。書いてたら思い出してきた。＞＜

	FF7好きだった人はやるべきゲームかと。

2007-09-17 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:32 コミュニケーション能力 [life]:
	意外と思う人もいるかもしれないけど、技術者には重要だよね。特にオープンソースなところでは。

	codereposもそうだけど。意見とか、わからないこととか、ひとりでうだうだいってないでIRCにきて他のコミッターと話をすればいい。

	そゆことがCatalystやDBICのコミュニティでできないのが悔しい。言葉の壁が思ったより厚くていまだに超えられない。IRCだとなにいってるかわかってもこっちのいいたいことがうまくいえない。考えてる間に話し進むし。ムキィ。

2007-09-13 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:08 会社名、所属明らかにしてブログ書くこと [life]:
	個人的なブログで、個人的な意見をかいているとしても、好き勝手書いてもいいとは思えないよ。

	これって、会社を自分の会社だって思えているかどうかだと思うのだけど。大企業になるとそうは思えなくなるのかもしれないなぁ。

	* 18:22  [firefox]:

	    @-moz-document url-prefix("http://coderepos.org/share/browser") {
	      table.code th.lineno {
	        width: 7em !important;
	      }
	    }

	100行目以降がはてなスターのおかげで行数あいてしまうのでちょいカラムひろげてみた。どするのがいいのか。

	* 16:48 CatalystアプリのスタータースクリプトをCodeReposに [perl] [catalyst]:
	あげた。

	もともと使ってるのはpmsetupを改造したので雛形つくるだけだったんだけど、毎回DBとか使うわけでもないので、ついでにそこを選べるように改造した。

	ほぼ僕専用ルールにのっとった雛形を作成しますので他の方はまったく使えないと思いますが、参考にはなるかもしれません。

	他の方のも見てみたいのでぜひとも[coderepos](http://coderepos.org/share/)で共有しましょう！

	あ、Catalyst自分規約カンファレンス、とかおもしろいかもしれない。

2007-09-11 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 18:05 DSAS開発者の部屋に絶望した [life]:
	フィードが前文配信じゃなくなってるYO!

	ラボ系ブログ(といっていいのか)では多分一番熱心に購読しているのでよけい絶望した。

2007-09-10 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 18:51 HTML::TreeBuilder::XPath + WWW::Mechanize なスクリプトを永続化させようとしてはまった [perl]:
	`WWW::Mechanize` でコンテンツとってきて `TreeBuilder::XPath` で解析するようなのを今まで単機能スクリプトなどでは便利に使っていたのだけど、それを永続的なプロセスで使おうとしたらメモリ使いまくってとんでもないことになったという話。

	まずどんどんメモリが増えていくのでタイミングよく読んでいた[jrockwayの記事](http://blog.jrock.us/articles/Plugging%20a%20leaky%20whale.pod "Plugging a leaky whale")などを参考に、

	    perl -MDevel::Leak::Object=GLOBAL_bless

	付きでスクリプトを実行してみる。

	少しソースをいじってまずはループを一回で止めるようにしたときの出力

	    Tracked objects by class:
	    Config                                   1
	    DBI                                      1
	    DBI::var                                 5
	    DBIx::Class::ResultSource::Table         1
	    DateTime::Duration                       2
	    DateTime::Format::Builder::Parser        3
	    DateTime::Format::Builder::Parser::Regex 10
	    DateTime::Infinite::Future               1
	    DateTime::Infinite::Past                 1
	    DateTime::Locale::en                     1
	    DateTime::TimeZone::Asia::Tokyo          1
	    DateTime::TimeZone::Floating             2
	    Encode::Internal                         1
	    Encode::utf8                             2
	    Errno                                    1
	    FileHandle                               3
	    HTML::Element                            1799
	    HTML::Element::_travsignal               5
	    HTML::TreeBuilder::XPath                 1
	    XML::XPathEngine                         1
	    XML::XPathEngine::Expr                   19
	    XML::XPathEngine::Function               6
	    XML::XPathEngine::Literal                9
	    XML::XPathEngine::LocationPath           4
	    XML::XPathEngine::Root                   1
	    XML::XPathEngine::Step                   9
	    utf8                                     2

	つぎ、少しループしてから止めたときの出力

	    Tracked objects by class:
	    Config                                   1
	    DBI                                      1
	    DBI::var                                 5
	    DBIx::Class::ResultSource::Table         1
	    DateTime::Duration                       2
	    DateTime::Format::Builder::Parser        3
	    DateTime::Format::Builder::Parser::Regex 10
	    DateTime::Infinite::Future               1
	    DateTime::Infinite::Past                 1
	    DateTime::Locale::en                     1
	    DateTime::TimeZone::Asia::Tokyo          1
	    DateTime::TimeZone::Floating             2
	    Encode::Internal                         1
	    Encode::utf8                             2
	    Errno                                    1
	    FileHandle                               3
	    HTML::Element                            7378
	    HTML::Element::_travsignal               5
	    HTML::TreeBuilder::XPath                 4
	    XML::XPathEngine                         1
	    XML::XPathEngine::Expr                   19
	    XML::XPathEngine::Function               6
	    XML::XPathEngine::Literal                9
	    XML::XPathEngine::LocationPath           4
	    XML::XPathEngine::Root                   1
	    XML::XPathEngine::Step                   9
	    utf8                                     2

	となって、TreeBuilderがなんかやばいことになってるくさい。

	で、マニュアル読んでたら `$tree->delete` やれよ！って書いてあった。

	TreeBuilderは明示的にdeleteメソッド呼ばないと綺麗になくならないらしい。たぶん常識なのだが、いままでやってなかったわぁ。。

	これやったらずいぶんメモリ増えなくなった、でもまだなんか少しずつ増える。でも、Devel::Leak::Objectの出力は処理数あげてもかわらない。

	あとはmechがあやしいなぁとおもって毎回newするようにしたらメモリ増えなくなったのであれれとおもってマニュアル見たら、デフォルトではヒストリを無限に記録していくらしい。

	なので

	    WWW::Mechanize->new( stack_depth => 1 )

	とかしたら大丈夫になった。これでとりあえず大丈夫かな。

	まぁ結論としては、マニュアル読めということです。あと Devel::Leak::Object は簡単で便利。

2007-09-05 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 12:16 サーバーシグネチャ [life]:
	昨日発見したんだけど [http://www.torrentz.com/](http://www.torrentz.com/) は

	> Server: apache ;)

	とかなってる。こういうの好き。

	実際はlighttpdだと思う。

2007-09-04 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 13:43 携帯にSMSで [life]:
	こんなのがとどいた

	> Subject: 株)ＯＲＳからのお知らせ
	> 
	> (株)オンラインサービス担当 仲田と申します。
	> この度、現在お客様ご使用中の携帯端末より、
	> 認可ネットワーク認証事業者センターを介入し、発信者端末電子名義認証し、以前ご登録いただいた、「総合情報サイト」から、無料期間中に退会処理がされてない為
	> に、登録料金が発生し、現状未払いとなった状態のまま長期放置が続いておりますが、本通達より
	> 再度これ以上放置が続きますと、利用規約に伴い、住民票取得、お客様の身辺調査了承後後日 回収機関により、調査費
	> 回収費用含め、ご自宅、お勤め先、第三者への満額請求と代わります。
	> 
	> 現在調査保留中の額面にて、処理をご希望であれば、早期に精算 退会処理データ抹消手続きをお願いします。
	> 早急に、 03-3526-3618
	> 担当　仲田迄 受付時間 平日 09:00〜18:00迄
	> 
	> 尚 ご連絡なき場合 手続き開始ご了承とさせて頂きます。

	総合情報サイトて...ｗ ちゃんとサービス名書かなきゃ釣れようがないきがするけど。

	これが架空請求ってやつか。はじめてきたなぁ。

	てか、株)オンラインサービスでORSって。。。

	差し出し人電話番号は 08030849942

2007-09-02 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 12:55 ブラウザサイズ [life]:
	この間までsubtechグループのトップにistブログパーツがはられてて、みんながうぜぇメニュー押せねぇ！とかゆってたのを聞いて「ハァ？ドンだけブラウザサイズ小さいんだよ」とか思ったりしてた。

	とか思ってたたりしたんだけれども、みんなはもしかして画面サイズが大きくなっても今までどおりのブラウザサイズをつかっているんだろうか。僕はディスプレイが大きくなれば大きくなっただけブラウザサイズを広げてしまってるなぁ。

2007-08-30 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:32 共有repos! [life]:
	昨日の件ですが、yappoさんが作ってくれました。

	> [http://coderepos.org/share](http://coderepos.org/share)

	最高！最高すぎます。

2007-08-29 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:37 個人レポジトリを共有しよう！ [life] [programming]:
	昨日twitterでつぶやいていたのだけど、

	みんながそれぞれ作って公開してる公開レポジトリを一緒くたにしちゃいたい。参加してる全員がどのファイルもみたり変更したりできるような。

	パッチ送られてくる代わりに「後で見とくからコミットしといて」とかいえたりとか、つくりかけで放置したもので他の人が興味もったら続き作ってもらうとか、メンテするのめんどくなったのだれかにやってもらうとか、突発的に誰かと一緒にプロジェクト始めたりとか、できる！

	で、それやりたくてとりあえずgoogle codeにレポジトリ作ろうとしたんだけど、あそこはなんかレポジトリ全体でライセンスをひとつ決めないといけないようなのでだめだ。

	誰か信用できる人ホスティングしてくれないかなー。shibuya.plの人とか、yappoさんとか。

2007-08-23 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 16:52 htpasswdだけインストールしたい！ [debian]:
	と思ったのだけど、htpasswdとかはapache2-utilsってパッケージにわけられていてそれだけ別にインストールできるようで、一瞬で解決。

	    $ sudo dpkg -L apache2-utils
	    /.
	    /usr
	    /usr/bin
	    /usr/bin/dbmmanage
	    /usr/bin/htdbm
	    /usr/bin/htdigest
	    /usr/bin/htpasswd
	    /usr/sbin
	    /usr/sbin/ab
	    /usr/sbin/checkgid
	    /usr/sbin/logresolve
	    /usr/sbin/rotatelogs
	    /usr/sbin/htcacheclean
	    /usr/sbin/check_forensic
	    /usr/sbin/split-logfile
	    /usr/share
	    /usr/share/man
	    /usr/share/man/man1
	    /usr/share/man/man1/htdbm.1.gz
	    /usr/share/man/man1/htpasswd.1.gz
	    /usr/share/man/man1/dbmmanage.1.gz
	    /usr/share/man/man1/htdigest.1.gz
	    /usr/share/man/man8
	    /usr/share/man/man8/rotatelogs.8.gz
	    /usr/share/man/man8/htcacheclean.8.gz
	    /usr/share/man/man8/checkgid.8.gz
	    /usr/share/man/man8/ab.8.gz
	    /usr/share/man/man8/logresolve.8.gz
	    /usr/share/man/man8/check_forensic.8.gz
	    /usr/share/doc
	    /usr/share/doc/apache2-utils
	    /usr/share/doc/apache2-utils/copyright
	    /usr/share/doc/apache2-utils/NEWS.Debian.gz
	    /usr/share/doc/apache2-utils/changelog.gz
	    /usr/share/doc/apache2-utils/changelog.Debian.gz

2007-08-22 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 17:55 Class::Component [perl]:
	> [subtech - ｓｅｘさんのブログ - Class::Component::Plugin の init()](http://subtech.g.hatena.ne.jp/clouder/20070822/1187749861)

	こういうのは経験的にweakenったほうがいい希ガス。なんともいえませんが。

2007-08-20 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 08:21 OIOI! [life]:
	> [hide-k.net#blog: 鎌倉散歩録](http://blog.hide-k.net/archives/2007/08/post_208.php)

	カヤックをスルーするとは！

	鎌倉へお越しの際はぜひぜひカヤックにも遊びにいらしてください。

2007-08-17 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 11:39 lv の alt screen [linux]:
	`lv` 便利なんだけど、alternate screen で動作するのがちょっとなぁ。

	終了すると今まで表示してたの消えちゃうのが嫌。これってなんか制限できないのかなー。オプションみても特にないようだ。

	* 11:20 風邪引いた [life]:
	オレとしたことが、油断した。

	くそう、なさけない。

2007-08-13 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 18:19 スパム [life]:
	ちょっと前から、本文なくて、添付ファイルだけのスパムが結構くるのだけど、うまくはじけなくてうざい。

	spamassassinのベイズ学習はきかないっぽいから手動でルール作ろうと思ったけど、なんか一貫性ないし。charsetやヘッダ情報とかもバラバラなんだよなー。

	maildropとかで飛ばして自前スクリプトでフィルタリングかね。本文なくて件名に日本語入ってなかったらはじくとか。スクリプト書くのがだるぃ。

2007-08-02 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 11:25 開発環境 [programming]:
	> [ANOTHER PIECES - Windows x VMware = 開発環境 Ubuntu Linux : Hasta Pronto.org](http://d.hatena.ne.jp/xcezx/20070802/1186016936)

	開発環境にGUIが必要かどうかという話。

	僕らみたいなターミナル上で開発するような技術者の場合、開発環境として主に以下の3つがあると思う。というか僕が持っている環境なのだけどｗ

	 1. Windows + VMWare(colinux)上のLinux
	 2. OSX
	 3. Linux

	で、開発環境としてだけかんがえると3がベスト。

	ターミナルは軽いし、svkでコンフリクトでたとき m おすと meld とかのグラフィカルなマージツールをシームレスに立ち上げられたり、まぁとにかくshellからGUIアプリとも連動できるのは良い。

	それならOSXでいいじゃんと思うかもしれないけど、僕の評価ではこの3つの中でOSXは最低。

	なぜならば良いターミナルアプリがないから。

	GUIのemacs使えば良いのかもなーと思いますが、、まぁあくまでターミナルで作業する派としての評価です。

	でもLinuxは開発環境としてはすばらしいけれど、常用するには足りないものが多すぎる。

	で結局Windows+VMWareの環境になってしまうわけ。

	VMWareにGUIをいれるかどうかというのは僕はやっていないけどマシンパワーがあるならありかなと。開発時はVMWareをフルスクリーンにしちゃえば3と同じ状況にできるし。

	OSXでもParallelsとかにLinuxいれてとかってのも。。なんか違う気がするけど。

	ただまぁLinuxのGUIって満足いく状態にするまでのカスタマイズがだるいからなぁ。

	僕は[こんな感じ](http://www.flickr.com/photo_zoom.gne?id=139726931&size=o)で使ってる。WMはpekwm、ターミナルはmlterm。pekwmはキー操作でWindow操作できまくれるのはかなり快適。こういうとんがったWMがあるのもLinuxの利点かな。

2007-08-01 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 14:02 UPS買った。 [life]:
	こないだの落雷で停電して、自宅サーバーの一台がたちあがらなくなって(実際はBIOS設定ミスってただけだったのだけど)こまりまくったので UPS 買った。

	APC の ES500 とかいうやつ。

	とりあえずどんなもんかお試し中。

	会社で使ってるメインPC、Macmini、24インチ液晶(2407WEP)つないだところ、管理ツールではバッテリーランタイム21分とでた。へー、結構使えるかも。

2007-07-31 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 16:30 Twircにustreamチャット連携機能をつけてみた [twitter]:
	[IM <-> IRC な Twitter クライアント Twirc](http://unknownplace.org/memo/2007/04/15#e001) に ustream のチャット連携機能をつけてみた。

	yaml のコメントアウトはずして適当に修正すれば、自分の twitter の更新が ustream チャットにもポストされるという感じ。

	Twirc 自体は非常に安定していて、数ヶ月連続稼動させても余裕で動くのだけど、この新機能はまだ適当なので、ustreamとの接続が切れたりするとそこでとまっちゃったりとか、なんかいろいろおかしいかもしれない。

	あとchannel適当に設定すると人のチャンネルにtwitterの更新流せてしまったりとかもするので気をつけて。

2007-07-24 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 11:08 夢 [life]:
	なぜかkentaroさんと二人で渡米する夢を見た。

	行きの飛行機の中で二人で英会話の練習。

	僕はコーヒーを頼んだらコーラが出てきて、kentaroさんはオレンジジュースを頼んだらトマトジュースが出てきていた。

2007-07-22 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 21:05 ustream hacks #3 publish movie from your own swf! [as3]:
	次、配信のほう。こいつはすこしやっかいだった。

	まず接続は

	    nc.connect("rtmp://209.85.64.39/ustvVideo/{chid}", { id: "{userid}", sessionid: "{sessionid}", mode: "broadcast", channel: "{chid}", version: "v2.131b" });

	とかいう感じ。

	chid, sessionidはどちらも配信ページのswfソース部分にある。useridは配信ページを開いたときに `http://www.ustream.tv/service.php` とかにPOSTしててその結果に入ってる。

	そんで、

	    ns.publish("live_channel_{chid}", "live");

	すれば配信される。はずなのだけど、されない。FMSへの配信自体はうまくいっていて、#2でやった自前再生swfでは再生されるのだけど、ustreamのchannelページではoff airのままだ。

	FMSのほうに配信開始用の関数がある模様。それもパケット見てたら見つけることができた。

	publish後、

	    nc.call("channelStatus", new Responder(function ():void { }), "{chid}", "live");

	とかいれたら、channelページでも見えるようになった。これでいいのかしらないけど。

	ただこれだと、一定時間で接続が切られてしまう。まだなにかあるっぽい。

	どうもFMS側からcallBackという名前の関数をよんできていて、それをうけてpongというFMS関数をよぶようになっているようだ。これをしないときられちゃうわけだなきっと。

	ので、

	    nc.client = this;

	とかして、thisのクラス内に

	    public function callBack():void {
	        nc.call("pong", new Responder(function ():void {}));
	    }

	とかしたら大丈夫になった。OKOK。

	これでとりあえず配信もできるようになった。

	あと他に `callBack()` とおなじように `viewersNum(num:Number)` とか定義しておくと、接続人数がかわるたびに呼んでくれるようだ。これで今何人とか取れると。

	* 20:45 ustream hacks #2 play movie from your own swf! [as3]:
	[にぽたん](http://blog.livedoor.jp/nipotan/archives/50733767.html "Ustream Hacks - にぽたん研究所")に続き僕も解析してみました！

	ustreamのFMSを自前のswfから使う方法です。#2再生、#3配信、と続きます。

	再生は普通にFMSで動画再生するのとほとんど一緒です。URLとか引数とかに気をつけるだけ。その部分だけ書きます。

	    nc.connect("rtmp://209.85.64.39/ustvVideo/{chid}", { mode: "channel", channel: "{chid}", sessionid: "{sessionid}" });

	して、

	    ns.play("live_channel_{chid}");

	以上！

	`{sessionid}` はプレイヤーのSWFObject部分にありますが、chidは少し見つけにくい。`new videoRate('{chid}','XXXX','channel');` とかのやつ。

2007-07-18 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 12:06 aptitude upgrade [debian]:
	しようとしたら

	> W: The "upgrade" command is deprecated; use "safe-upgrade" instead.

	とかいわれた。お、お。

	man みてみると

	 * upgrade -> safe-upgrade
	 * dist-upgrade -> full-upgrade

	となったのかな。

2007-07-17 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 17:14 ps の日付パース [perl] [linux]:
	`ps` の出力をパースしたかったんだけど、日付部分めんどいなと思いきや `Date::Manip` 使ったら一発だった。覚えててよかった！

	[30boxes.pl](http://bulknews.typepad.com/blog/2006/09/30boxespl_how_i.html) とかで使われてるやつ。

2007-07-12 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 16:51 そろそろはてグのスタイル何とかするかと思って環境作ってみた [life]:
	はてグで書いてるモンハン日記のスタイルがデフォルトのままであれなので変えようと思ってちょっとCSSいじろうとしてみたら `@import` がつかえなくてズーンってなったのでローカルプロクシの環境をなんとかすることにした。

	普段の開発では、ローカルにすべて環境作れるものばかりなのであまり使わないのだけど、前につくったperl製のプロクシの性能が悪すぎるのもあり、なんとかしたいとおもってた。

	今回は [fiddler2](http://www.fiddler2.com/fiddler2/) をためした。

	起動して Rules -> Customize Rules... するとエディタが立ち上がるのでそこのうえのほうに

	    public static RulesOption("Replace Hatena Group CSS")
	    var m_HATENAGROUPCSS: boolean = false;

	とかかく、つぎに、`static function OnBeforeRequest(oSession: Session)` の中に

	    if ( m_HATENAGROUPCSS && oSession.hostname.match(/\w+\.g\.hatena\.ne\.jp/) && oSession.PathAndQuery.match(/^\/headerstyle/) ) {
	        oSession.hostname = 'static.murase.dev';
	        oSession.PathAndQuery = '/mh/mh.css';
	    }

	とかいれる。

	これで、RuleメニューにReplace Hatena Group CSSとか言うのが追加されるので、それONにするとCSSが自分のにかわるという。

	結構お手軽でいいね。パフォーマンスが自前のやつより全然いいのが何よりいい。

2007-07-11 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 09:57 Webcam買いました [life]:
	手元ライブはじめます！

	<embed width="320" height="261" src="http://www.ustream.tv/grvNDbE1,e9eBm2tXSSBsw.usc" type="application/x-shockwave-flash" wmode="transparent" />

	どういう形で置こうかは検討中。twitterと組み合すと面白そうではあるけど。

2007-06-29 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:17  [screen]:
	あれ、

	<a href="http://www.flickr.com/photos/typester/656240881/" title="Photo Sharing"><img src="http://farm2.static.flickr.com/1425/656240881_e90c8f89ff_o.png" width="300" height="100" alt="screen" /></a>

	hardstatus って 15 まで行くと折り返すのか。

	これって何か設定あるのかな？ 10 くらいにしたい。

2007-06-28 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 20:15 Teach them to fish, don't feed them [life]:
	とかDBICのチャンネルで言っててへーと思った。

	むずかしいね。

2007-06-19 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 14:00 We're hiring! [kayac]:
	<a href="http://www.kayac.com/recruit/recruit_beyes.php" title="BEYESスタッフ募集"><img src="http://unknownplace.org/tmp/beyes_recruit.jpg" width="468" height="60" alt="BEYESスタッフ募集" /></a>

	現在 KAYAC では [BEYES](http://beyes.jp/) の製作スタッフを募集しています。興味ある方は是非！

2007-06-15 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 19:18 拡張で描画が遅くなる [firefox]:
	> [300clp - Firefoxを遅くさせる最大原因はアドオン](http://d.hatena.ne.jp/independent007/20070612)

	これみて開発時しかつかわない拡張いろいろ無効にしてみたところすげー速くなった。うは。

	でも開発時は使いたいから、プリセット設定してON/OFF変えて再起動とかしてくれる拡張がほしい！！

	開発用にあたらしくFirefoxのプロフィール作ってわけてもいいけど、普段使ってなじんでいるFirefox設定で開発しないと効率悪いしUIチェックとか何とか微妙になる気がするし。

	あと、上記URLの最後にIPv6を無効にするの意味ないって書いてあるけどおなじURLを表示するテストとかDNS最初しかひかないでしょ。それじゃわからないくない？

	* 17:07 IP認証とBasic認証を同時に使うCatalystコードサンプル [perl] [catalyst]:
	Catalystは `Authentication::Credential::*` プラグインを複数使うことにより、複数の認証方式に対応できる。

	IP認証などのような、Credプラグインが提供されていないものも即席でCredインタフェースにそったモジュールを作ることで簡単に認証方法を追加することができる。

	MyApp.pm はこんな感じ

	    package MyApp;
	    
	    use strict;
	    use warnings;
	    
	    use Catalyst::Runtime '5.70';
	    use Catalyst qw/
	        ConfigLoader
	    
	        Authentication
	        Authentication::Credential::HTTP
	        +MyApp::Credential::IP
	        Authentication::Store::DBIC
	        /;
	    
	    our $VERSION = '0.01';
	    
	    __PACKAGE__->setup;

	`Cred::HTTP` が Basic 認証用のモジュール。`+MyApp::Credential::IP` がIP認証用のオリジナルモジュール。

	この `MyApp::Credential::IP` のコードはこんな感じ。

	    package MyApp::Credential::IP;
	    use strict;
	    use warnings;
	    use base qw/Catalyst::Plugin::Authentication::Credential::Password/;
	    
	    sub authenticate_from_address {
	        my $c = shift;
	    
	        my $ip = $c->model('DBIC::UserIp')->find({ ip => $c->req->address }, { prefetch => 'user' })
	            or return;
	        my $user = $c->get_user( $ip->user->username )
	            or return;
	    
	        $c->set_authenticated($user);
	    
	        1;
	    }
	    
	    1;

	こんな短いコードで認証増やせるの。なかなか便利。

	で、実際に利用するのは以下のように、Root Controller の auto アクションに

	    sub auto :Private {
	        my ($self, $c) = @_;
	    
	        # basic auth
	        $c->authenticate_http and return 1;
	    
	        # ip auth
	        $c->authenticate_from_address and return 1;
	    
	        # return basic auth response when no auth success
	        $c->authorization_required_response( realm => 'Require Authentication' );
	        return;
	    }

	などとする。

	全体に認証かけたいときはルートコントローラの auto に、コントローラ個別に指定したいときは、上記コードを埋め込んだ認証用の親コントローラクラスつくって認証必要なコントローラはそれを継承する。

	パスごとにやりたいときは `Authentication::ACL` ってのがあるけど僕は使っていない。

2007-06-11 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 19:00 というわけで [life]:
	> [モンスターハンター - typesterの日記](http://monsterhunter.g.hatena.ne.jp/typester/)

	はじめました。記法は使いながら覚える。

	MHP2とかグループキーワードなはずなのにリンクされないのはなぜなんだぜ？

	* 07:21 はてなモンハングループ [life]:
	> [モンスターハンター](http://monsterhunter.g.hatena.ne.jp/)

	参加申請してみた。でも、はてな記法になじめないからどうだろうな。

	ケンタッキー食えないのにたまに挑戦してみたくなって食べてみるけどやっぱりだめだった、的な感じに似ている。

2007-06-08 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:10 Sansa Express [life]:
	<a href="http://www.flickr.com/photos/typester/535600404/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/219/535600404_6df30f6d21.jpg" width="500" height="333" alt="Sansa Express" /></a>

	USB メモリタイプのオーディオプレーヤー。3月くらいに注文してたのがやっと届いた。

	何も考えずに Windows 機の USB ポートにさすとポータブルデバイスとして認識されて、USBメモリとしては使えない。

	あせったけど、あわてずにデバイスマネージャを開いてドライバをインストールしなおせばよかった。

	互換性のあるドライバ一覧のところで二つ出るので汎用ディスクドライブ、みたいのほう。要するに最初から入るのじゃないほう。

	mp3 と wma しか再生できないのだけど、僕は iTunes 使うようになってからは aac で取り込んでるので最近の音楽ファイルはそのままじゃつかえなかったりとかありますが、なかなか満足。

2007-06-07 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 15:54 モンハン [life]:
	昨日やっとこ HR6 に！ ティガ二頭とか僕は無理すぎるので見てるだけでしたが＞＜

	しかし、こんなに長続きするゲームは初めてかも？ いまだに飽きていない。

	XLink Kai 持ってる人いたら一緒に遊びませしょう！

2007-06-05 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:22 TwitBin はなんちゃって Firefox 拡張 [twitter] [firefox]:
	IM 全然うごかねーので、[TwitBin](http://www.twitbin.com/ "TwitBin - twitter your browser - twitbin.co") とかいれてみたけど、日本語変換中でもEnter押すと送信されてしまう。

	あこれ、ちょっと前の del.icio.us と同じだなと思って DOM インスペクタでみてみるとやっぱり onkeyup でポストしている。

	そこ変えればいいなと思ってソース見てみたら。。あれ？ コード全然ない。

	よく見たらサイドバー内は拡張として実装されているわけではなく、単に [http://www.twitbin.com/beta/](http://www.twitbin.com/beta/) をそのまま表示させてるだけ！！

	ID, パスワード普通にとられちゃってるねぇ。

	twitter 周りはこんなのばっかだなぁ。

2007-06-04 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 11:50 スタバのタンブラー [life]:
	ちょっと前に陶器製の取っ手のついたタンブラーっぽいものがうっていて、アイスコーヒー飲むのによさそう買おう！ とか思ったんだけど、もうお店から消えている。。

	なんだよー＞＜

2007-05-30 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 19:57 vmware 容量拡張 [life]:
	初期 8GB じゃきびしくなってきたけど、ファイル整理するのめんどくさいので、

	    vmware-vdiskmanager.exe -x 20Gb Debian.vmdk

	としイメージファイル拡張。その後 parted で ext3 領域も拡張して完了。

2007-05-29 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 16:17 File::Temp [perl]:
	すげーよく使うわりに使い方を覚えられないので、毎回docみてる。

	APIがわるいんだろうなぁ。ラッパるのがいいんかなぁ。

2007-05-28 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 18:13 カメラ [life]:
	ふえた。&alpha;Sweet Digital。中古。

	レンズはとりあえず[これ](http://www.ecat.sony.co.jp/alpha/lens/lens.cfm?PD=24684 "50mm F1.4")を。

	ためし撮りもかねて散歩してみた。

	<a href="http://www.flickr.com/photos/typester/511782818/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/190/511782818_9005f6970b.jpg" width="500" height="333" alt="" /></a>

	<a href="http://www.flickr.com/photos/typester/511782464/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/208/511782464_341e39e143.jpg" width="500" height="333" alt="" /></a>

	<a href="http://www.flickr.com/photos/typester/511781936/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/220/511781936_2fc715c0e0.jpg" width="333" height="500" alt="" /></a>

	<a href="http://www.flickr.com/photos/typester/511778020/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/199/511778020_3addaaf3da.jpg" width="500" height="333" alt="" /></a>

	やっぱ銀塩の50mmとはぜんぜん違うな。70mm相当だそうだ。なるほど。

	でも散歩カメラはやっぱりアナログでゆっくり撮るのが楽しいよなぁ。チャンスには強くなったけど([リス](http://flickr.com/photos/typester/511813531/)撮れたし)、うーん。

2007-05-26 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 04:45 last.fm でよく聞いてるアーティストの amazon 新譜フィードをつくる pipes [life]:
	作った。前からほしかったやつ。

	> [Pipes: Amazon feed of your last.fm favorite artists](http://pipes.yahoo.com/pipes/pipe.info?_id=JGxUx_IK3BGS3hdU1vC6Jw)

	おもろいなぁ。

2007-05-25 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:35 Bloglines Subscription を RSS にする pipes [life]:
	> [Pipes: Fetch Bloglines Subscriptions as RSS](http://pipes.yahoo.com/pipes/pipe.info?_id=UuDFpsgK3BGeK6Uc1vC6Jw)

	初 pipes。やってみるとおもしろいなー。思ったよりポテンシャル全然高いな（いまさら

	これはパースエラーになる OPML ばかりで全然使えないけど。。むー

	適当に知り合いの OPML でためしエラーにならなかった hail2u をデフォルト値としておいてみる。

2007-05-24 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 11:17  [life]:
	Windows Update ついでに VMWare Server を 1.0.3 にアップデート。

	Vista (32bit) でも Pysical Drive マウントができるようになった。やっとか。

2007-05-20 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 10:25 オンラインNetHackプレーヤーリリース [ttyshare]:
	まだうまく再生できないttyファイルがいっぱいあるのに何やってんだと怒られそうですが、[TTYShare](http://ttyshare.com/) 上で NetHack をあそべる機能をつけました。

	> [Play nethack online! - TTYShare](http://ttyshare.com/play/nethack)

	いままで NetHack というものの存在は知っているだけでやったことはなかったんだけど、これを作りながらちょっと覚えはじめてみている。むずかしい＞＜

	実装としてはすごく簡単で、Flash 側はほとんど tty プレイヤーと同じ。URL から tty データを読むかわりに、Socket クラスを使って受信するようにして、キーボード入力を送り返すのをつけただけ。

	サーバー側は POE。こっちもすごくシンプルで、接続があったら nethack を起動して、あとはその標準入出力をそのままネットの入出力につないてあげる感じで OK。

	AS3 かわいいよ AS3。

2007-05-18 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 15:55 Class::Accessor::Fast 改 [perl]:

	    use base qw/Class::Accessor::Fast/;
	    
	    sub new { shift->SUPER::new( @_ > 1 ? {@_} : $_[0] ); }

	っていうだけのモジュールがほしい件。

	* 11:18 HHK [life]:
	最近 pro 買って使ってるんだけど微妙だなぁ。lite2 ほどではないけれども。

	とりあえずこの配列は耐え切れないので mayu 追加ってみた。

	    key *Backspace = *ReverseSolidus
	    key *ReverseSolidus = *Backspace
	    key *Esc = *GraveAccent
	    key *GraveAccent = *Esc

2007-05-17 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 17:29 Twitterにaddしてみて [life]:
	向こうもaddしてくれるかどうかで自分のことを知られているか試すメソッド。

2007-05-10 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 14:01 今日の更新 [ttyshare]:
	要望の多い再生スピード変更を仮実装。

	1～9 のキーで再生速度が変わります。1で等倍、9で9倍速。

	UI はもちょいできてから作ります。

2007-05-09 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:17 ちょいバージョンアップ [ttyshare]:
	まだまだだけど。ちょっとずつ改良していきます。

	今回のアップデートで、[nethack](http://ttyshare.com/tag/nethack) はほぼ完璧に再生できるようになりました。

	emacs, vim は手ごわい。

2007-05-08 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 02:18 テステス [life]:
	<embed type="application/x-shockwave-flash" src="http://ttyshare.com/t/d13519cb6efa22fd2be2f6a26aec5ffbf52cecee" width="480" height="288"/>

	> [Matrix - TTYShare](http://ttyshare.com/rec/typester/3168888/)

	とかいうサービス作りました！ まだ激しくバギってますが、皆様の罵声を受けつつ徐々に直していく所存です。

2007-05-07 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 05:16  [perl] [dbic]:
	書き忘れたけどさっきの `update_schema.pl` は

	    ./script/myapp_update_schema.pl dbi:mysql:tablename username password

	見たいな感じで DSN を渡す必要がある。めんどう。

	ここら辺があれでまだヘルパーにはなってない。

	* 04:57 Schema::Loader 使い方 [perl] [dbic]:
	> [mizzy.org : Re: DBICとDBIx::Class::Schema::Loader 僕のいろいろな勘違い](http://blog.mizzy.org/articles/2007/05/06/dbix-class-schema-loader)

	僕の中で流行ってる使い方があるのでかぶせて書いておいてみる。mizzy さんの二個目の例を自分ルール化させた感じ？

	作業は一般的なCatalystアプリのディレクトリ構造上であるとして、そこに新しく schema というディレクトリを作成。

	そんで、

	 * schema/lib/Schema/{TableName}.pm

	に各テーブルのリレーション定義とかメソッドとかを自分で書く。実際にこのライブラリは Catalyst にロードされない。

	上記ファイルを元に `Schema::Loader` の `make_schema_at` を使い

	 * lib/MyApp/Schema.pm
	 * lib/MyApp/Schema/*.pm

	にコードを自動生成して、そちらをロードするという感じ。こちらのコードは自分では書き換えない。

	コード自動生成は `script/myapp_update_schema.pl` にこんなのを書いてそれを実行している。

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    use FindBin;
	    use File::Spec;
	    use lib File::Spec->catfile( $FindBin::Bin, qw/.. schema lib/ );
	    
	    use DBIx::Class::Schema::Loader qw/make_schema_at/;
	    
	    die unless @ARGV;
	    
	    make_schema_at(
	        'MyApp::Schema',
	        {   components     => ['ResultSetManager', 'UTF8Columns'],
	            dump_directory => File::Spec->catfile( $FindBin::Bin, '..', 'lib' ),
	            dump_overwrite => 1,
	            debug => 1,
	        },
	        \@ARGV,
	    );

	`@INC` に `schema/lib` をくっつけてから `make_schema_at` してるだけ。ワンライナーでもできるけど見通しが悪いので。

	これで普通の `make_schema_at` でつくられる Schema ファイルに自分で schema/lib/Schema/ 以下に書いた定義がくっついて出力されるという寸法。

	`Schema::Loader` でダイナミックロードを使っていると各テーブルクラスにはリレーション定義やメソッド拡張のコードだけをかけばいいのでシンプルになって好きなんだけど、そうすると起動時のオーバーヘッドがあるし、ResultSetManagerがつかえなくていやんというときに、これだとまぁイイとこどりのような感じにできる。

	実際にいじるファイルは schema/lib 以下のファイルで、それらのファイルを更新するたびに update.pl を実行するというのがあれだけどまぁ自動化できる。してないけど。

	難点は、schema/lib 以下のファイルでsyntax errorがあっても何も言われないこと。

	何も言われないというか、syntax error があるファイルは

	    # Loaded external class definition for 'MyApp::Schema::TableName'

	ってのが出ないだけという。どこがエラってるのかとかがわからないので、がーーって書いてどこか typo してたりするとはまるかも。

2007-05-05 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 20:10  [twitter]:
	> [Collection & Copy - Twircインストール、メモ](http://d.hatena.ne.jp/brazil/20070505/1178352945)

	おー、使ってくれた人初めてみた。どもども。

	twitterのIM機能も今ではすっかり安定していい感じですね。Twirc自体も割と安定していて、僕の環境では2週間くらい放置してますがうまくうごいております。

	POEにも慣れてきた感が。

	そしてbrazilさんのtwitterアカウントがわからない。

	<ins>わかった。koyachiさんありがとう。twitterでつぶやけばはやかったのか。</ins>

2007-05-02 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:41 X-Sendfile の逆がほしい [perl] [catalyst]:
	ファイルアップロードしたときに、サーバーが自動でどっかファイルに保存しつつ受信して、fastcgi にはファイルを渡さずファイル名を渡す。

	結構でかいファイルだと Webサーバー <-> FastCGI 間のファイルデータのやり取りに時間かかってすげー無駄だ。

	lighty が実装しねーかなぁ。

	perlbal でできたりするのかな。

2007-05-01 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 08:12 inflate_column + time_zone [perl] [dbic]:
	んー

	    for my $date_column (qw/created_date modified_date/) {
	        __PACKAGE__->inflate_column(
	            $date_column => {
	                inflate => sub { DateTime::Format::MySQL->parse_datetime(shift)->set_time_zone('UTC') },
	                deflate => sub { DateTime::Format::MySQL->format_datetime(shift->set_time_zone('UTC')) },
	            }
	        );
	    
	        {
	            no strict 'refs';
	            *{"$date_column\_for"} = sub {
	                my ($self, $user) = @_;
	    
	                ($user && $user->info && $user->info->time_zone)
	                    ? $self->$date_column->set_time_zone( $user->info->time_zone )
	                    : $self->$date_column;
	            }
	        }
	    }

2007-04-30 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 15:32  [life]:
	spamassassin がうまく動いていないのは amvis-new を使うようにしたからだった。

	いままでは procmail からパイプで spamassassin を呼んでいたので各ユーザーの .spamassassin 読んでたけど、amavis-new つかうときは amavis ユーザーのになってしまうようだ。

	てことはユーザーごとに学習結果を変えられなくなってしまうのか。ちょっといやだな。

	まーおれと同居人の二人しか使っていないしいいか。ってわけでオレの .spamassassin をコピっといた。

	学習させる CRON ジョブも amavis ユーザーで動かすようにして完了。

	* 13:58 さらばexim4 [life]:
	自宅メールサーバーを[こないだメモリ積んだサーバー](http://unknownplace.org/memo/2007/03/30#e001 "unknownplace.org - 2007/03/30 - メモリとどいた")に移した。

	んで、ついでに exim4 から postfix にした。

	exim4 に不満もなかったのだけど postfix みたいに簡単にプログラムにメールを渡したいとずっと思っていたのでいい機会なので移行した。

	spamassassin が微妙にうまく動いていないくらいで、移行はわりとすんなりいった。

	新サーバーはサクサクでいい感じ。満足満足。

2007-04-23 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 13:52 何かが足りない [life]:
	なんだろう。

	あ！ your photos さんの写真が更新されてないんだ。

2007-04-18 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 15:14 svk のローカル repos を追加する方法 [svk]:

	    svk depot foo /path/to/repos

	で、`/path/to/repos` にあるレポジトリを foo という名前の depot として割り当てることができる。(repos がなかったら作るか聞かれるのであらかじめ作っておく必要はない)

	使うときは、`//` の代わりに `/foo/` を使用するだけ。

	* 15:07 SDメモリを財布に入れて持ち運ぶという試み [life]:
	SDメモリをUSBメモリ代わりに使用することにしてみる。

	持ち運びたいもの

	 * アカウント情報いろいろ ( KeePass のデータ)
	 * 秘密鍵
	 * svk repos

	keepass のデータ以外は生だとあれなので encfs 使用。

	というのを試しているのだけど、svk は遅いねー。encfs かませてるから余計か。

	* 11:15 携帯変えた。 [life]:
	> <a href="http://mb.softbank.jp/mb/product/3G/708sc/"><img src="/memo/static/images/entries/fig_lb_708sc_gre.jpg" width="500" height="330" alt="Softbank 708SC" /></a>

	おおむね満足。

	メールがなんか一行単位でしかスクロールできないのがめんどいくらい。

	カメラは結構使える。ホワイトバランスとかをワンタッチで切り替えられるのがグッド。保存は速いけどカメラが立ち上がるのに1秒くらいかかる。

	アプリ非対応だけど、SVG/Flashビューワー(?)とかいうのを搭載していてSDカードに入れたswfファイルは開ける。ためしてみたところFlash Lite 1.1相当の模様。

	ブラウザはなんか微妙にjavascriptが使える。NetFront/3.3というUA。ぐぐったら3.4からはAjax使えるっぽい感じだったらしい。惜しい。

	ドキュメントビューワはまだ試していない。

2007-04-16 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 06:55 気がつけば 64 [life]:
	ふと気づいたら僕の使ってる Linux は全部 64bit になっていた。といっても二台しかないのだけどね。

	会社開発機が Athlon64X2、家サーバーが PentiumD (DELLの2万サーバー)。

	* 05:43 ゲートウェイ Twirc [twitter]:
	ircd の config に `no_nick_tweaks: 1` すると nick に @ つけないようにした。

	クライアントを選ばずに使えるようになったはず。

	* 05:09 mutt と irssi [linux]:
	なんか似てるよね。

	mutt 使いは irssi も気に入る説。

	* 05:07 昨日のゲートウェイつかったスクリーンショット [perl] [twitter] [irssi]:
	<a href="http://www.flickr.com/photos/typester/460402721/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/175/460402721_98cc36b399_o.png" width="558" height="409" alt="Twitter on irssi" /></a>

	こんな感じ。普通にIRCっぽくなる。

	安定してるから nick に @ つけるのはオプションにしてほかのクライアントでもつかえるようにしようかなぁ。

	* 04:08 del.icio.us の RSS [web]:
	実体参照になったりならなかったり。一時的なものかと思ってたけどずっと直らんな。

	del.icio.us がわるいのか Bloglines API がわるいのかわからんけど。そろそろなんかするか。

2007-04-15 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 05:30 Yet Another IRC Gateway for Twitter [perl] [twitter]:
	作った！

	空前の Twitter - IRC ゲートウェイ作成ブーム。

	ソースこの辺です。ライセンスは GPLv2。(たぶん。PoCo::Jabberのせいです。)

	> [http://svn.unknownplace.org/public/scratch/Twirc/](http://svn.unknownplace.org/public/scratch/Twirc/)

	これの特徴は

	 * Jabber 使ってるのでリアルタイム性が高い
	 * nick に @ つけているのでクライアントによってはバグる

	などです。

	二個目は LimeChat でおかしくなることを確認。

	まー僕の使ってる irssi で動けばいいのです。

	irssi は nick の補完ができるので、@ をつけておけばいい感じで twitter 形式のレスができるってわけです。

	#### 使い方 ####

	 1. svn co
	 2. yaml いじる (jabberアカウントと、IRCのポートとIRCクライアントの文字コード)
	 3. ./script/twirc.pl
	 4. IRCクライアントでつないで #twitter に join

	あと、2で設定するjabber(or gtalk)アカウントはあらかじめtwitterで使えるように設定しておく必要があります。

2007-04-14 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 07:37  [lighttpd]:
	おお、1.4.15。

	* 07:18 Log::Dispatch::Config [perl]:
	`Log::Dispatch` は大好きなモジュールのひとつなんだけど、これだけだとイマイチ微妙。

	`Log::Dispatch::Config` を使うことですげーー便利になる。必須。

	miyagawa さんは 5 年以上も前にこれ作ったんだなぁ。

	* 07:01 Catalyst で Log::Dispatch を使うの法 [perl] [catalyst]:
	同僚から聞かれたので、僕のやり方を書いておく。

	すでにCPANに `Catalyst::Plugin::Log::Dispatch` というのがあるのだけど、なんかいけてないのでそれは使わず、以下のようにしている。

	まず `MyApp::Logger` とかいうのをかく

	    package MyApp::Logger;
	    use strict;
	    use warnings;
	    
	    use Log::Dispatch::Config;
	    use Log::Dispatch::Configurator::YAML;
	    
	    use Catalyst::Utils;
	    use NEXT;
	    
	    {
	        package MyApp::Logger::Backend;
	        use base qw/Log::Dispatch::Config/;
	    }
	    
	    sub setup {
	        my $c      = shift;
	        my $class  = ref $c || $c;
	    
	        $c->log->_flush if $c->log->can('_flush');
	    
	        my $config = $c->config->{log}{config}
	            || $c->path_to( Catalyst::Utils::appprefix($class) . '_log.yml' );
	    
	        MyApp::Logger::Backend->configure_and_watch(
	            Log::Dispatch::Configurator::YAML->new($config) );
	        $class->log( MyApp::Logger::Backend->instance );
	    
	        $c->NEXT::setup(@_);
	    }
	    
	    1;

	んでこれをプラグインとしてロード。

	    use Catalyst qw/+MyApp::Logger/;

	ログの設定ファイルを書く(デフォルトmyapp_log.yml)

	    ---
	    dispatchers:
	      - file
	      - screen
	    
	    file:
	      class: Log::Dispatch::File
	      min_level: debug
	      filename: /path/to/log
	      mode: append
	      format: '[%d] [%p] %m at %F line %L%n'
	    
	    screen:
	      class: Log::Dispatch::Screen
	      min_level: debug
	      stderr: 1
	      format: '[%p] %m%n'

	以上。

	`MyApp::Logger::Backend` とかしてるのは mod_perl 対策。まーつかわんのだけど。

	これ、さっきヘルパーにした。

	> [Catalyst-Helper-Log-Dispatch](http://svn.unknownplace.org/public/library/perl/trunk/Catalyst-Helper-Log-Dispatch/)

	これ使えば

	    ./script/myapp_create.pl Log::Dispatch

	すると Logger クラスとサンプルの yml ファイルを生成してくれる。

2007-04-12 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 02:16 twitter [life]:
	friend登録されたののメール通知がくるときと来ないときがあるなぁ。

	junk行きになってるかと思いきやそうでもないようだ。

2007-04-11 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 04:42 オリオンビール [life]:
	サンデーマガジン立ち読みにいつものコンビニに寄ったらなぜかオリオンビールが！！

	すきなんだよなー。

	酒かうつもりなかったのに、なんだよもう。

2007-04-10 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 18:44  [web]:
	putty tray のサイト、さり気におもしろい。

	アイコンドラッグでダウンロードとか。

	* 18:23 putty tray [putty]:
	xcezx さんにおしえてもらった。

	> [PuTTY Tray](http://www.xs4all.nl/~whaa/putty/index.html)
	>
	> PuTTY Tray is an improved version of PuTTY (Win32).
	>
	> Features
	>
	>  * New high color icon.
	>  * Minimize to the system tray (on CTRL+minimize, always or directly on startup)
	>  * Customizable (tray) icon
	>  * Blink tray icon when a bell signal is received
	>  * Configurable window transparency
	>  * URL hyperlinking
	>  * Reconnect when PC wakes up from stand-by

	うれしいのはURLがクリッカブルになるくらいでしょうか。なんかバグってるけど。あとアイコンもカワイイ。

	でもごった煮についてるCtrl-Tabでのウィンドウ切り替えができなくてうーん。一長一短。

	Ctrl-Tabなくなったら死ねるけど、URLもクリックしたいので

	> [hdk の自作ソフトの紹介](http://hp.vector.co.jp/authors/VA024651/)

	ここで配布されてる PuTTY のウィンドウを Ctrl+Tab で切り替えられるようにするパッチ ためしにあてたらハイブリッドなバイナリができた！

	一応おいておくけど、自己責任で＞＜

	 * [PUTTY.exe.bz2](http://unknownplace.org/tmp/PUTTY.exe.bz2)

	アイコンやmanifest埋め込みはしてないけど、設定でアイコン指定すれば無問題。

	作業手順

	 1. puttyソースDL
	 2. putty trayパッチ当てる
	 3. ctrl-tabパッチ当てる、(一個うまく当たらんからそこ手動でつっこむ)
	 4. WINDOWS\MSVC\PUTTY に VC 用のワークスペースファイルあるのでそれ開く
	 5. putty trayで追加されてると思われるファイルを適当にプロジェクトに追加
	 6. ビルド

	ビルドは VC++ 2005 Express でやった。

	* 11:14 AS3勉強会 [life]:
	なんだよなんだよ、オレも呼んでよ！！

2007-04-09 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 10:53 Catalyst + 外部認証API [perl] [catalyst]:
	今作ってるサービス。

	    use Catalyst qw/
	        ...
	        Authentication
	        Authentication::Credential::Password
	        Authentication::Credential::OpenID
	        Authentication::Credential::TypeKey
	        Authentication::Credential::Hatena
	        Authentication::Credential::JugemKey
	        +MyApp::UserStore
	        ...
	        /;

	`MyApp::UserStore` は `A::Store::DBIC` のちょっとしたサブクラスで、`Cred::Password` のときは `auto_create_user` しないようにしただけのもの。

	最近の `Store::DBIC` の `auto_create_user` 機能つかうと外部認証使うサービス簡単に作れる。

	`Cred::Password` 使わないなら (独自ユーザーを使わないなら) 、`Store::DBIC` そのまま使えばいける。

	すばらしいなー。

	リリースしたらちゃんとした記事を書きたい。

2007-04-04 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:50 YAPC の IRC の機械翻訳を lingr に投げ続けるスクリプト [perl] [yapc]:
	YAPC 今年もきましたね！ 楽しんでますか！

	IRCあるけど英語わからんとか、日本語チャンネルあるけど日本語わからんとかいうひと用にIRCの機械翻訳をリアルタイムにlingrに流すスクリプトを作りました！

	 * e2j: [#yapc.asia (at Lingr)](http://www.lingr.com/room/sharp-yapc.asia)
	 * j2e: [#yapc.asia-ja (at Lingr)](http://www.lingr.com/room/sharp-yapc.asia-ja)

	ソースはこんな感じ

	> [http://svn.unknownplace.org/public/scratch/yapc_irc2lingr/irc2lingr.pl](http://svn.unknownplace.org/public/scratch/yapc_irc2lingr/irc2lingr.pl)

2007-04-01 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 01:43 中日がはやくも単独首位になったわけですが [baseball]:
	今年はこのまま一度もこの座を渡さず突っ走ってもおかしくないようなチーム状態、雰囲気。

2007-03-30 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:26 フォントの話 [life] [font]:
	> コーディングにはビットマップフォントしかありえない

	などといっていた時代もありましたが、最近はアンチエイリアスってるのも使うようになった。慣れると悪くないなぁ。

	歳か＞＜

	といっても気分で使い分けています。

	 * ビットマップ時: CodingFontTobiS + MSゴシック
	 * ClearType時: Consolas + M+1VM+IPAG circle

	とかいう感じ。

	最新の putty は ClearType オンにしてても putty 上だけノンアンチエイリアス表示ができるのがうれしいね。

	画面の小さいThinkpadとかだといまもやっぱりビットマップオンリーですが。

	* 21:46 GMail使いにありがち [life]:

	 * 引用部分全削除で送ってくる
	 * 改行なしメール

	* 17:29 Config::Any-- [perl]:
	パースエラーっても何も出さねーの。

	    my $config;
	    eval {
	        $config = $loader->load( $filename );
	    };
	    next if $EVAL_ERROR;

	ふぁっく。

	yamlパースエラーってるの気づかずにはまったわー。

	しかもなんかデバッグ用と思われる warn がいっぱいコメントアウトされていてきもいｗ

	* 13:30 メモリとどいた [life]:
	4G。

	放置してたDELL2万サーバーがつかえる！

	サーバー自体よりメモリのほうが高い罠。

2007-03-29 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 17:43 sfより [life]:
	google code のほうがいまっぽいよ！！！！！くね？ ＞だれとなく

2007-03-27 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 12:08 asdoc [as3]:

	> [Adobe - Adobe Flex 2：インタラクティブなWebサイト、インターネットアプリケーション](http://www.adobe.com/jp/products/flex/productinfo/updater/)
	>
	> ASDocが正式にサポートされ、SDKに付属するようになりました。

	ってあるからためしてみたけど

	    Error: Could not create toplevel.xml: Unknown OS for ASDoc.  ASDoc will only run on Windows and Mac OS X.

	などといわれてLinuxではうごかない。くそう。

	サポートする気ないのかなー。動かなくしてる理由もよくわからん。

	asdoc 自体のドキュメントも日本語のlivedocsにない模様。古いのね。

	 * [Using ASDoc -- Flex 2.01](http://livedocs.adobe.com/flex/201/html/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Book_Parts&file=asdoc_127_4.html#189665)

2007-03-26 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 19:42  [life]:
	del.icio.us のフィードがあがりまくってうざー。

	Bloglines API 経由なんだけど。ユーザー数はいってたりはいってなかったりしてるみたい。

	* 03:23 筋肉痛 [life]:
	右上半身しんでる。いてー。

	バッティングセンターで `21*3` 球バットふっただけなんだけどな。なまりすぎている。

2007-03-25 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 04:43  [life]:
	んん、VistaのUIフォントあれげなの、メイリオが汚いのじゃないのかな。

	> [http://barca.daa.jp/](http://barca.daa.jp/)

	こことか Font-Family にメイリオしか指定されてないけどなんか綺麗。英数字、なんかUIに使われてるのと違う気がする。なんだ、どこで設定するんだ。

	* 03:23 Vista いれました [life]:
	うるてぃめっと。

	とりあえずファーストインプレッションとしてはメイリオが UI フォントになっててだっさい。なんかフォント設定してないデフォルトのLinuxデスクトップみたいだ。

	なんかログイン画面とかもダサいし、美的センスを疑う。。＞＜

	XP で Vista 風の VisualStyle (VistaXPてやつ) を愛用してたのでなんか残念だ。VistaXP のがかっちょいいじゃんすか。

	でもなんかパフォーマンス的に、XP よりさっくりしてる気がする。インストール直後だからかな。それともちゃんとしたグラボつんでると Aero の恩恵で軽いのかな。

2007-03-22 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 12:12 AS3 の 未定義 int [as3]:

	    var i:int;
	    trace(i); // => 0

	これいやすぎｒｒｒｒｒｒ

	未定義の状態をつくれない。

	これしたいときは Number つかって isNaN するしか方法ないのかなぁ。

	    var i:Number;
	    trace(i); // => NaN

	* 09:30 Encode.as [as3] [perl]:
	おきた。

	早く出社する人が増えてきて、9時ごろになるとうっさくて寝られなくなるなぁ。ねむい。

	    package {
	        import flash.utils.ByteArray;
	    
	        public class Encode {
	            public static function encode(encoding:String, string:String):ByteArray {
	                var octets:ByteArray = new ByteArray();
	                octets.writeMultiByte(string, encoding);
	                return octets;
	            }
	    
	            public static function decode(encoding:String, octets:ByteArray):String {
	                return octets.readMultiByte(octets.bytesAvailable, encoding);
	            }
	        }
	    }

	こんなんでどうか。

	このコードは、perlのunicodeフラグを分かってない人に対するEncode.pmの説明にも使えそうな気がする。

	* 04:54 ByteArray文字コード変換 [as3]:
	`sjisbytes:ByteArray` を decode:

	    var utf8strings:String = sjisbytes.readMultiByte(sjisbytes.length, "shift_jis");

	encode:

	    var sjisbytes:ByteArray = new ByteArray();
	    sjisbytes.writeMultiByte(utf8strings, "shift_jis");

	おー。

	> [サポートされている文字セット - Adobe Flex 2 リファレンスガイド](http://livedocs.adobe.com/flex/2_jp/langref/charset-codes.html)

	* 02:05 ByteArrayのデフォルトエンディアン [as3]:
	いまどきビッグエンディアンがデフォルトとは！

2007-03-19 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:06 puppet [life]:
	便利そうやのー。

	* 18:15 Apollo on Linux [apollo]:
	apollo alpha1 でたので試す。

	SDK はなんか Download for Macintosh and Windows (ZIP, 18 MB) とかってのしか見つからないんだけど、これそのまま Linux でもうごくぽい。java++

	おとして

	    unzip -d ~/app/flex apollo_sdk_alpha1_031907.zip

	などとして、Flex2 SDK のインストールディレクトリに上書き展開で、インストールかんりょ。

	サンプルをコンパイルしてみる。

	    ~/app/flex/bin/amxmlc TextEditor.mxml

	これで、swf ができる。これはただの mxmlc のラッパぽい。その後、

	    ~/app/flex/bin/adt -package TextEditor.air TextEditor-app.xml TextEditor.swf icons

	で air 化。

	そんで、Runtime インストール済みの Windows とかで Air ダブクリするとインストールダイアログが出るので、インストールするとアプリ使えるようになる。

	air 化しなくても、adl (apollo debug launcher) というのがあり、

	    adl TextEditor-app.xml

	で、実行できると書いてあるけど、現状 Linux では Runtime がないのでこの部分だけは Windows か OSX が必要。

	までも、Linux は CUI のみで使ってる人が多いと思うから特に問題はないかな。

	なんつーか、良いおもちゃが出たなーって感じで、今後の展開が楽しみ。

2007-03-18 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 20:25 perler気質 [perl] [blosxom] [plagger]:
	> [oh!fey - Ck2 Blogger](http://ck2-blogger.jp/pclife/oh-fey.htm)
	>
	> やっぱ、blosxomユーザー（だった）な人ってすごい人ばっかりだなとか、今更ながらしみじみ思ったりしました。

	blogはまとまった文章書くのが苦手で休止してますが、blosxom魂はわすれてません！

	しかし、blosxomをいじるためにperlをはじめたんだけど、いまや職業になっちゃった。

	今だったらplaggerかな。かっこいいよねぇ。

	blosxomやplaggerをかっこいいと思う人はperler気質だと思う。うまくいえませんが。

2007-03-16 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:56 colinuxの利点 [linux]:
	cofsもあった。

	VMWare Server だと vmware-tools についてるファイル共有のカーネルモジュールをインストールすれば共有できるはずだけど、Debianではコンパイルできなかった。

	* 16:32 colinux とかまだつかってるの [linux]:
	これみて、

	> [デスクトップ百景](http://bb.watch.impress.co.jp/cda/desktop/17468.html)

	そう思った。いまは VMWare Server の時代！！

	僕が思う colinux のほうが優れているところはその PC に ext3 領域とかあってそれを colinux から使いたいとかそういう場合があるときのみ。

	それ以外はすべてにおいて VMWare Server のほうが優れていると思う。あ、パフォーマンスは分からない。

	VMWare Server のほうが特に優れているところは以下。

	#### 仮想マシンをサスペンドできる

	ので、Windows Update とかきて PC を再起せざるを得ない状況になったらおもむろに仮想PCをサスペンド。PC再起動。

	再起後何事もなかったかのように作業続行可能。

	#### 使った分だけディスク消費

	最初から確保する必要ナシング。

	#### ネットワーク設定が豊富

	colinux は VMWare でいうところの NAT か Host only というネットワーク設定で使うしかない(と思う)のだけど、VMware Serverはそれプラス Bridged モードというのがあり、VMWare の仮想ネットワークアダプタが直接ネットにつないでるかのように設定できる。

	ゲストOSがDHCPでIPとったら、自分のPCからもLAN内のほかのPCからもそのIPでアクセスできるって感じ。hamachi もうごくよ。

	後オレは使ってないんだけど、USBつかえたりとかもするっぽい。

	などなど、なんでまだ colinux? って感じだ。

	* 15:34  [life] [catalyst] [lighttpd]:
	学生さんのcatアプリ見せてもらった。なんかすごいがんばってた。

	Chainedアクションがないころのなのか、`/wiki/{pagename}/edit` とかそれ系のコントローラを Regex コントローラでがんばってたりしてた。

	`Plugin::Images` とかつかってた。しらんかった。なんかあれだなーと思ったら作者見て納得。nothingmuch のか。

	`Plugin::Static::Simple` とかは使わないほうがいいよ。静的ファイルはサーバー直でやんないと無駄。ロードするだけですらッ！

	それで思い出したけど、lighttpdの設定、最近 `mod_alias` も `mod_setenv` も `mod_rewrite` もつかわない書式を思いついて使ってる。

	    $HTTP["url"] =~ "^/(?!favicon\.ico$|static/|js/|css/|images?/)" {
	        fastcgi.server = (
	            "" => (
	                ( "socket" => "/path/to/myapp.socket",
	                  "check-local" => "disable", ),
	            ),
	        )
	    }

	こんなの。

	とにかく、技術はどうあれ、作ってみる、形にするってことはやっぱり重要だなと思った。口だけなら何でもいえる。

2007-03-15 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 20:57 ソーシャルブックマークコメント横断表示サービス [life] [ブッコミ]:
	ブッコミイレブンというアツイ部署に配属されまして、がんがんぶっこむ毎日です。

	とりあえず第一弾として

	> [ソーシャルブックマーク検索 Oh!Fey](http://ohfey.com/help/)

	ての作ってみました。

	検索、じゃないよね。なんてつけたらいいかな。

	今APIとかほかもろもろやりちゅう。

	技術的な特徴はFlashのXMLSocketを使用したcometと、超消極的なRSS作成クローリング。

	cometってなんかすげー技術使ってまでわざわざHTTPでやる必要性がいまいちよく分からない。これで十分じゃね？

	* 11:48 スルー力 [life]:

	    18:28 <@typester> tanakaさん、多読方のやつどう？
	    18:28 <@typester> なんかあまぞんからおすすめされた
	    Day changed to 08 Mar 2007
	    Day changed to 09 Mar 2007
	    Day changed to 10 Mar 2007
	    Day changed to 11 Mar 2007
	    Day changed to 12 Mar 2007
	    Day changed to 13 Mar 2007
	    Day changed to 14 Mar 2007
	    Day changed to 15 Mar 2007

2007-03-08 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:40 ストーリーのないゲームはつまんない [life]:
	などと豪語していたのだけど、バッチリはまっちゃいました、モンスターハンターポータブル2nd。

	なんか買ってからもそんなやってなかったけど、一回マルチプレイしたらきちゃった。ヤバス。

2007-03-07 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:03 新曲！新曲！ [life]:
	> [http://www.myspace.com/sunsgrind](http://www.myspace.com/sunsgrind)

	ヤバスなぁ。

	* 14:10 ディスプレイ買うかなー [life]:
	かなり前の EIZO 19インチ (FlexScan L465) 液晶をずっと使っているんだけど、最高に安物の DELL 液晶よりも視認性が悪い。並べて使ってるので気になりまりまくる。EIZO のほう、なんかぼんやりしてる。

	しかも、L465 は DVI 接続、DELL は D-Sub アナログなのに！

	古いからかなー。何年くらい使ってるんだろ。

	* 01:24 AS3でのフルスクリーンモード [flash] [as3]:
	最小のサンプル。

	    package {
	        import flash.display.Sprite;
	        import flash.display.StageDisplayState;
	        import flash.events.MouseEvent;
	        import flash.events.FullScreenEvent;
	    
	        public class FullScreeeeeen extends Sprite {
	            public function FullScreeeeeen() {
	                stage.addEventListener(MouseEvent.CLICK, clickHandler);
	                stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
	            }
	    
	            private function clickHandler(event:MouseEvent):void {
	                if (stage.displayState == StageDisplayState.NORMAL) {
	                    stage.displayState = StageDisplayState.FULL_SCREEN;
	                }
	            }
	    
	            private function fullScreenHandler(event:FullScreenEvent):void {
	                if (event.fullScreen) {
	                    trace("enter fullScreen mode");
	                }
	                else {
	                    trace("leave fullScreen mode");
	                }
	            }
	        }
	    }

	これだけ。あとは `addParam("allowFullScreen", true)` (SWFObject書式) すれば使える。

	今の Flex2 SDK だったら追加のインストールファイルは何も必要ない模様。

2007-03-01 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 14:15  [life]:
	なんか今日は [search.cpan.org](http://search.cpan.org/) 重いなー。イライラ

2007-02-28 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 10:28 yabai [life]:
	2月がもう終わる！

	* 10:18 コンパイル時間参考 [as3]:
	swc使用

	    (fcsh) mxmlc -benchmark -include-libraries=../flexunit/bin/flexunit.swc main.mxml
	    fcsh: Assigned 12 as the compile target id
	    Loading configuration file /home/typester/app/flex/frameworks/flex-config.xml
	    Initial setup: 62ms
	    Loaded 9 SWCs: 8485ms
	    Files: 435 Time: 21804ms
	    Linking... 815ms
	    Optimizing... 427ms
	    SWF Encoding... 862ms
	    /home/typester/tmp/flexunit/test/main.swf (241615 bytes)
	    Total time: 32459ms
	    Peak memory usage: 387 MB (Heap: 358, Non-Heap: 29)

	ソースから

	    (fcsh) mxmlc -benchmark -source-path=../flexunit/src/trunk/src/actionscript3 main.mxml
	    fcsh: Assigned 13 as the compile target id
	    Loading configuration file /home/typester/app/flex/frameworks/flex-config.xml
	    Initial setup: 66ms
	    Loaded 8 SWCs: 3169ms
	    Files: 433 Time: 57148ms
	    Linking... 25ms
	    Optimizing... 394ms
	    SWF Encoding... 297ms
	    /home/typester/tmp/flexunit/test/main.swf (239897 bytes)
	    Total time: 61109ms
	    Peak memory usage: 399 MB (Heap: 371, Non-Heap: 28)

	長すぎる。VMだからメモリ足りないからかもしんない。

	* 10:00 AS3のテスト [flash] [as3]:

	> [Adobe - Developer Center : Unit testing and Test Driven Development (TDD) for Flex and ActionScript 3.0](http://www.adobe.com/devnet/flex/articles/unit_testing.html)

	これ試してみた。

	Flex Builder 2 がいるとか書いてあるけど、Flex2 SDK でも使えた。

	この記事の例のをコンパイルするには

	    mxmlc -include-libraries=../flexunit/bin/flexunit.swc main.mxml

	こんな感じでいいよう。

	`-include-libraries` の代わりに `-source-path` で as ライブラリの位置指定してもいけるけどコンパイル時間がすげー長くなってしまう。

	てか、swc 使っても長いんですけど。fcshつかった二回目以降のコンパイルでもおっせぇのでFlexって大変だなぁとか思ったり。

	このテストアプリはFlexで作られているけど、テストは普通のAS3クラスに対して行えるので、まぁ一応使えるかなぁと言う印象。

	作ってるアプリディレクトリに test.mxml、Test.as を置く感じになるかなぁ。

	めんどいなー。[誰か](http://subtech.g.hatena.ne.jp/secondlife/)がasだけでテストクラス書いてくれるのを待とう。

2007-02-25 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 21:11 XMLSocket - POE [perl] [flash]:
	AS3からSocketクラスができたけど、それでも依然としてテキストベースの通信ではXMLSocketのほうが楽なのでAS3ベースでもXMLSocket使ってる。

	でも通信の区切りがNULL文字だったりとか、癖があるんで、なんこかPoCoサーバー作ってみて、うまくラッピングするモジュール作るべきだなと考えてる。

	たとえば以下のような。

	#### POE::Filter::XMLSocket

	NULL文字で区切る入出力フィルタ。

	#### POE::Component::Server::TCP::XMLSocket

	AS3からサポートされているTCP通信でのcrossdomain.xmlの返答機能を組み込んだComponent::Server::TCPのサブクラス。

	などなど。

	今の仕事が終わったらちゃんと考えよう。

	* 19:49  [life]:
	そういえば、Vista の無償アップグレードの申し込みするの忘れてた。

	なんかPCの納品書のコピーとか送らないといけないだよな、めんどくさー

	3/15 までか、思い出してよかった。

2007-02-23 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 17:29 Jemplate多言語化用ラッパ [perl] [javascript] [jemplate]:
	つくった。

	> [http://svn.unknownplace.org/public/scripts/jemplate-maketext.pl](http://svn.unknownplace.org/public/scripts/jemplate-maketext.pl)

	Jemplate のテンプレート内に `{{Hello}}` とか `_("Hello")` とかかいておいて `jemplate -c` のかわりに

	    jemplate-maketext.pl --path lib/MyApp/I18N --locale ja templates/jemplates/*.tt > jemplate_ja.js

	みたいにすると `{{Hello}}` とかの部分がその言語になったファイルができるというやつ。jemplate -c の簡単なラッパ。

	--path には .po や .mo のあるディレクトリを指定する。

	`"Hello %1!"` みたいなのには対応できないんだけど、まぁとりあえずこれで。

	* 17:27 今日のワンライナー [life]:

	     for lang in "ja" "en"; do tpage --define lang=$lang root/css/style_template.css > root/css/style_${lang}.css; done

2007-02-22 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 11:45  [life]:
	gettext のマニュアル一通りながめた。

	gettext に emacs の po-mode はいってるってかかれてるのに使ってるPCには入ってなくてなんでだろうと思ったら、Debian では gettext-el ってパッケージになってるようだ。いれた。

	poファイルのヘッダ(メタ情報)になにかけばいいのかとかよくわかんねーなぁ。個人的に使うだけなら、Content-Type さえあれば問題ないけどなぁ。

	* 02:54  [perl] [i18n]:
	`Locale::Maketext::Lexcon::Gettext` の parse_metadata の前後見ると、`msgid ""` なものはメタデータとして扱うようになっているらしい。で、そこの Content-Type の charset みてる。

	常識くせー。基本的なことを知らないので無駄にはまるなぁ＞＜

	* 02:40 Locale::Maketext::Simple, Decode => 1 しても utf8 strings にならない [perl] [i18n]:

	    use strict;
	    use warnings;
	    use utf8;
	    
	    use Locale::Maketext::Simple(
	        Path   => 'lib/MyApp/I18N',
	        Decode => 1,
	    );
	    
	    loc_lang('ja');
	    my $foo = loc('foobar');
	    
	    if (utf8::is_utf8($foo)) {
	        print "utf8\n";
	    }
	    else {
	        print "bytes\n";
	    }

	で、bytesに。

	あーなんでだーー。

	と思ったら、poファイルの先頭に

	    msgid ""
	    msgstr ""
	    "MIME-Version: 1.0\n"
	    "Content-Type: text/plain; charset=utf-8\n"
	    "Content-Transfer-Encoding: 8bit\n"

	とかかいたら utf8 になった。

	これは、なに。

2007-02-20 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 00:19 perl-debug [perl] [debian]:
	とか言うパッケージがあったのか！！！！＞Debian

	いままでソースからわざわざ別の場所に入れてたよー。あー。

2007-02-19 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 16:04  [life]:
	> [subtech - Pink Blossom Diary - 一度 tty から起動したプロセス](http://subtech.g.hatena.ne.jp/secondlife/20070218/1171806399)
	>
	> typoさん情報(thx!)

	いつかのmotemen日記で知ったんだけどな！

	* 11:33  [life]:
	RTMのグリモン、なんかエレメントの判定 `type == "text"` なはずのとこ `type = "text"` とかかいててひどいことになってたのでなおした＞＜

	* 09:54  [life]:
	出社。

	* 04:25 Remember The Milk で IME を自動で ON/OFF する greasemonkey スクリプト [web] [firefox] [greasemonkey] [rememberthemilk]:
	[Remember The Milk](http://www.rememberthemilk.com) はサービス開始当初少し触っただけでまったく使っていなかったのだけど、最近周りの人が結構使っているのでちょっと見てみたらすごい進化していて、これは便利そうってことで使ってみている。

	それで、キーボードショートカットだけでいろいろな操作ができるようになっていてすごく便利になっているのだけど、IMEがONの状態だと動かない。

	タスクは日本語で入力することが多いので、いちいちIMEの状態を気にしなくてはいけなくて面倒。

	ってことで、テキストフィールドにフォーカスがあるときは自動でIMEをONにし、フォーカスが外れるとOFFにするスクリプトを書いてみた。

	 * [rememberthemilkime.user.js](/gm/rememberthemilkime/rememberthemilkime.user.js)

	スクリプトと同じ階層にある IME.swf というのも読み込むようになっていて、IMEのON/OFFはそれでやってる。無駄にAS3で書いたため、Flash Player9以上でないと使えないとかいう。

2007-02-18 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 02:35 折りたたみキーボード [life]:

	> [Reudo RBK-2000BT (Bluetooth HID ローマ字入力)](http://www.vshopu.com/r_RBK-2000BT/index.html)

	買った。

	`/` の位置以外はまったく不満なく。なかなかいいです、これ。

2007-02-17 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 01:42 64bit Debian で 32bit アプリを動かすの法 [linux] [debian]:

	    $ sudo aptitude install ia32-libs

	hamachi がうごかんくてあせったわー。

2007-02-16 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:10  [life]:
	出社。

	* 03:26  [life]:
	退社。

2007-02-15 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 18:56 メニューバーの表示をC-Mでトグルする拡張 [firefox]:
	1.5時代につくってから、そのままバージョン警告無視して使い続けていたけどいい加減あれなのでsvnつっこんでちゃんとやることにした。

	ついでに公開。

	> [ToggleMenu](http://svn.unknownplace.org/public/firefox/extensions/ToggleMenu/releases/)

	<a href="http://www.flickr.com/photos/typester/390989598/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/78/390989598_dafb405ee6_o.png" width="180" height="80" alt="b" /></a>

	これが

	<a href="http://www.flickr.com/photos/typester/390989601/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/153/390989601_ffa3605069_o.png" width="180" height="80" alt="a" /></a>

	こうなると。

	Ctrl-m でトグル。手抜きなのでキーは決め打ち。

	* 15:24  [life]:
	先日からのタスクはほぼ終了。一日遅かったな。。

	* 05:01  [flash]:
	> [FlashのログをFirebugに出す方法 (Unknown Quality)](http://un-q.net/2007/02/flash_firebug.html)

	それまったく無名関数使う意味ない＞＜

	    ExternalInterface.call("console.log", "hoge");

	 * [CLON - 2006/12/09 - JSコンソールにログをはくActionScript](http://unknownplace.org/memo/2006/12/09#e005)

	* 03:54  [life]:
	退社。

	* 03:51  [life]:
	なんか今週はすげー働いた気がするなぁ。実際は2日なのにｗ

	もうなんかすげー仕事した感がある。

	常にこのパワーが出せればすげーなぁ。

	* 03:48  [life]:
	ほぼタスク完了。後は明日ちょろっとやれば終わり。おせぇ＞＜

	さぶさみたのしかったんかなー。

2007-02-14 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 10:24  [life]:
	出社。

	おっしゃ!

	* 05:02  [life]:
	でもはまってたところはずっとわからなかったところで、それは解決したのでちょっとスッキリした。

	あとは重いタスクはない。けど量が結構ある。

	* 04:59 でぶさみの女神 [life]:
	仕事が終わんないとでぶさみいけないけど、おわんね。

	神が降りてこればいけそうかとおもってがんばったけど、逆にはまってしまいあまり進まなかった。。

	あー、はー。

	* 04:38  [life]:
	退社。

2007-02-13 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 09:31  [life]:
	出社。

2007-02-12 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 15:24 snippet.el いれた [emacs]:
	> [emacs + snippet.el の定型文補完（スニペット）で楽々HTML編集：Goodpic](http://www.goodpic.com/mt/archives2/2007/02/emacs_snippetel_html.html)

	を見て便利そうなので導入。

	elisp よくわかんねーので、`psgml-mode` と `cperl-mode` で動かしたかっただけなのにものすごい時間かかった。。

	    ; snippet.el
	    (require 'snippet)
	    (require 'psgml)
	    (snippet-with-abbrev-table 'xml-mode-abbrev-table
	      ("ahref" .  "<a href=\"$${url}\" title=\"$${title}\">$${title}</a>"))
	    
	    (defvar cperl-mode-abbrev-table nil
	      "Abbrev table in use in CPerl mode.")
	    (define-abbrev-table 'cperl-mode-abbrev-table ())
	    (snippet-with-abbrev-table 'cperl-mode-abbrev-table
	      ("formy" .  "for my $${item} ($${items}) {\n}")
	      ("cataction"  .  "sub $${fn} :$${attribute} {\n$>my ($self, $c) = @_;\n}"))

	こんなんでいけた。

	psgmlのxml-modeは普通にやったら `xml-mode-abbrev-table` なんてねーよっておこられるので、先に `(require 'psgml)` しておいたらいけた。

	cperl-mode も同じ方法でやろうとしたらなんかエラーになったのでソース見たら、`cperl-mode-abbrev-table` がすでに定義されてあったら cperl-mode 側では上書きしないっぽい感じになっていたのでてけとうに定義してやったらいけた。うむ、よくわからん。

	まぁつかえたからいいや的な。

	あとはabbrev-tableふやすだけ～。

2007-02-11 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 18:19 そういえば [life]:
	今日誕生日。

	26歳。うわー

	* 17:47 MochiKitをAS3で [flash]:

	    package MochiKit {
	        public class Base {
	            public static function bind(f, obj, ...args) {
	                return function() { return f.apply(obj, args.concat(arguments)) };
	            }
	    
	            public static function update(self, ...args) {
	                if (self === null) {
	                    self = {};
	                }
	                for (var i = 1; i < args.length; i++) {
	                    var o = args[i];
	                    if (typeof(o) != "undefined" && o !== null) {
	                        for (var k in o) {
	                            self[k] = o[k];
	                        }
	                    }
	                }
	                return self;
	            }
	        }
	    }

	bindとupdateだけだけどｗ

	なんかAS3は_globalなくなってグローバル関数上書きどうやるかわかんねーし、ビルドインクラスにメソッド追加する方法もよくわかんないのでこんなのかいてやってみる試み。

	使うときは import MochiKit.Base; したらあとは

	    var m = MochiKit.Base;
	    m.bind(...)

	とかもてきったーにはおなじみの使い方できる。

	誰か暇な人が全移植してくれはしないだろうか。

2007-02-10 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 04:30  [life]:
	退社。

2007-02-09 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 17:55 width="0" height="0" な Flash だとネット接続できない ＠ Linux Flash Player 9 [flash]:
	これずっとわかんなかったんだけど、今日やっと原因を発見した。

	なんだそういうことだったのね。MTASCのバグかPlayerのバグか何かかと思っていて放置してた。

	MTASC上でのLoadVars, XMLSocket、Flex2 Builder上でのURLLoaderでうごかないの確認。

	ちなみにWindowsやOSXだと問題ない。

	Flashタグでは1pxなどと適当に指定しておいて、CSSでそれをくくっているdivを0pxに指定したらOKっぽい。

	* 10:28  [life]:
	出社。

2007-02-08 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 03:04  [life]:
	退社。

	* 10:32  [life]:
	出社。

2007-02-07 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 02:24  [life]:
	退社。

	* 10:27  [life]:
	出社。

2007-02-06 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:45  [life]:
	退社。

	* 10:26  [life]:
	出社。

2007-02-05 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 09:00  [life]:
	出社。

2007-01-31 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 13:18  [life]:
	退社。

	* 10:26  [life]:
	出社。

	* 01:08  [life]:
	退社。

2007-01-30 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:29  [life]:
	出社。

	* 02:33  [life]:
	退社。

2007-01-29 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 18:57 Flash Player Detection Kit がひどいので改造 [flash] [javascript]:
	インストールされているFlashプレイヤーのバージョンを調べるためにadobeから[Flash Player Detection Kit](http://www.adobe.com/jp/products/flashplayer/download/detection_kit/)というものが出てるのだが、これのjsの部分がひどいのでいじった。

	> [Flash.js](http://svn.unknownplace.org/public/library/js/trunk/Flash/Flash.js)

	var付け忘れてる変数にちまちまvarつけたり、関数エクスポートまくりなのを全部隠蔽したりとか。あと使わない部分はごっそり削除。

	このjsでは、Flash.VERSION でプレイヤーのバージョンがとれ、Flash.require() でプレイヤーのバージョンをチェックするって感じにしてある。

	前者は単純に文字列が入っててで、後者のrequire関数は

	    if (Flash.require(8,0,0)) {
	        // プレイヤー8以上入ってる！
	    }

	みたいに使う。

	SWFObjectもこの中に突っ込むといいかなとか思ったけど今は必要ではないのでいれていない。

2007-01-28 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 19:07  [life]:
	出社。

	* 02:51  [life]:
	退社。

2007-01-27 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 12:16  [life]:
	出社。

	* 02:20  [life]:
	退社。

2007-01-26 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 21:45 softbank [life]:
	708SC よさげ！

	* 10:27  [life]:
	出社。

	* 00:55  [life]:
	退社。

2007-01-25 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:58 Catalyst::Plugin::Firebug [perl] [catalyst]:
	とか言うのを書いた。

	ロードしておくとDebugモードのときに出力htmlに自動でFirebug liteのコードが埋め込まれるというやつ。

	でも激しくDISられたので、ActionClassにしてリリースしなおす予定。うう＞＜

	* 16:36  [flash] [javascript]:
	ぐぐったら速攻あった。deconceptにｗ

	> [deconcept > RegExp in Flash 8 using ExternalInterface](http://blog.deconcept.com/2005/08/29/regexp-flash-8-using-externalinterface/)

	これ無名関数で書いちゃえばjsいらねーのにな。

	* 16:11 js無名関数 with ExternalInterface [flash] [javascript]:
	[弊社フラッシュチーム](http://level0.cuppy.co.jp/)からは常識じゃん？的なことを言われましたが、FlashのExternalInterfaceに無名関数を使うというテクはなかなか使えるなぁ。

	UserAgent取得

	    var ua = ExternalInterface.call("function() { return navigator.userAgent }");

	JSつかってJSONパースさせてオブジェクトを得る

	    var json   = '{foo:"bar"}';
	    var object = ExternalInterface.call("function(json) { return eval('('+json+')') }", json);

	などちょっとしたことやるならjsファイルでなんかやらなくてもas内だけで完結できる。

	ちょっとがんばればasクラスだけでjsの正規表現つかうラッパークラスとかもできそうだけど、もうありそうかな。

	* 10:15  [life]:
	出社。

	* 02:34  [life]:
	退社。

2007-01-24 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 16:59 Dreamhost [life]:
	流行にのって[http://www.dreamhost.com/](http://www.dreamhost.com/)契約してみた。

	> [hetimaの日記 - レンタルサーバ DreamHost がすごい](http://d.hatena.ne.jp/hetima/20070119/1169169923)

	などを参考に。promo code もここのを使わせていただきました。

	んで、19日にサインアップしたのだけど昨日(23日)になっても全然音沙汰なしなので、supportに問い合わせたところ、30分後くらいに返信が来て

	> Paypalでの支払いは担当者が確認してから手動でアカウントをアクティベートする必要があって僕じゃどうにもできないんよ。ごめん。
	> 担当者に転送しておくから、後で彼から連絡させるよ。

	とかいうようなこと言われる。

	んで、今朝起きたらその担当者からのメールとともになんかいろいろアカウント情報が送られてきてた。

	で、ちょろっと触ってみたんだけどかなり満足。

	とりあえずCPANPLUSいれて、そっからCPAN祭り。DBIC, Catalyst, Plagger。問題なくインストールできた。

	普段cpanpになれているとcpanがうんこすぎてCPANPLUS自体のインストールにすごく手間取ったけどそこからはさくさく。

	で、CatalystでMyAppつくってfastcgiで動作確認するとこまでやった。

	独自ドメイン関係、管理はValue-Domainで一括でやりたいのでネームサーバーをdreamhostのは使わず、dreamhostでしたDNS設定をValue-Domainのほうで手動設定する感じで使っているけどそれでも問題ないみたいで、なかなか。

	rootがないだけで後は何でもできるという感じ。すばらしい。

	* 10:25  [life]:
	出社。

	* 02:52 会社PC [life]:
	[去年末に家PCを買い換えた](http://unknownplace.org/memo/2006/11/22#e002 "CLON - 2006/11/22 - ニューPCげっとーー")のだけど、あまりに快適になりすぎて会社PCの非力さが気になるようになってきた。

	家PCとか平日ほとんど使わないし、会社に持っていこうかなぁとも思ったのだけど、そうすると休日困るし。。

	なんだかんだいってマシンパワーって重要なんだなーと思った次第。

	どうすっかなぁ。

	* 01:54  [life]:
	退社。

2007-01-23 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:26  [life]:
	出社。

	* 00:46  [life]:
	退社。

2007-01-22 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 09:57  [life]:
	出社。

2007-01-20 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 01:00  [life]:
	退社。

2007-01-19 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:15  [life]:
	出社。

	* 00:36  [life]:
	退社。

2007-01-18 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:10  [life]:
	出社。

2007-01-17 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:10  [life]:
	退社。

	* 20:12 VMWare Server は VM の GNU screen [vmware]:
	ちょっとやりたいことがあったので、[VMWare Server](http://www.vmware.com/ja/products/server/)をためしてみた。

	これはやばいなー。クライアントソフトで操作を行うのだけど、それを閉じてもVMはバックグラウンドで動き続けるので、screen的な使い方ができる。

	別PCからつないでもそのまま作業を引き継げるし、同時に複数のPCからひとつのVMを操作することもできるようだ。

	<a href="http://www.flickr.com/photos/typester/360428232/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/153/360428232_ea63bcfc49.jpg" width="500" height="400" alt="win2k on vmware server on ubuntu" /></a>

	これが無償かぁ。もっと早く試してみればよかった。

	* 00:16  [life]:
	退社。

2007-01-16 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:20  [life]:
	出社。

	* 01:57  [life]:
	退社。

2007-01-15 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 12:35 週末はローグギャラクシー [life]:
	なんかディレクターズカット版が出るとか聞いて、それまでにはクリアしたいと思いすすめてみた。

	てか半年以上ずっとやってるんだけど、プレイ時間は24時間だったらしい。わりとやっていなかった。

	この週末で一気に40時間までいった。8章のピース残り二つとってそっから一気に12章まで進めた。

	おもろいおもろい。キサラと眼帯はなんかもうあと一回合成すれば最強装備っぽいくらいになった。

	で、ディレクターズカット版はどうしようかなぁ。今のセーブデータ使えるならちょっと考える。まぁ追加要素しだいですが。

	* 09:54  [life]:
	出社。

2007-01-13 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 04:49  [life]:
	退社。

2007-01-12 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 01:05 マインドストーム [life]:
	キター

	<a href="http://www.flickr.com/photos/typester/353882682/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/152/353882682_20db009990_m.jpg" width="240" height="180" alt="キター" /></a>

	でも遊ぼうと思ったらでんちついてねーのorz

	<a href="http://www.flickr.com/photos/typester/353882688/" title="Photo Sharing"><img src="http://farm1.static.flickr.com/149/353882688_b3699e26ce_m.jpg" width="240" height="180" alt="電池ついてねぇ" /></a>

	あああああ、帰るか。

2007-01-11 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:33  [life]:
	出社。

	* 03:27  [life]:
	退社。

	* 03:02 as2(MTASC) -> as3(Flex2 SDK) の印象 [flash] [as3]:
	as2もjsコンポーネントとして使うとか変な使いかたしかしていなかったけど、それと比較したas3のぱっと見の印象。

	#### Socketクラス

	バイナリ通信用のSocketクラスができたらしい。これはアツイ。

	あとas2+XMLSocketのときの1024以上のポートしか通信できないという制限もなくなっているようだ。

	#### 正規表現

	つかえるーー。`//x` とかもつかえる

	#### リファレンスはオンラインのみ？

	> [Adobe Flex 2 リファレンスガイド](http://livedocs.macromedia.com/flex/2_jp/langref/index.html)

	しかないのかな？ 今までのlivedocsと比べるとまぁ許せる範囲だけど。

	* 01:55 Flex2 SDK いれた [flash] [as3]:
	as3関係スルーしていたけど、なんか公式でFlex2 SDKとか言うのが無償で公開されていてMTASCライクにコマンドラインからas3アプリを作成できる環境があるようなのでためしてみた。@ colinux (Debian etch)

	Flex2 SDKはjava製なのでまずJavaのRuntimeを入れる必要がある。

	etchにはnon-freeにsun javaが入ってるのでそれを入れる

	    $ sudo aptitude install sun-java5-jre
	    Reading package lists... Done
	    Building dependency tree... Done
	    Reading extended state information
	    Initializing package states... Done
	    Reading task descriptions... Done
	    Building tag database... Done
	    The following NEW packages will be automatically installed:
	      defoma gsfonts gsfonts-x11 java-common libfontenc1 libfs6 libft-perl libttf2 libxext6 libxfont1 libxi6 libxp6
	      libxtst6 odbcinst1debian1 sun-java5-bin unixodbc xfonts-encodings xfonts-utils xutils xutils-dev
	    The following NEW packages will be installed:
	      defoma gsfonts gsfonts-x11 java-common libfontenc1 libfs6 libft-perl libttf2 libxext6 libxfont1 libxi6 libxp6
	      libxtst6 odbcinst1debian1 sun-java5-bin sun-java5-jre unixodbc xfonts-encodings xfonts-utils xutils xutils-dev
	    0 packages upgraded, 21 newly installed, 0 to remove and 0 not upgraded.
	    Need to get 36.5MB of archives. After unpacking 96.5MB will be used.
	    Do you want to continue? [Y/n/?]

	X関係のパッケージが山のように入って多少なえるけど続ける。

	あとは [Flex 2 SDK](https://www.adobe.com/cfusion/tdrc/index.cfm?product=flex&loc=ja) をダウンロードして適当なところに解凍。

	    $ unzip -d ~/app/flex flex_sdk_2.zip

	で、もう使える。

	    $ ~/app/flex/bin/mxmlc -help
	    Adobe Flex Compiler (mxmlc)
	    Version 2.0.1 build 155542
	    Copyright (c) 2004-2006 Adobe Systems, Inc. All rights reserved.

2007-01-10 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 09:54  [life]:
	出社。

	* 02:38  [life]:
	退社。

2007-01-09 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 17:55 application/json [life] [firefox]:
	をブラウザで開くようにしたいんだけど、どうすればいいのか。

	* 08:48  [life]:
	出社。

2007-01-08 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 21:53 寝た [life]:
	合宿後20時間ぐらいねてしまた。

	アツイCTO語録が出たのでメモ。

	> 与えられた仕事はas soon as possible。そこにスケジューリングという概念はない

	激烈に仕事が速いことで有名な弊社CTOならではのことば。見習いたい。

2007-01-05 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 07:45 今日から伊豆 [life]:
	休みは仕事とゲームで終わり。

	風邪引いてしまってごろごろしていて、それをいいことにゲーム三昧という感じ。

	 * ローグギャラクシー なんかの遺跡クリアでピース一つ目ゲット
	 * ディスガイアポータブル 1週目11話まで。

	ローグギャラクシーはいったい何ヶ月目なのかすらわかりませんが、おわりません。これ終わったらやるように田中さんからFF借りたんだけどまったく手付かずです。。

	ディスガイアは5話あたりでLvあげも楽になりはまってきた。これはなんかがんばりすぎても不毛なゲームだからまったりやることにしよう。

	で、今日から合宿で伊豆。

	寝すぎでダルイ以外は体調もよくなったし、今日からまたリスタート。

2007-01-01 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 03:54 あけましておめでとうございます！ [perl] [dbic]:
	今年初良いことは、DBICの`inflate_result`上書きによるサブクラス化を知ったことです！

	うおおやっべぇ便利すぎる。

	詳しくは

	> [DBIx::Class::Manual::Cookbook - Miscellaneous recipes - search.cpan.org](http://search.cpan.org/~bricas/DBIx-Class-0.07003/lib/DBIx/Class/Manual/Cookbook.pod#Dynamic_Sub-classing_DBIx%3A%3AClass_proxy_classes_\(AKA_multi-class_object_inflation_from_one_table\))

	参照のこと。

	知らなかったなぁ。いつから使えたのか。

2006-12-30 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 19:53 DNSキャッシュクリア方法 [life]:
	Windows:

	    ipconfig /flushdns

	OSX:

	    lookupd -flushcache

	社内DNS使って .dev とか .orz とか開発用のドメイン作って開発しているのだけど、ごくまれになぜかブラウザからサーバーが見つからなくなってしまうことがあり、その時に使用。

	Windowsだけでしか起こったことはないけど。

	* 18:29 もしかして typo？ 機能 [perl] [catalyst]:
	typoというか、

	    $c->redirect

	とか

	    $c->uri_with

	とか間違えて使って実行してエラーになってからあぁって思って気づくの、うぜぇええ。

	書いてるときにリアルタイムに

	    もしかして: $c->req->uri_with ?

	みたいにおしえてほしい＞＜

	* 16:00  [life]:
	出社。

	風邪を引いた。

	あと鎌倉混んできたなぁ。最近八幡宮を突っ切るのが通勤コースになってるけど明日は無理くさい。

	* 01:48  [life]:
	退社。

2006-12-29 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:40 フォト・コレ！2007 [life] [photo]:
	出してみた。

	 * [http://www.photo-colle.jp/?id=629](http://www.photo-colle.jp/?id=629)
	 * [http://www.photo-colle.jp/?id=895](http://www.photo-colle.jp/?id=895)

	とかとか。

	審査通らないとアップされないからすっかり忘れていたよ。

2006-12-28 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:58  [life]:
	出社。

	* 01:37  [life]:
	退社。

2006-12-27 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 02:08  [life]:
	退社。

	* 00:12  [life]:
	軽くディスガイアろうとしたらPSPのバッテリーきれてた。

	あぁそういえばしばらく家に帰ってないわぁ。

	つか、セーブしてない＞＜＞＜

2006-12-24 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 20:06  [life]:
	出社。

2006-12-23 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 09:45  [life]:
	退社。

	* 09:29 updated C::P::FormValidator::Simple::Auto [catalyst]:
	profiles.ymlとmessages.ymlを別々に書くのがだるすぎるので

	    # profiles.yml
	    action:
	      param:
	        - rule: NOT_BLANK
	          message: param is required!

	とかできるようにした。

	同じことを今までのであらわすと

	    # profiles.yml
	    action:
	      param:
	        - NOT_BLANK
	    
	    # messages.yaml
	    action:
	      param:
	        NOT_BLANK: param is required!

	こんな。めんど。

2006-12-22 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 12:50  [life]:
	出社。

	* 06:19  [life]:
	退社。

	* 00:53 くせ [life]:
	> [kazeburo : ターミナルでまず、エンターキーを押す癖](http://femo.jp/kazeburo/kbgxw52xoq)

	これはなんか、大きく二種類に分かれる気がする。

	なんとなくエンターする人と、なんとなくlsする人。

	僕は後者だなぁ。

	あと、shibuya.pmのときにzigorouさんがエンター連打しているのを確認した。

2006-12-21 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 09:57 mutt の表示がおかしいの直った [mutt] [screen]:
	前にmutt使っていたときに表示がずれるのよねーとかいってたとき、33rpmさんにslang使えば直るかもとかコメントもらったんだけど、slangにしてもおかしいから放置してたんだけど、どうやらscreenのせいだったっぽい。

	screenなしでmutt起動してみたら全然正常だった。。くっそう。

	で、そのscreenなんだけど、

	> [screen install memo](http://www.dekaino.net/screen/01install.html)

	ここで配布されているパッチ当てたらmuttまともになった。すばらしー。

	ついでにmuttを新しくしてみた。以下作業ログ

	mutt:

	    sudo aptitude install libslang1-utf8-dev
	    wget http://www.emaillab.org/mutt/1.5.13/mutt-1.5.13.tar.gz
	    wget http://www.emaillab.org/mutt/1.5.13/patch-1.5.13.mutt-j.ja.1.gz
	    tar -zxvf mutt-1.5.13.tar.gz
	    gzip -d patch-1.5.13.mutt-j.ja.1.gz
	    cd mutt-1.5.13
	    patch -p1 < ../patch-1.5.13.mutt-j.ja.1
	    ./configure --prefix=/usr/local/mutt --without-wc-funcs --with-slang --enable-default-japanese --enable-hcache
	    make
	    sudo make install

	screen:

	    wget ftp://ftp.uni-erlangen.de/pub/utilities/screen/screen-4.0.2.tar.gz
	    wget ftp://www.dekaino.net/pub/screen/screen-4.0.2-deadlock-patch
	    wget ftp://www.dekaino.net/pub/screen/screen-4.0.2-hankanacopy-patch
	    wget ftp://www.dekaino.net/pub/screen/screen-4.0.2-patch-cjkwidth-cvs-2006052001
	    tar -zxvf screen-4.0.2.tar.gz
	    cd screen-4.0.2
	    patch < ../screen-4.0.2-deadlock-patch
	    patch < ../screen-4.0.2-hankanacopy-patch
	    patch < ../screen-4.0.2-patch-cjkwidth-cvs-2006052001
	    ./configure --prefix=/usr/local/screen --enable-colors256
	    # エラーった
	    sudo apt-get build-dep screen
	    ./configure --prefix=/usr/local/screen --enable-colors256
	    # まだエラーったconfig.logみる
	    sudo aptitude install libncurses5-dev
	    ./configure --prefix=/usr/local/screen --enable-colors256
	    make
	    sudo make install

2006-12-20 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:52 Advent Calendar目次は [catalyst]:
	> [http://dev.catalystframework.org/wiki/DocLinks](http://dev.catalystframework.org/wiki/DocLinks)

	このへんからたどると良い。

	* 21:45 Flavourプラギンについての説明を [catalyst]:
	> [Catalyst Advent Calendar - Day 20](http://www.catalystframework.org/calendar/2006/20)

	書いた。

	文書くとネイティブの人にものすごい勢いで校正してもらえるサービス、ほしいなぁ。

	* 13:30  [life]:
	出社。

	* 04:48  [life]:
	退社。

2006-12-19 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:18 C::P::XSendFile supported X-LIGHTTPD-send-tempfile [catalyst] [lighttpd]:
	1.5 動いた記念。

	> [http://svn.unknownplace.org/public/library/perl/trunk/Catalyst-Plugin-XSendFile/](http://svn.unknownplace.org/public/library/perl/trunk/Catalyst-Plugin-XSendFile/)

	Plugin::XSendFile をアップデート。あとでdevリリースでCPANに。

	    # myapp.yml
	    sendfile:
	      tempdir: /dev/shm

	して

	    use Catalyst qw/XSendFile/;

	するだけで、出力が 16kbyte 以上のときは自動で X-LIGHTTPD-send-tempfile 経由での出力になるって感じ。

	16kbyte って閾値と、それ以前に勝手にsendfileるのは設定できるようにしたほうが良いな。ま、おいおい。

	んで、確かに速いんだけど、なんか不安定。ベンチってたんだけど fastcgi プロセス反応なくなるときがある。

	XSendFile の使用有無にかかわらずそうなのでfastcgiサポート自体の問題くさいけどよくわからない。

	* 16:01 Catalyst on Lighttpd 1.5.0 [lighttpd] [catalyst]:
	[新しいの](http://blog.lighttpd.net/articles/2006/12/18/pre-release-lighttpd-1-5-0-r1477-tar-gz "PRE-RELEASE: lighttpd-1.5.0-r1477.tar.gz")でてたのでリベンジ。

	    server.modules = (
	        "mod_proxy_core",
	        "mod_proxy_backend_fastcgi",
	    )
	    
	    server.document-root = "/home/typester/tmp/MyApp/root"
	    server.port = 3000
	    
	    proxy-core.balancer = "round-robin"
	    proxy-core.protocol = "fastcgi"
	    proxy-core.backends = ( "unix:/home/typester/tmp/MyApp/fcgi.socket" )

	でとりあえずMyApp動いた。

	バックエンドがひとつの場合でも proxy-core.balancer を必ず指定しないといけないようだ。でないと

	    mod_proxy_core.c.1550: (trace) backlog: all backends are down, putting /foo (4) into the backlog

	といわれてしまう。

	[この間](http://unknownplace.org/memo/2006/11/16#e002 "CLON - 2006/11/16 - いまだに lighttpd 1.5.0 で")はそれでできなかっただけかも！

	X-Rewrite-* や X-LIGHTTPD-send-tempfile など楽しげな機能でやっと遊べる＞＜

	あと `mod_uploadprogress` のソースもついてきていて、configureスクリプトの do_build のところに追加で書いてみたらビルドできた。これでも遊んでみたい。

	* 12:37  [life]:
	xcezxさんに教えてもらった、[fenrir](http://www.vector.co.jp/soft/win95/util/se362264.html)って言うランチャがすばらしすぎる。

	* 11:02  [life]:
	出社。

	* 00:48  [life]:
	退社。

2006-12-18 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 08:27  [life]:
	出社。

	* 06:49 You've reached the end of the internet [life]:
	del.icio.usでブクマろうとしたらいわれた。メンテ中か。

2006-12-16 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 05:00  [life]:
	退社。

2006-12-15 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 21:24 b2con [life]:
	ストリーミングで見た。

	VMのがよくわかんなかったので聞き流したのと、LTの最後以外は面白かった。行きたかったなぁ。

	* 11:01  [life]:
	出社。

	* 03:21  [life]:
	退社。

2006-12-14 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 22:27 BindLex [perl]:
	使い始めると、なしではめんどくてやってられなくなっちゃうなぁ。。うーむ。

	* 16:42  [life]:
	`1` だったり `t` だったり統一感がないな（ｗ

	.emacsの半分はコピペでできています。

	* 16:37 ido-mode [emacs]:

	    (iswitchb-mode 1)

	をやめて

	    (ido-mode t)

	をためしてみてる。

	> [platypope.org / blog / I need a cool European accent](http://platypope.org/blog/2006/9/8/i-need-a-cool-european-accent)

	より。

	iswitchbライクなバッファ切り替えと同じようなのをfind-fileでも使える。あとfind-file中にC-bするとバッファ切り替えに切り替わるのは人によっては便利かな。逆も可(バッファ切り替えじにC-fでfind-file)

	どうなんだろうなこれは。すぐ戻すかもしれない。

	あとnXML-modeもいれてみたけど、まだ使ってみていない。

	* 11:06  [life]:
	出社。

2006-12-13 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:33 コーヒー、手動ドリップ、マグカップ [life]:
	前までスタバのタンブラーでコーヒーを飲んでいたのだが、どうもいまいちなのでマグカップで飲んでみたところ、やっぱりマグカップで飲むほうがうまかった。

	最近コーヒーメーカーを買ったのでそれを使っていたのだけど、どうもいまいちなので手動ドリップに戻してみたところ、やっぱり手動ドリップのほうがうまかった。

	マグカップについては、多分においかなと思う。タンブラーはふたをしてしまうので匂いがすくなくなる。

	コーヒーメーカーに関しては当たり前という気もする。

	* 10:43  [life]:
	出社。

	* 02:19  [life]:
	退社。

2006-12-12 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 17:13 --keeperr カワユス [perl] [catalyst]:
	いままでlightyのはく微妙にみにくいstderrで開発してたけど、最近myapp_fastcgi.plに追加されたkeeperrに以降。

	見やすいな、やっぱｗ

	* 12:18  [life]:
	出社。

	寝坊しすぎた

2006-12-11 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:33  [life]:
	退社。

	* 09:01  [life]:
	出社。

2006-12-09 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 20:38 JSコンソールにログをはくActionScript [flash] [javascript] [mtasc]:
	いままではLocalConnection使うロガーをつかってたんだけど、JSと同じところで見れたほうが楽かなと思って作ってみた。

	    import flash.external.ExternalInterface;
	    
	    class Logger {
	        public static function trace(msg) {
	            return ExternalInterface.call("window.console.log", msg)
	                || ExternalInterface.call("opera.postError", msg)
	                || ExternalInterface.call("printfire", msg)
	                || ExternalInterface.call("Debug.writeln", msg)
	                || ExternalInterface.call("debug.trace", msg)
	            ;
	        }
	    }

	こんな感じの、もてきっとからぱくってきただけだけど。

	MTASCから利用するときはコマンドラインパラメータに `-trace Logger.trace` とかすればasソース内のtrace()がコンパイル時かってに置換されるのでアプリ内からは普通にtrace()るだけでおｋ

	* 16:27 dnsmasq調子悪い @ debian etch [debian]:
	うちのLAN内の名前解決に使ってるdnsmasqだけど最近反応なくなることが多いなぁ。なんだろう

	起動しなおしてやると動く。。

	* 07:20  [life]:
	退社。

	* 01:32  [life]:
	Flaxとかダサいので、ネーミング募集。

	* 01:24 Flash経由でAjax [javascript] [flash]:
	っぽいことをするライブラリを作った。

	> [http://svn.unknownplace.org/public/library/js/trunk/Flax/](http://svn.unknownplace.org/public/library/js/trunk/Flax/)

	    Flax.Request(
	        'http://example.com/',
	        {
	            method: 'get',
	            onSuccess: function(data) { alert(data) }
	        }
	    );

	みたいな。まだすごくシンプルな機能しかないけど、getとpostできる。

	crossdomain.xmlでドメインを制限しつつ自社サービス間とかでAPIを利用しあったりする用に便利かなと思う。

	簡単な使用例として

	> [http://unknownplace.org/tmp/Flax/examples/flickrsearch/](http://unknownplace.org/tmp/Flax/examples/flickrsearch/ "Flickr search example")

	flickrの検索とかつくった。flickrはJSONPあるからこんなことしなくてもいいんだけど。ほかにいい例がなかった。

2006-12-08 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:42  [life]:
	出社。

2006-12-07 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:54  [life]:
	退社。

	* 10:37  [life]:
	出社。

	* 00:06  [life]:
	退社。

2006-12-06 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 10:35  [life]:
	出社。

2006-12-05 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:00  [life]:
	退社。

	* 12:00  [life]:
	出社。

	あー

2006-12-04 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:08  [life]:
	退社。

	* 22:26 あまんぞ [life]:
	ジャンヌダルク買えるようになってる。

	おっせ、ディスガイア買っちゃったよ。

	* 09:05  [life]:
	出社。

2006-12-01 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:32  [life]:
	出社。

2006-11-30 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:49  [life]:
	出社。

2006-11-29 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:54  [life]:
	退社。

	* 15:58 ダサい解決法 [perl] [tt]:
	    package MyProvider;
	    use base qw/Template::Provider/;
	    
	    sub _load {
	        my ($data, $error) = shift->SUPER::_load(@_);
	    
	        if ($data && $data->{text}) {
	            $data->{text} =~ s/(\[%[ ]+INCLUDE[ ]+["'])(.+)(["'].*?%\])/$1common:$2$3/;
	        }
	    
	        ($data, $error);
	    }

	とかいう適当なProviderをつくってcommon側はこれを指定したら動いた。け、ど、だせえええええ。

	 * テストコード: [http://unknownplace.org/tmp/template/](http://unknownplace.org/tmp/template/)

	パッケージ化するかなぁ。

	ダサいのでもっとうまい方法でやりたいんだけど。

	* 14:17  [game]:
	アマゾンで[ジャンヌ・ダルク](http://www.amazon.co.jp/gp/product/B000H6JSH8/)がずっと買えないのは人気だから？

	発売数日前に見たときすでになかった罠。

	* 13:58 MultiProviderの話 [perl] [tt]:
	> [CLON - 2006/11/27 - 複数のアプリで共通のテンプレートファイルを使う](http://unknownplace.org/memo/2006/11/27#e002)

	これ、 `[% INCLUDE 'common:foo.tt' %]` とかしたとき、さらに foo.tt の中で `[% INCLUDE 'bar.tt' %]` とすると `common:bar.tt` がインクルードされてほしいのだけどそうはならないのがびみょい。

	これ用の Template::Context 作ればいいきがするけど、Templateのソース読むのだるぃ。。

	* 12:16  [life]:
	出社。

2006-11-28 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:23  [life]:
	退社。

	* 10:40  [life]:
	出社。

	* 00:41  [life]:
	退社。

2006-11-27 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 20:09 Amazon S3 [life]:
	アカウントとってみた。

	shibuya.pmで話していたFirefoxの拡張便利。

	<a href="http://www.flickr.com/photos/typester/307583998/" title="Photo Sharing"><img src="http://static.flickr.com/109/307583998_a1a954da46.jpg" width="500" height="375" alt="S3 Firefox Organizer" /></a>

	    firefox.exe -chrome chrome://s3fox/content/s3foxWindow.xul

	とかで単独起動できる。

	* 17:08 複数のアプリで共通のテンプレートファイルを使う [perl] [tt]:
	にはどうしたらいいのかなーとおもってTemplateのdocを眺めていたら

	    my $tt = Template->new({
	        LOAD_TEMPLATES => [
	            Template::Provider->new( INCLUDE_PATH => '/path/to/myapp/templates' ),
	            Template::Provider->new( INCLUDE_PATH => '/path/to/common/templates' ),
	        ],
	        PREFIX_MAP => {
	            default => 0,
	            common  => 1,
	        },
	    });

	こんな感じでやれば、

	    [% INCLUDE 'common:header.tt' %]

	ってやれば2個目のProviderが使われるようだ。なるほど。

	0とか1とかはLOAD_TEMPLATESの配列の添え字を渡すみたい。。

	ちなみに[Template::FAQ](http://search.cpan.org/~abw/Template-Toolkit-2.15/lib/Template/FAQ.pod#Extending_the_Template_Toolkit)にのってる。

	* 10:33  [life]:
	出社。

2006-11-24 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:35  [life]:
	退社。というか帰宅。

	琥珀エビスといかいうのを見つけてお酒かうつもりはなかったのに買ってしまった。うまそう。

	* 13:35 make_schema_at が external クラスも読むようになっている [perl] [dbic]:
	既存のDBに接続してテーブル情報などを取得して、DBIx::Class::Schema のテーブルクラスを作成してくれる Schema::Loader の `make_schema_at` が自分で定義した外部クラスファイルも見てくれるようになっていた。

	    perl -Ilib -MDBIx::Class::Schema::Loader=make_schema_at,dump_to_dir:tmp -e 'make_schema_at("MyApp::Schema", { components => [qw/ResultSetManager UTF8Columns/]}, ["dbi:mysql:myapp","root"])'

	などとすると、./tmp にスキーマクラスをダンプしてくれるのだけど、-Ilib している中にすでに MyApp::Schema::User とかがかいてあると、それも作成するクラスにくっつけてくれる。

	便利だ。

	* 12:04  [life] [dbic]:
	テーブル定義は`Schema::Loader`にまかせてメソッドやリレーション定義だけをテーブルクラスに書いていくのが好き。

	でもさっきResultSetManagerとSchema::Loaderって併用できないことが判明。

	不貞昼寝。

	* 01:25 HTML::Widget [perl]:
	試用中。

	perlコード内でフォーム生成するのは違和感ありすぎるし、気に入らない。うーむ。

2006-11-22 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:59 ニューPCげっとーー [life]:
	Athlon64X2 5000+！！

	もう自作とかめんどうにかんじるようになってしまい、ショップブランドで購入。

	自作するようになってからのメインPCのCPU遍歴

	 * K6-2 350MHz
	 * Duron 1.3MHz
	 * AthlonXP 2100+
	 * Athlon64X2 5000+

	AMDばっかだわー。

	* 10:51  [life]:
	出社。

2006-11-21 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:45  [life]:
	退社。

	* 12:06 DBIx::Class vs mysql vs UTF-8 [perl] [dbic]:
	> [DBIx::Class vs mysql vs UTF-8](http://d.hatena.ne.jp/lestrrat/20061120#1164020246)

	それ、0.7以降(多分)ならconnectionやconnect上書きしなくてもこうかけるよ。

	    __PACKAGE__->connection(
	        'dbi:mysql:foo',
	        'root',
	        {
	            on_connect_do => ['SET NAMES utf8'],
	        },
	    );

	* 10:42  [life]:
	出社。

	* 00:02  [life]:
	退社。

2006-11-20 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 10:29  [life]:
	出社。

2006-11-19 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 11:11 HTML::TreeBuilderのエスケープ処理がよくなっている [perl]:
	> [CLON - 2006/10/08 - HTML::TreeBuilderいいんだけど。。](http://unknownplace.org/memo/2006/10/08#e001)

	のやつ、最近の更新で直ってるみたいだ。

	HTML::Widget を試してみようとインストールしようとしたら、エスケープ関係のテストでこけて、それを追ってみたら気づいた。

2006-11-17 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:52  [life]:
	退社。

	* 12:02  [life]:
	出社。

2006-11-16 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 21:50  [life]:
	退社。

	* 14:00 いまだに lighttpd 1.5.0 で [lighttpd]:
	fastcgiを動かせないオレガイル。

	    # lighttpd.conf
	    proxy-core.protocol = "fastcgi"
	    proxy-core.backends = ( "127.0.0.1:3001" )

	で、

	    ./script/myapp_fastcgi.pl -l 127.0.0.1:3001

	でfcgi起動後アクセスすると

	    mod_proxy_core.c.1288: (trace) backlog: all backends are down, putting / (4) into the backlog

	なんで？＞＜

	付属の spawn-fcgi でfastcgiプロセス起動しても結果は同じ。

	全ログ

	    mod_proxy_core_address.c.136: (trace) resolving 127.0.0.1 on port 3001
	    mod_proxy_core_address.c.63: (trace) adding 127.0.0.1:3001 to the address-pool
	    log.c.139: (trace) server started
	    mod_proxy_core.c.1288: (trace) backlog: all backends are down, putting / (4) into the backlog

	* 10:41  [life]:
	出社。

2006-11-15 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:09  [life]:
	退社。

	* 14:19 ひさびさに dist-upgrade [life] [debian]:
	アップデートリストに subversion やら apache やら気になるものが出ていたので、dist-upgrade ってみた。

	apacheは2.2に、subversionは1.4になった。Debian etch。

	とりあえずsvnのBasic認証が通らなくなって何事かと思ったら、`mod_authz_user` が無効になっていた。何でデフォ無効なんだよ＞＜

	なんかモジュールふえまくりだな、とか今頃思った次第。

	* 10:32  [life]:
	出社。

2006-11-14 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:22  [life]:
	退社。

	* 10:34  [life]:
	出社。今日は気持ちいい陽気だねー。

2006-11-13 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:13  [life]:
	退社。

	* 15:48  [life]:
	と思ったが、今日は残ってないといけないんだったのを思い出したのでスタバいって豆買ってをひいてもらってきた。コロンビアコロンビア。

	鎌倉店は月曜日はおまけで50gの豆をつけてくれるのだが、それがクリスマスブレンドだった。もうそんな時期カー。

	* 14:22 コーヒーミルの取っ手 [life]:
	が行方不明になり発狂寸前だ。

	コーヒーないとやばいわぁ。

	今日は早く帰る。

	* 11:47 田中さんのIRCキーワード [life]:
	ってなんなんだろ？ ぜんぜん反応してくれない。

	* 10:04  [life]:
	出社。

2006-11-10 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:49  [life]:
	退社。

	* 10:32  [life]:
	出社。

2006-11-09 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 21:12  [life]:
	退社。

	* 10:37  [life]:
	出社。

2006-11-08 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:36  [life]:
	退社。

	* 14:04  [life]:
	ホームディレクトリのlsにやたら時間かかるようになって何事かと思ったら、ずーっとまえに `~/musics` にsmbfsでWindowsの音楽ディレクトリマウントしたままになってたのが原因だった。

	マウントした後、そのPCにアクセスできなくなると、タイムアウトまで処理がかえらない(?)ので遅くなるっぽい。

	* 12:16  [life]:
	週末plaggerいじっててCRONジョブとめてそのままになっているのに今頃きづいた＞＜

	未読消化してないのばればれ。

	でも、通常フィードはBloglines経由で取得してるのでとりこぼしはないのはうれしい。

	* 10:33  [life]:
	出社。

	* 05:20 キーボード購入 [life]:
	> [MiniTouch PS/2 Plus JK-APS311-S1](http://www.vshopu.com/SIIG_JKAPS311S1/index.html)

	二台目。気に入ってるキーボードは手に入るうちに買っておけの法則。

	昔FILCOのDFK-81E2ってキーボードが好きだったんだけど、珈琲こぼしてTabキーがつかえなくなってあぼん。そしてそのときにはすでに生産中止になっていた悲劇。

	それの後継っぽいとおもわれるFKB-86Eはいまもまだうってるけど、これはうんこ。

2006-11-07 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:08  [life]:
	退社。

	* 10:37  [life]:
	出社。

2006-11-06 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:19  [life]:
	退社。

	* 14:25  [life]:
	macminiがおかしいのはどうも熱暴走くさいとふんで、ノートの冷却シートを下に引き、かつfanの回転数を常時MAXになるようにしてみた。

	しばらく様子を見よう。

	* 09:00  [life]:
	出社。

2006-11-02 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 22:41  [life]:
	退社。

	* 14:29  [life]:
	httpd もつならAPI経由で発言とかできるようにしたら楽しげだな。

	ってか認証だけじゃなくていろいろ使えるな。ふむ。

	* 14:20 irc based な Web 認証 [life]:
	特定のチャンネルにいる人だけ見えるサイトを作ろうとしていて、どうせなので汎用的な仕組みにしたいとかんがえてみてる。

	ircbotでnick,ipリストを管理して、同時に httpd としてもうごいて、nick,ipリストを返すAPIを提供、とかやるのがいいかなー。botだけで完結するので。

	で、bot部分はPOEプラギンにして、認証使う部分はCatプラギンにすればおｋ？

	そういえばcho45さんのchokanとかも同じようなことをしているって見たことある気がした。あれはどういう感じになってんだろ。

	* 11:22 うまいコーヒー [life]:
	なんか、オレのコーヒーメーカーを社内で共有するようになってから、うまいコーヒー飲める率がへってきた＞＜

	いろんな豆もちよってるんだけど、おっ、これうまいって思うのは大体オレがスタバで買ったやつ。。

	スタバってそんなにおいしくないと思ってたんだけどなぁ。

	とりあえず、みんな酸味強い豆ばっかり買いすぎ＞＜＞＜

	* 10:57 flickrのファビコン [web]:
	変った？よね？？

	田中さんに聞いたら前からそんなのだった気がするとか、エェ。

	* 10:33  [life]:
	出社。

2006-11-01 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:54  [life]:
	退社。よっぱった。

	* 10:33  [life]:
	出社。

2006-10-31 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:21  [life]:
	退社。

	* 12:32 ＞＜ [life]:
	<a href="http://www.flickr.com/photos/typester/284258180/" title="Photo Sharing"><img src="http://static.flickr.com/106/284258180_9705245318_o.png" width="487" height="236" alt="泣ける" /></a>

	* 10:29  [life]:
	出社。

2006-10-30 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:29  [life]:
	退社。

	* 11:44 Adobe Reader 7 [software]:
	Shift押しながら起動するとプラグインが一つも読み込まれていない状態で起動するらしい。

	5へぇ。

	* 10:51  [synergy]:
	> [最速インターフェース研究会 :: Synergyの裏設定「switchDoubleTap」を知らない人が多すぎる](http://la.ma.la/blog/diary_200610291421.htm)

	僕なんかは切り替わっちゃいやんな時は、ScrollLock押してそのWindowから切り替わらなくしてしまってる。

	それで十分なきもするけど、マウス派とキーボード派の違いなのかもしれない。

	* 10:03  [life]:
	出社。

2006-10-28 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 06:47 Talesweaver#2 autoherb 動くようにした [game]:
	インストールしてみた。

	すごいストーリー増えてる！ てか Chapter1 は全部揃ったらしい。とりあえずそれだけでも見よう。

	しかし、今出ているのを全部見るためにはLv200とか必要らしいのでまず無理。

	まぁでもいまのLvでも見えるのは増えているはずなのでそれをとりあえず見よう。

	あとautoherbキー連打部分が動かなくなっていたのでちょっとハック。なんかすげーソース汚いのでもうすこしなんとかしてからreposに追加する。当時のオレひどいなぁ。。

	それまでは

	> [autoherb.0.1.9.zip](http://unknownplace.org/tmp/autoherb.0.1.9.zip)

	とかにおいておくよ。

	でも、ソースを見ていたらなんか懐かしい気持ちになった。このころはWTLとか全然使ってなくてWinAPI直たたきしてたんだなぁ。漢すぎるぜ。

	画面キャプチャでHPとか取得する部分はいまだにちゃんとうごいていて驚いた。

	<a href="http://www.flickr.com/photos/typester/280873305/" title="Photo Sharing"><img src="http://static.flickr.com/90/280873305_45279b59ce_o.png" width="143" height="137" alt="autoherb" /></a>

	* 04:22  [life]:
	退社。

2006-10-27 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:36  [life]:
	出社。

	* 03:25 Talesweaver [game]:
	ってまだあったんだね。

	音楽だけはいまだに聞いたりするけど、なつかしす。

	昔と変っていなければ音楽データはmp3形式でついてくるのでそのためだけにクライアント落とすのもありとかいう。

	* 01:16  [life]:
	退社。

2006-10-26 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 22:20 lightyでRTを動かすの法 [lighttpd]:

	    $HTTP["host"] == "rt.unknownplace.org" {
	         server.document-root = "/usr/local/rt3/share/html"
	         server.errorlog = "/var/log/lighttpd/rt-error.log"
	         accesslog.filename = "/var/log/lighttpd/rt-access.log"
	    
	         setenv.add-environment = (
	              "SCRIPT_NAME" => "/",
	         )
	         url.rewrite-once = (
	              "^/(?!NoAuth/images/)(.*)" => "/rt3/$1",
	         )
	         fastcgi.server = (
	              "/rt3" => ((
	                   "bin-path" => "/usr/local/rt3/bin/mason_handler.fcgi",
	                   "socket" => "/tmp/rt.socket",
	                   "max-procs" => 1,
	                   "check-local" => "disable",
	              ))
	         )
	    }

	`/usr/local/rt3` に入れた場合。

	* 21:36  [baseball]:
	ぐあーーーー。

	* 10:42  [life]:
	出社。

	* 03:27  [life]:
	明日、会社macmini初期化ろう。

	とりあえずインストーラDVDとかをかばんに入れた。

	* 02:53  [life]:
	退社。

	OSX調子悪すぎて作業が進まない。。。

2006-10-25 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 20:27 シリーズ [baseball]:
	こりゃーもうだめかもわからんね。。

	* 12:10 --- ONLY 消し忘れ [perl]:
	追加実装をしているときのテスト書くときは結構 `--- ONLY` とか消し忘れてそのままコミットしてしまうなぁ。

	デフォルトで出来るテストスクリプトにそれのチェックするのも入れるかな。

	他になんかあるかな。

	* 10:57  [life]:
	出社。

	* 02:24  [life]:
	とりあえず退社。

2006-10-24 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:11  [life] [baseball]:
	中里キター

	と思ったら、うたれたｗ

	* 17:08 先発予想 [life] [baseball]:

	 * 今日、朝倉
	 * 明日、中田
	 * 明後日、佐藤充？

	佐藤は不安だなぁ。。

	中田、中里の継投とかみたいな。

	* 10:33  [life]:
	出社。

	VNCRobotは一晩中動き続けてくれてた、カワユス。

	* 01:32  [life]:
	退社。

2006-10-23 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:47 VNCRobot が素晴らしい件 [software]:
	OSX上で、automatorはもちろん、AppleScriptですら自動化できないアプリの操作をを自動化したくて[VNCRobot](http://www.vncrobot.com/)つかってみた。

	予想以上にいいわこれ。VNC経由での操作を自動化できるツールで存在自体は前から知っていたんだけど、使ってみるとCUIモードがあるのがなかなか良い。

	    ./vncrobot.sh -n -c server -r script.txt

	とかでserverにつないで、script.txtに書いた操作を実行できる。

	ローカルでリアルタイムにscriptを生成してそれを実行とかやれば、擬似的ではあるけど、perlなどからいろんなGUI操作を行うことも可能だな。

	* 10:02  [life]:
	出社。

	* 03:58 最終戦 [life] [f1]:
	シューマッハ最後まですごかった。もう見られないのは残念だなぁ。

	あと中盤の琢磨の神がかり的な走りはなんだｗ 来年はもっと上で走れるといいね。

2006-10-22 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 17:35  [life]:
	退社。

	* 15:23 あぁ。。 [life]:
	朝買った冬のくちどけポッキー。PCの上においておいたらひどいことになった。。＞＜

	* 12:56 Planet Catalyst - Japanese Edition [catalyst]:
	> [http://planet.catalystframework.org/jp/](http://planet.catalystframework.org/jp/)

	うーむ。ここはメモなので、リストされるのも微妙な気もする。

	ブログ復活させるよ！ そのうち。

	* 09:09  [life]:
	出社。

	したら机の上に焼き芋が。食えんの？これ。

2006-10-21 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 23:11 scrybe [web]:
	[http://www.iscrybe.com/](http://www.iscrybe.com/)

	どうなってるんだろ、これ。

	* 21:31 初戦勝利 [life]:
	yah!

	* 19:36 日本シリーズ [life]:
	おもしれぇぇぇ。

	ダルビッシュが、1回に荒木井端のバットへし折って、福留3球三振にしたときはだめかとおもったけど。

	* 17:51 あー、補足 [life]:
	いろいろ補足しなくちゃいけないところがあるけど、X-Sendfileをfastcgi経由で使うには、fastcgi設定中で

	    "allow-x-send-file" => "enable"

	を追加する必要あります。

	    fastcgi.server = (
	        "/myapp" => ((
	            "socket" => "/tmp/myapp_fastcgi.socket",
	            "check-local" => "disable",
	            "allow-x-send-file" => "enable",
	        ))
	    )

	こんな感じに。

	他、最初のデモを飛ばしてしまった関係で、説明不足なところが多いです。

	`#shibuya.pm` にはしばらくいますので、質問などありましたらどうぞ。

	* 08:30 Shibuya.pm tech talk #7 slide [life] [shibuya.pm]:
	[http://unknownplace.org/slides/shibuyapm-7/start.html](http://unknownplace.org/slides/shibuyapm-7/start.html)

	* 08:28 帰宅 [life]:
	酔いつぶれた某氏の安否が気になります。

	スライドをアップしてから寝よう。

2006-10-20 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:40  [life]:
	出社。

	* 05:02  [life]:
	唐辛子が気管にはいり死にそうになる。

	* 04:03  [life]:
	退社。

	* 00:30  [life]:
	スライド書くたびに、ちょっとずつSporkS5ThemeKayacが進化していく。

	なんかめんどくて、一気にいろいろいじる気になれない。

	そして、そのせいで[Spork](http://search.cpan.org/~ingy/Spork/)からなかなか脱却出来ない罠。もうingy自身も使ってないんじゃないかな。。

2006-10-19 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:46  [life]:
	出社。

	* 02:19  [life]:
	退社。

2006-10-18 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:42  [life]:
	freenodeにiso-2022-jpなチャンネルを乱立するのはどうかと思った。

	あそこはutf-8ベースなサーバーだと思う。まーしらんしどうでもいいけど。

	* 10:37  [life]:
	出社。

	* 00:31  [life]:
	退社。

2006-10-17 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 16:53  [life] [synergy]:
	`keystroke(super+w)` とか普通に使えたわ。でもsuper+shift+wとかだとエラー。うーむ。

	でもsuper組み合わせるとwindowsでスタートメニューが開いてしまうので

	    section: options
	      keystroke(alt+shift+q) = switchInDirection(left)
	      keystroke(alt+shift+w) = switchInDirection(right)
	    end

	とかしてみた。

	* 16:19  [life]:
	だめだ、sysreqとかbreakとか遠すぎる。どおしよっかなぁ。

	* 15:10 Synergy keystroke [life] [synergy]:
	H課長に教えてもらった！サンクス！

	    keystroke(key) = actions

	とかできたらしい。思いっきり[documented](http://synergy2.sourceforge.net/configuration.html)だった罠。

	しかし、微妙なキーしか割り当てがわからん。特殊キーは遠いのであまり使いたくないのだが

	    section: options
	      keystroke(sysreq) = switchToScreen(x41)
	      keystroke(break) = switchToScreen(macmini)
	    end

	とりあえずこんな感じにした。

	希望では keystroke(super+w), keystroke(super+q) とかそんな感じのを使いたいんだが、指定方法がわからない。

	Numlock割り当てると切り替え時にどうやっても落ちる。ScrollLockは上書きできないみたいだ。起動しない。

	あと、synergy起動後、いちどもマウスを入れてないscreenにホットキーで切り替えるとsynergy落ちる。一回マウス動かしたscreenであればOK。謎。

	* 13:42 Synergy [life]:
	マシン切り替えをキーだけでできんかなぁ。

	マシン切り替えるためだけにマウス動かしてる。。めんどい。

	* 13:31 2.0 [firefox]:
	さっき2.0rc3へアップデート通知が来たので自動アップデート。

	もう普通に使えるなぁ。

	* 10:33  [life]:
	出社。

	* 03:08  [life]:
	会社1Fの廊下で一人キャッチボールをしてからコンビニでジャンプフル立ち読みして帰宅。

	なんかやたら鼻水が出るなぁ。

	* 02:14  [life]:
	退社。

2006-10-16 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:21 prototype & [perl]:
	Test::Base の run 関数おもろいよね。プロトタイプを使ったアプローチ。カッコイイ。

	    run {
	        my $block = shift;
	        is(process($block->foo), $block->bar, $block->name);
	    };

	って引数に関数渡せる。

	これは perldoc perlsub の Prototypes の項目に載ってる

	>  An "&" requires an anonymous subroutine, which, if passed as the first argument, does not require the "sub" keyword or a subsequent comma.

	プロトタイプで & を第一引数に指定した場合その無名関数には sub つけなくても良い。

	これは割と使えそうだ。

	たとえば、STDERRとかになんか出力しちゃううざいモジュールを使ってtestを書いているときに

	    sub execute(&) {
	        my ($out, $err);
	        tie_output( *STDOUT, $out );
	        tie_output( *STDERR, $err );
	    
	        my $res = shift->();
	    
	        untie *STDOUT;
	        untie *STDERR;
	    
	        $res;
	    }

	とか作っとくと

	    my $res = execute { $suck_module_output_stderr->method };

	とかでSTDERRだすことなくそのモジュールのテストかける。いいのー。

	grep とかな実装しかあんまりみないから新鮮に見えるのかな。

	* 20:18 OSXもうだめかもわからん [perl] [osx]:
	run_like が成功するときと失敗するときがあってこまった。

	    run_like input => 'results';

	みたいなときなんかinputのフィルタがかからないときがあったりして失敗してるくさく、なんだと思ったら、うちのOSXの問題だったみたいだ。

	`use_ok` を1個するだけのテストでも何回もやってるとこけたりする。ひどい。。

	こけるときも毎回違う出力。

	    $ prove -lv t/04simpleuse.t
	    t/04simpleuse....dubious
	            Test returned status 0 (wstat 10, 0xa)
	    FAILED--1 test script could be run, alas--no output ever seen

	とかよくわからんのだったり、

	    $ prove -lv t/04simpleuse.t
	    zsh: segmentation fault  prove -lv t/04simpleuse.t

	セグフォってみたり。。

	    $ prove -lv t/04simpleuse.t
	    Operator or semicolon missing before %opts at /System/Library/Perl/5.8.6/Pod/Usage.pm line 487.
	    Ambiguous use of % resolved as operator % at /System/Library/Perl/5.8.6/Pod/Usage.pm line 487.
	    Bareword "key3" not allowed while "strict subs" in use at /System/Library/Perl/5.8.6/Pod/Usage.pm line 482.
	    Bareword "opts" not allowed while "strict subs" in use at /System/Library/Perl/5.8.6/Pod/Usage.pm line 482.
	    Compilation failed in require at /usr/bin/prove line 12.
	    BEGIN failed--compilation aborted at /usr/bin/prove line 12.

	こんなすごいのもでたよ。

	再起動したらとりあえずなんか直ったくさいけど。もー、やばいわうちのmac。

	HDDぶっこわれてんかなーとおもってfsckってみたけど問題なさげだったし。なんだろうほんと。

	* 13:02 MySQLのダブルクオートとsqlt [dbic] [mysql] [sqlt]:
	MySQLのsqlにダブルクオートが含まれてるとsqltがこける。

	なんだろう。シングルクオートに置換すると通る。

	とはいえ、便利すなぁ。sqlt。

	* 10:03  [life]:
	出社。

2006-10-14 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 01:56  [life]:
	退社。帰宅。

2006-10-13 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 19:34 Flash Resource Viewer [flash]:
	Flashのドキュメントの見づらさというか使いづらさに閉口してて、ローカルのヘルプファイルを元にWebアプでビューワ作ろうと思ったんだけど、[Flash Resource Viewer](http://weblogs.macromedia.com/mesh/archives/2004/04/flash_resource.html)とかいうナイスなアプリを発見した。

	Flash付属のドキュメントを開ける野良アプリ。タブ機能もあって意外となかなか良い。

	<a href="http://flickr.com/photo_zoom.gne?id=268438224&size=o" title="Photo Sharing"><img src="http://static.flickr.com/79/268438224_7bbea455c2.jpg" width="500" height="358" alt="Flash Resource Viewer" /></a>

	デフォだとFlash8だとエラーで起動しないんだけど、`config\app.config` を以下のようにしたらちゃんと使えた。

	    <?xml version="1.0" encoding="utf-8"?>
	    <ApplicationSettings xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	    <SearchTermHighlightColor>#FFFF99</SearchTermHighlightColor>
	    <Version>0.93.1592.26849</Version>
	    <HighlightSearchTerm>true</HighlightSearchTerm>
	    <Language>en</Language>
	    <FlashHowtoDirPath>C:\Documents and Settings\All Users\Application Data\Macromedia\Flash MX 2004\ja\Configuration\HelpPanel\HowDoI</FlashHowtoDirPath>
	    <UserHelpDirPath>C:\Documents and Settings\All Users\Application Data\Macromedia\Flash 8\ja\Configuration\HelpPanel\Help\</UserHelpDirPath>
	    <FlashHelpDirPath>C:\Documents and Settings\All Users\Application Data\Macromedia\Flash 8\ja\Configuration\HelpPanel\Help\</FlashHelpDirPath>
	    <ClearLogOnStart>false</ClearLogOnStart>
	    <ShowFlashHelpBooks>true</ShowFlashHelpBooks>
	    <ShowUserHelpBooks>true</ShowUserHelpBooks>
	    <ShowFlashHowtoBooks>true</ShowFlashHowtoBooks>
	    <TopMost>false</TopMost>
	    <StartURL>http://www.markme.com/mxna/helppanel.cfm?category=Flash</StartURL>
	    <Theme>Default</Theme>
	    <OpenTabsInBackground>false</OpenTabsInBackground>
	    <UseEcmaRegex>false</UseEcmaRegex>
	    <HelpPaths />
	    <ToggleNodeOnSelect>false</ToggleNodeOnSelect>
	    </ApplicationSettings>

	[ここ](http://weblogs.macromedia.com/mesh/archives/2005/09/flash_resource_5.html "Mike Chambers - Flash Resource Manager and Flash 8")のコメント欄にあったやつを `s/en/ja/` しただけ。

	それにしても、日本のFlashデベロッパはドキュメントに関して何も不満ないのかな。

	Flash組み込みのビューワは使いにくすぎるし、livedocsは重いし、PDFは論外だし。

	海外だとchmファイル作ってたり多少話題見つかるんだけど、日本だと全然。

	* 04:42 自分へのご褒美制度導入 [life]:
	todoが全部消えたらamazonのカートに入っているのを買ってよい。

	* 03:59 ジャパハリネット [music]:
	たまに聞くといいなぁ。

2006-10-12 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 12:58 今日のOSX [osx]:
	`svk ci` すると同時にフリーズ。もー

	* 10:32  [life]:
	出社。

	* 02:40 Test::Base [perl] [test]:
	のpod一通り読んで、手持ちのアプリのテストを書いてみたりした。

	なるほど、なかなか良いわぁ。簡単なテストはフィルタちょろっと書くだけでOKってのはいいな。

	大抵のモジュールはSYNOPSIS見れば大体使い方がわかるものだけど(というかそういう風に書くよね)、Test::Baseはドキュメント読んでからじゃないとSYNOPSIS意味不明だったりするのもingyクオリティ。

	あと、ドキュメントにもちらほらtypoが。

	* 01:54  [life]:
	退社。

2006-10-11 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 16:23 todo.sh + do.pl [life]:
	ニューtodoスタイルはtodo.shと自作のdo.plで行くことにした。

	Get back to work をやるためには今これしてるっていうフラグが必要なんだけど、todo.sh にはそれがないのでプライオリティで代用。

	今やってるタスクがプライオリティA、それ以外がプライオリティなし。それを簡単にON/OFFできるようにしたのがdo.pl

	`do.pl -do 1` でタスク1にAがつき、`do.pl -done` でそれが作業済みに。`do.pl -pause` で作業中フラグを消す。という感じ。

	んで、最初は `alias do='~/bin/do.pl -do'` とかやろうとしたんだけど、これだと普通のdo使おうとしたとき困るのでtodo.shをハック。

		    --- todo.sh     2006-07-30 05:20:31.000000000 +0900
		    +++ /home/typester/bin/todo.sh  2006-10-11 16:21:33.000000000 +0900
		    @@ -259,7 +259,7 @@
		                    echo "$item: No such todo."
		             fi ;;
		    
		    -"do" )
		    +"_do" )
		            errmsg="usage: $0 do ITEM#"
		            item=$2
		            [ -z "$item" ] && die "$errmsg"
		    @@ -278,6 +278,22 @@
		                    echo "$item:  No such todo."
		            fi ;;
		    
		    +"do" )
		    +       errmsg="usage: $0 do ITEM#"
		    +       item=$2
		    +       [ -z "$item" ] && die "$errmsg"
		    +       [[ "$item" = +([0-9]) ]] || die "$errmsg"
		    +       $HOME/bin/do.pl -do $2
		    +       ;;
		    +
		    +"done" )
		    +       $HOME/bin/do.pl -done
		    +       ;;
		    +
		    +"pause" )
		    +       $HOME/bin/do.pl -pause
		    +       ;;
		    +
		     "list" | "ls" )
		            item=$2
		            if [ -z "$item" ]; then

	.plたたいてるだけという。shわかんね＞＜

	で、`alias t='~/bin/todo.sh'` した。

	* 14:11 slimtimerの使い方 [life]:
	なんていうか、ガッツリタスク管理ツールとしてつかうのではなくて、すぐやるタスクだけ登録しておいてつかっていた。

	ずっとまえに[naoyaさんが書いていたGet Back to Work](http://d.hatena.ne.jp/naoya/20050602/1117681685 "naoyaのはてなダイアリー - Get Back to Work で自己管理")的な使い方。すぐ仕事放置して他のことやってしまうので。。

	* 13:47  [life]:
	今日もガツガツタスクをこなしていくぜ！ とおもったら[slimtimer](http://www.slimtimer.com/)が死亡中。。

	いきなり途方にくれて、意外と依存してたんだなぁと改めて思う。

	[hiveminder](http://hiveminder.com/), [todo.pl](http://bestpractical.typepad.com/worst_impractical/2006/09/todopl_or_how_i.html), [todo.sh](http://todotxt.com/library/todo.sh/) などを試し中。

	todo.sh いいな。

	* 13:11  [osx]:
	iTunes をアイドル状態にしておいておくと固まる気がしてきた。

	一晩放置したら固まってたよ。。

	* 10:35  [life]:
	出社。

	* 00:40  [life]:
	退社。

2006-10-10 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:51 優勝キタ！ [baseball]:
	まぁこれからが本番。

	泣いてる場合じゃねーよ。

	あ、あと消化試合で中里先発しないかな。

	* 10:58  [life]:
	出社。

	* 03:34 ローカルrepos作業場所 [svk]:
	`//tmp` とかでやってたけど、miyagawaさんは `//scratch` とか言う話。かっけ。

	ネーミングセンｓ

	* 02:29 lightyで認証かけて外からPlaggerLDR [plagger]:
	> [ふしはらかんの四方山話 - FrepaもGmailで読めるようにしてみた](http://d.hatena.ne.jp/mikihoshi/20061009/1160405572)
	>
	> 究極的には全部LDRで読みたいのが本音。Plagger Server立ち上げてってのが王道っぽいけど、家でPlagger動かしてるから勤務先で読めなくなるのは色々問題ではあるなあ。

	PlaggerLDR を fastcgi でうごかして、

	    $HTTP["host"] == "ldr.unknownplace.org" {
	        auth.backend = "htpasswd"
	        auth.backend.htpasswd.userfile = "/path/to/htpasswd"
	        auth.require = (
	            "/" => (
	                "method" => "basic",
	                "realm"  => "private area",
	                "require" => "valid-user",
	            ),
	        )
	    
	        fastcgi.server = (
	            "" => ((
	                "socket" => "/tmp/plaggerldr_fastcgi.socket",
	                "check-local" => "disable",
	            )),
	        )
	    }

	とかしてる。

	httpsにしようかなとも思ったけど、別にいいやとおもってそのまま。

2006-10-09 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 20:33  [perl]:
	> [はてなブックマーク - CLON - 2006/10/08 - 手軽にモジュールのバージョンを得る perl -MDBIx::Class\ 999](http://b.hatena.ne.jp/entry/http://unknownplace.org/memo/2006/10/08%23e004)
	>
	> [kdaiba](http://b.hatena.ne.jp/kdaiba/20061008#bookmark-2953179) Perl perldocのどこに書いてあるんだろう

	 * perldoc -f use
	 * perldoc perlrun (の-Mのところ)

	とかでしょうか。

2006-10-08 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 10:39 手軽にモジュールのバージョンを得る perl -MDBIx::Class\ 999	[perl]:

	    $ perl -MDBIx::Class\ 999
	    DBIx::Class version 999 required--this is only version 0.07002.
	    BEGIN failed--compilation aborted.

	なるほど、こうすれば手軽にモジュールのバージョンを得られるのか。(バージョン指定のuse)

	自分の使ってるマシンではaliasでモジュールのバージョンを求めるの設定してるのでいらないけど、そうじゃないところで使うのによさそう。

	* 04:05 Changelogmemo一周年 [life] [clon]:
	昨日で、Changelogでメモを取り出してから一年がすぎた。

	エントリ数1320、clmemo.txtのファイルサイズ349KB。

	そろそろブログも再開しよう。

	* 03:30  [perl]:
	これはひどい、のか？

	と言及を受けました。いやひどくないですごめんなさい。そうだなぁ、エスケープしてないのがおかしいんだものな。

	でもまぁ日本語までエスケープされるのは困るわけで。

	`Text::Textile` なんかも同じように日本語もエスケープしちゃうけど、オプションで `charset('utf-8')` とかできて、こうするとutf8文字はエスケープしなくできる。

	こういうの欲しいなー。

	* 01:49 HTML::TreeBuilderいいんだけど。。 [perl]:
	escape関係が微妙なんだよなぁ。

	    use strict;
	    use warnings;
	    
	    use HTML::TreeBuilder;
	    
	    my $html = 'K&C and K&amp;C';
	    
	    my $tree = HTML::TreeBuilder->new;
	    $tree->parse($html);
	    $tree->eof;
	    
	    print $tree->as_XML;

	これで帰ってくるのは

	    <html><head></head><body>K&#38;C and K&#38;C</body></html>

	これはひどい。

	unsafeなものだけescapeしてsafeなものはしないので、escapeがソースとはずれてしまう。

	& だけじゃなくて <>やマルチバイト系全部こうなる。

	Plaggerでは `HTML::Element::_xml_escape` を上書きして対応してるけど、ちょろっと使う場合にいつもそれを書くはめんどいので、

	    $tree->parse( encode_entities($html, '&') );

	とか、&を余分にエスケープしてからパースさせるようにして

	    decode_entities( $tree->as_XML );

	とかして取り出している。

	ものすごくBKです。なんとかならんかなぁ。

2006-10-07 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 21:59  [perl]:
	> [subtechグループ - Bulknews::Subtech - \[Perl\] Dumping variables Everywhere without use()](http://subtech.g.hatena.ne.jp/miyagawa/20061007/1160224461)

	なるほどー！ dumpたしかにつかったことない。。

	しかし、ビルドイン関数って上書きは出来るけど追加は出来ないんかなぁ。

	* 20:51  [perl]:

	    package P;
	    use strict;
	    use YAML;
	    
	    *CORE::p = sub {
	        warn YAML::Dump(@_);
	    };
	    
	    1;

	こっか。

	できないか。

	* 19:12  [perl]:
	あ、`UNIVERSAL::p` にすればいいんじゃね。

	こんどはuseがめんどくせええええ。

	    alias perld='perl -MUNIVERSAL::p'

	これだ。x

	* 19:11  [perl]:
	> [subtechグループ - ピンク ブロッサム ダイアリー - P](http://subtech.g.hatena.ne.jp/secondlife/20061006/1160108245)
	>
	> みんな use Data::Dumper; dumper $obj; って書いてるのかなぁ。

	めんどいよね。これは前から思っていて、はての君のP的アプローチも考えたのだけど、結局useするのがめんどい。

	`perl -MP` とかするだけでロードされたすべてのモジュールでp関数がexportされればいいのに。

	それってできないのかなぁ。

	* 01:57 CPANPLUS [perl] [cpan]:
	> [daily dayflower - Encode::Detect 入らない](http://d.hatena.ne.jp/dayflower/20061006/1160124596)
	>
	> ところが今日別のマシンで CPANPLUS を使ったらなぜかインストールできました。きちんとログをとってなかったんで違いはわかりませんが，ディストリビューションをインストールできる方法がわかりました。

	CPANPLUS最新にすれば自動でインストールログ取ってくれるよ！

	* 01:29  [life]:
	退社。

	* 01:21 mew で GTD その後 [life]:
	今週一週間ためしてみて、最初はめんどくさいだけだと思っていたけど、そんなことはなかった。

	頭の中がスッキリすると言われているけれど本当にそう。素晴らしい。

2006-10-06 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 01:07 雨 [life]:
	で、帰るのが億劫な件。

	でも睡眠不足やばいんだよなぁ。

2006-10-05 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:35  [life]:
	出社。

	* 03:35  [life]:
	退社。

	* 02:43 dabbrev on zsh [zsh]:
	> [技術メモ帳 - 直前に入力したコマンドの最後の引数を補完](http://d.hatena.ne.jp/lurker/20061004/1159971465)
	>
	> Esc + ドット(.) と入力すると、
	> 
	> 直前に入力したコマンドの最後の引数を補完してくれる。
	> 
	> 複数回入力する事によって、
	> 
	> 過去にどんどんさかのぼっていく。

	naoyaさんのブックマーク経由。知らなかったわぁ。

	んで、それ試しててなんとなくとなりの、`M-,` 押してみたらなんか補完された！

	おお、これヒストリからの補完キーだ。ヤバスヤバス。これも便利だ。emacsとキーをあわせようかな。

	* 00:26  [life]:
	今日の立浪には感動した！

2006-10-04 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:38 Local variables on Recent emacs [emacs]:
	最近のemacsではLocal variablesがあるファイルを開こうとすると

	    The local variables list in clmemo.txt
	    contains values that may not be safe (*).
	    
	    Do you want to apply it?  You can type
	    y  -- to apply the local variables list.
	    n  -- to ignore the local variables list.
	    !  -- to apply the local variables list, and permanently mark these
	          values (*) as safe (in the future, they will be set automatically.)
	    
	        mode : change-log
	      * clmemo-mode : t
	        tab-width : 4
	        left-margin : 4

	とかでるようになったらしい。へぇ、いいね。

	* 10:32  [life]:
	出社。

	* 02:43  [life]:
	退社。

	* 01:38 lighttpd 1.4.12 のセグフォ [lighttpd]:
	やっぱバグだったようだ。さっき修正されたらしい。

	> * [#876 (Segmentation Fault) - lighttpd - Trac](http://trac.lighttpd.net/trac/ticket/876)
	> * [lighty's life - trunk is trunk](http://blog.lighttpd.net/articles/2006/10/03/trunk-is-trunk)

	* 01:29 24シーズン4 [life]:
	昨日の深夜から放送されていた！！！！！ 今気づいた。。あーあ。

	って一瞬悔やんだけど、よく考えたら3もまだみてないわ。

2006-10-03 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:50 lighttpd 1.4.12 [lighttpd]:
	FastCGI周りバグがあるっぽいなぁ。

	たまにセグフォる。しかし再現性がいまいちわからない。

	* 10:31  [life]:
	出社。

	* 00:45  [life]:
	退社。

2006-10-02 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 21:56 inboxを空に保つ [life]:
	> 今までは読み流すだけでよかったどうでもいいメールにたいしても、何らかのアクションを要求されるのはめんどくさいなぁ。

	とか思ってたけど、やってみるとなかなか良いなぁ。

	* 13:29 今日は最高に [life]:
	小指が痛い。。

	実は小指の第一関節を激しく骨折して手術したことがあるのです。しかも左手の。

	emacs使いとしては致命的だZE？

	* 12:13 mysql-standard-5.0.24a-osx10.4-i686.dmg [life]:
	なんか壊れてねー？

	ミラー何個か試しても全部checksumエラー。泣ける。。

	* 04:17  [life]:
	出社。

	* 03:15 mewでGTD [life] [mew]:
	mewの最大の欠点として、メールサーバーと同じPC内で使う場合でもmew用にメールディレクトリを作る必要があるということがあって、これがイヤなのでmuttつかっていたんだけど、Maildirはいじらずにいろいろできるのでまぁ利点にもなるかなと思い直した。

	mewでいろいろやってもMaildirには影響ない！ってことでいろいろ遊んでみることにした。

	そんなわけで、mewを使い出すときに

	    incm -a -b -d ~/Maildir -i ~/Mail

	とはせずに、

	    incm -a -b -d ~/Maildir -i ~/Mail/archive

	とした。(~/Maildirがcourierの通常のmaildirで、~/Mailがmew用の)

	incmはmewが内部的に使うメールを移動させるためのコマンドで、上記は今までのメールをmewのarchiveフォルダへコピーしたということ。

	これでいままでに8万通ほどたまっていたinboxがすっきりarchiveへ移動。inboxは空っぽになった。気持ちいい！

	で、inboxを空っぽに保つ、いわゆるGTDを実践しようと考えた。

	> [ITmedia Biz.ID：メール受信箱を空にする方法](http://www.itmedia.co.jp/bizid/articles/0607/27/news037.html)

	こんなところをみつつ、他に action, hold というフォルダも作った。

	各フォルダは次のように使う

	 * Action
	   * 返信しなくちゃいけないけど1,2分じゃかけないメールや、何らかのアクションを必要とするメールを突っ込む。すぐ返信ができるものは読んですぐ返信しちゃう。
	 * Archive
	   * アクションがすんだメールは全部ここへ
	 * Hold
	   * 保留フォルダ。しばらく参照する可能性のあるメールなんかをいれとく

	数時間やってみて思ったのだが、今までは読み流すだけでよかったどうでもいいメールにたいしても、何らかのアクションを要求されるのはめんどくさいなぁ。

	んー、続くか微妙だわぁ。

2006-10-01 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 20:17 自宅サーバーアップデート [life]:
	Debian sargeからetchにした。いくらなんでもsargeのパッケージは古すぎる。

	一番の理由はSubversionのバージョン。このChangelogMemoのファイルをsubversionのauto-versioningで自動管理したいと思ってたんだけど、sargeのでは古すぎてその機能が使えないので。

	あとついでにメーラもMewに戻した。

	* 04:19 作業ディレクトリ [life]:
	`~/workdir` だったんだけど、`~/dev` に変更。

	いろいろ設定変えなくちゃいけなくてめんどくさい。

	* 04:02  [perl]:
	FastCGIのプロセスを管理できるプログラムが欲しいな。作るか。

2006-09-29 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:37  [life]:
	退社。

2006-09-28 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 10:42  [life]:
	出社。

	* 02:19  [life]:
	退社。

2006-09-27 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 20:59 うーん [firefox]:

	    #search-container {
	      -moz-box-flex: 0 !important;
	      width: 0px !important;
	      max-width: 0px !important;
	      min-width: 0px !important;
	    }
	    
	    #search-container input {
	      width: 50px !important;
	      max-width: 50px !important;
	      min-width: 50px !important;
	    }
	    
	    #search-container input:focus {
	      width: 400px !important;
	      max-width: 400px !important;
	      min-width: 400px !important;
	    }

	できNEEEE。kyoさん助けて＞＜

	何がやりたいかというと、いままではスマートキーワードでの検索を使っていて検索窓は使っていなかったので消していたんだけど、2.0からは検索窓でオートコンプリートが効くということなので使おうかと思って表示したらかなり邪魔。

	検索するときだけ表示したい！

	1.5のときは検索窓を消しているときにCtrl-Kとかすると検索窓だけのウィンドウが開いてそこで検索できたので、それ使えばいいかなとか思ったんだけど、なんか2.0だとこの機能なくなっちゃっててCtrl-K押すとスタートページに飛ばされるだけになっている。何だこの改悪。

	というわけでフォーカスあるときだけ検索窓の幅広けられれば便利かなとか思って書いてみたのが上のCSS。

	まぁうごかないわけですが。

	なんだよー、2.0でもポップアプ出ろよー。

	* 17:04 unary op [perl]:

	    my $foo = ('a', 'b', 'c');
	    print $foo; # => c

	となるのをいまさら知った on IRC

	そういえば、リスト返してくる関数で普通に `$ret = func_returns_array();` とかしてはまったことがあるのを思い出した。

	`perldoc -f scalar` するとのっているが scalar オペレータは単項演算子なので、リストが渡されても最後のものしか評価しないようだ。ほほーん。

	そしてそこに載っている例キモイ。

	* 11:11 自動ls [life]:
	うざいと思うのは僕だけでしょうか。一回試したのだけどすぐ切った記憶。

	* 10:37  [life]:
	出社。

	* 00:38  [life]:
	退社。

2006-09-26 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 03:00  [30boxes]:
	とおもったら30boxesのAPIのページはすでにブックマーク済みだった。。

	* 02:52 30boxes.pl [30boxes] [perl]:
	miyagawaさんの30boxes.plを試すために久々に使ってみる。

	なんかすげ進化ってるわぁ。API key ってなによ？！ ってぐらいの。

	`Date::Manip` メモ。 あと `ExtUtils::MakeMaker::prompt`。勉強になるすなぁ。

2006-09-25 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 06:42  [life]:
	ああーーーうぜーーーーー、コンビニから返って来た直後にコーヒーフィルター切れてることに気づいたわ。

	 1. コンビニ戻る
	 2. 寝る

	* 03:41  [life]:
	コマンド使用率ランキングのやつ、plagger仕事で使ってんのかYO! っていう突込みが誰からも来なくて寂しい。

2006-09-24 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 20:13 コマンド使用率ランキング [life]:
	tokuhiromのところを見て。

	    655 ls
	    168 svk st
	    109 perl -Ilib t/02_basic.t
	     97 ./script/***_server.pl -d
	     92 ./script/***_lighttpd.pl -l /usr/sbin/lighttpd -d
	     81 ./plagger --config ***.yml
	     69 sudo umount ~/shfs/*
	     67 DBIX_CLASS_STORAGE_DBI_DEBUG=1 ./script/***_server.pl -d
	     65 svk diff
	     65 cpanp

	3番目のなんかbasicテスト実行してるのがそんなにあるのが意味不明。

	あー、一時期なんかTDD!TDD!とかいいつつテストリまくりながらモジュール書いてたことあったっけその名残かもしれない。

	あとはCatalystのテストサーバーがおおいね。auto-restertはemacsの自動保存と併用するとえらいことになるので、自分で起動しなおしているからか。

	後仕事のやつは一応`***`と伏字にしてみる。

	後実行したのは最近コレばかりなcolinux。[7月に入れた](http://unknownplace.org/memo/2006/07/10#e002 "CLON - 2006/07/10 - colinux 再インスコではまる")やつなので約2ヶ月分。

	* 15:20  [life]:
	起きた。

2006-09-23 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 20:02 中日vsヤクルト [baseball]:
	若松さんの解説は眠くなるわぁ。

	* 18:02  [life]:
	起きた。

	* 05:00  [life]:
	退社。

2006-09-22 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:41 コーヒーと昼飯を買いに出たのだが [life]:
	考え事をしていたら昼飯を買うのを忘れた。

	気づいたら会社の前に来ていたのでまぁいいやと。。

	* 10:34  [life]:
	出社。

	* 02:43  [life]:
	退社。

2006-09-21 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:36 emacs マニュアル [life] [emacs]:
	はてのくんの真似してemacsマニュアルをひまなとき眺めてみることにしてみるかもしれない。

	iswitchbとかuniquifyとかもemacsマニュアルに載ってたんだなぁ。ちゃんと読んだらだいぶ違いそうだ。

	* 11:16  [irssi]:
	全チャンネルで文字コード変っちゃって良いなら、send text と print text のシグナルフックしてそこで文字コード変換するだけでいい気がした。

	僕はutf-8でしゃべりたいチャンネルがあるのであのような実装になってるのだけど。

	思いついただけで試してない。

	* 10:32  [life]:
	出社。

	* 01:26  [irssi]:
	>     Can't locate package Irssi::Nick for @Irssi::Irc::Nick::ISA at (eval 18) line 73.
	> 
	> っていうのがでまくってしまう。

	うーむ、charsetの問題。よくわからないわぁ。

	眠くないときに調べる。

	* 01:02  [baseball]:
	おお、中里勝利投手になってるやん。

	なんか結果見ると投球回数1のくせに被安打2、与四球1とかよく無失点で抑えたなという内容ですが、勝ちは勝ち。

	てかいつまでリリーフで投げさせるんだろう？？

	* 00:29  [life]:
	退社。

2006-09-20 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 05:34 文字コード変換irssiプラギン [irssi]:
	文字コード変換するプラグインできた。

	    term: utf-8
	    
	    servers:
	      irc.unknownplace.org: iso-2022-jp
	      irc.freenode.net:
	        - channel: '-ja$'
	          charset: iso-2022-jp
	      irc.fujisawa.wide.ad.jp: iso-2022-jp

	みたいにYAMLで定義できる。いまのとこ<del>日本語チャンネル</del><ins>チャンネル名が日本語なチャンネル</ins>に対応できない。

	これでtiarra脱却できるかー。

	> [http://svn.unknownplace.org/public/library/perl/trunk/irssi_scripts/charset.pl](http://svn.unknownplace.org/public/library/perl/trunk/irssi_scripts/charset.pl)

	設定YAMLのパスは `~/.irssi/charsets.yml`

	もう激しく眠いので説明は全力で省きます。後ほとんどテストしてないす。

	* 02:21 .emacs [emacs]:
	しょうがないのでさらすよ。colinux version。日本語のコメントはいまつけたもの。

	結構短いな。でもかなり汚いｗ

	性格が出るのかねー。部屋が汚い人はdotfilesも汚い法則。

	    ;(require 'browse-kill-ring) ; 今使ってない
	    ;(require 'mutt) ; autoload にした
	    
	    ; clmemo 用の設定
	    (setq user-full-name "Daisuke Murase")
	    (setq user-mail-address "murase@kayac.com")
	    
	    ; emacsclient用の設定。~/tmp/emacsclient-caller にはemacsclientを呼び出したscreenのウィンドウ番号が格納してある
	    ; ので自動的にもとのウィンドウへ戻る。詳しくはこのエントリの一番下に書いたリンクを見るといいかも
	    (server-start)
	    (add-hook 'after-init-hook 'server-start)
	    (add-hook 'server-done-hook
	              (lambda ()
	    	    (shell-command
	    	     "screen -r -X select `cat ~/tmp/emacsclient-caller`")))
	    
	    ; まなんか見た目かえたり
	    (menu-bar-mode 0)
	    (column-number-mode t)
	    (line-number-mode t) ; default
	    ; 最近開いたファイル開けるように
	    (recentf-mode)
	    
	    ; color ; 色つけとかね
	    (global-font-lock-mode t)
	    (setq-default transient-mark-mode t)
	    
	    ; input method ; anthy使う自鯖用
	    ;(set-language-environment "Japanese")
	    ;(setq default-input-method "japanese-anthy")
	    ;(autoload 'uim-mode "uim" nil t)
	    ;(global-set-key "\C-o" 'uim-mode)
	    
	    ; load library
	    ;(require 'svk-ediff) ; 使いたいけどうまく動かん
	    (require 'yaml-mode)  ; 最高 clouder++
	    (autoload 'javascript-mode "javascript" "JavaScript mode" t) ; ecmascript-modeよりイイネ higepon++
	    ;(autoload 'ecmascript-mode "ecmascript-mode" "ECMAScript mode" t)
	    ;(autoload 'pod-mode "pod-mode" "pod mode" t)
	    ;(autoload 'navi2ch "navi2ch" "Navigator for 2ch for Emacs" t) ; 昔使ってたシリーズ
	    
	    ; backup and autosave ; なんだっけこれ #foo.txt# ファイルとかのやつだっっけ。わすれた
	    (setq auto-save-default nil)
	    (setq auto-save-list-file-prefix "~/.autosave/")
	    
	    (defun make-backup-file-name (filename) ; バックアップファイルは違うディレクトリに保存するよ
	      (expand-file-name
	       (concat "~/.backup/" (file-name-nondirectory filename) "~")
	       (file-name-directory filename)))
	    
	    (require 'auto-save-buffers) ; 自動セーブのやつ。まぁ必須。でも作業ディレクトリでだけ有効にしてるよ
	    (run-with-idle-timer 0.5 t 'auto-save-buffers "^(/mnt)?/home/typester/workdir/" "^$")
	    (define-key ctl-x-map "as" 'auto-save-buffers-toggle) ; 一応ホットキーでトグルできるようにしてたらしい。今思い出した
	    
	    ; riece ; 昔使ってたシリーズ2 重いしあんまり良くない。irssiのが良いよ
	    ;(setq load-path
	    ;      (append (list "/usr/share/emacs/site-lisp/riece/") load-path))
	    ;(require 'riece)
	    
	    ; mew ; 昔使ってたシリーズ3 割と好きなメーラ。最近のバージョンでHyperEstraierも使えるようになったらしいし、また使うかも
	    (setq load-path
	          (cons "/usr/share/emacs/site-lisp/mew/" load-path))
	    (autoload 'mew "mew" nil t)
	    (autoload 'mew-send "mew" nil t)
	    
	    ; completer ; by kentaro zshみたいにC-x C-fでファイル名補完できるらしいがうごかんんんんｎ
	    ;(require 'completer)
	    ;(setq completer-words "---. <_")
	    
	    ; windmove ; rieceのときのカーソル移動用キーバインド。今はまったく使ってない
	    (require 'windmove)
	    (setq windmove-wrap-around t)
	    (global-set-key "\C-\M-h" 'windmove-left)
	    (global-set-key "\C-\M-j" 'windmove-down)
	    (global-set-key "\C-\M-k" 'windmove-up)
	    (global-set-key "\C-\M-l" 'windmove-right)
	    
	    ; dabbrev ; 動的補完。デフォキーは押しづらすぎるので。M-spaceにも挑戦したがこっちのがよかった
	    (global-set-key "\M-o" 'dabbrev-expand)
	    (setq dabbrev-case-fold-search nil)
	    
	    (global-set-key "\C-h" 'delete-backward-char) ; バックスペースとか遠い
	    
	    ; Changelog memo mode ; Changelog memo 自鯖で使っている
	    ;(autoload 'clmemo "clmemo" "ChangeLog memo mode." t)
	    ;(setq clmemo-file-name "~/public_html/pub/clmemo.txt")
	    ;(global-set-key "\C-xM" 'clmemo)
	    ;(setq clmemo-subtitle-char "["
	    ;      clmemo-subtitle-punctuation-char '(" [" . "]")
	    ;      clmemo-time-string-with-weekday t)
	    
	    ;(defun my-clmemo-title-formatting (title)
	    ;  (setq title (concat (format-time-string "(%T) " (current-time)) title)))
	    ;(setq clmemo-title-format-function 'my-clmemo-title-formatting)
	    
	    
	    ; ELscreen ; 使ってないシリーズ4
	    (global-set-key "\C-t" nil)
	    (setq elscreen-prefix-key "\C-t")
	    (setq elscreen-display-tab nil)
	    (load "elscreen" "ElScreen" t)
	    
	    ; auto mode ; 自動モード設定たち
	    (setq auto-mode-alist
	          (append '(("\\.as\\'" . javascript-mode)
	    		("\\.js\\'" . javascript-mode)
	    		("\\.tt\\'" . xml-mode)
	    		("\\.pod\\'" . pod-mode)
	    		("mutt-[a-z0-9]+-[0-9]+-[0-9]+\\'" . mutt-mode)
	    		("\\.ya?ml\\'" . yaml-mode))
	    		auto-mode-alist))
	    
	    ; mode ;モード別設定
	    (setq cssm-indent-function #'cssm-c-style-indenter) ; CSSモード
	    (setq javascript-indent-level 4) ; Javascriptモード
	    
	    (defalias 'perl-mode 'cperl-mode) ; cperlモード
	    (setq cperl-indent-level 4)
	    (setq cperl-continued-statement-offset 4)
	    (setq cperl-brace-offset -4)
	    (setq cperl-label-offset -4)
	    (setq cperl-indent-parens-as-block t)
	    (setq cperl-close-paren-offset -4)
	    (setq cperl-tab-always-indent t)
	    ;(setq cperl-invalid-face nil)
	    (setq cperl-highlight-variables-indiscriminately t)
	    ; test
	    (setq fill-column 78) ; これ書いてみたけどうごかね。どうでもいいので放置してある
	    (setq auto-fill-mode t)
	    
	    ; mmm-mode ; 挑戦したけどうまくうごかなかったシリーズ
	    ;(require 'mmm-mode)
	    ;(require 'mmm-auto)
	    ;(setq mmm-global-mode t)
	    ;(setq mmm-submode-decoration-level 2)
	    ;
	    ;(mmm-add-classes
	    ; '((html-javascript
	    ;    :submode ecmascript-mode
	    ;    :front "<script[^>]*>"
	    ;    :back "</script>")))
	    ;(mmm-add-mode-ext-class nil "\\.tt\\'" 'html-javascript)
	    
	    ; cperl tidy func ; perltidy-region。 必須だね
	    (defun perltidy-region ()
	      "Run perltidy on the current region."
	      (interactive)
	      (save-excursion
	        (shell-command-on-region (point) (mark) "perltidy -q" nil t)))
	    (defun perltidy-defun ()
	      "Run perltidy on the current defun."
	      (interactive)
	      (save-excursion (mark-defun)
	      (perltidy-region)))
	    
	    ; mode-hook ; モードフック系
	    (defun my-ecmascript-mode-hook () ; javascriptモードにするまで使ってた
	      (c-set-style "cc-mode")
	      (setq tab-width 4)
	      (setq indent-tabs-mode nil))
	    (add-hook 'ecmascript-mode-hook 'my-ecmascript-mode-hook)
	    
	    (defun my-javascript-mode-hook () ; 今はこっち
	      (setq tab-width 4)
	      (setq indent-tabs-mode nil))
	    (add-hook 'javascript-mode-hook 'my-javascript-mode-hook)
	    
	    (defun my-php-mode-hook () ; 昔一瞬使った系。いまはphp-modeすら入ってない
	      (c-set-style "cc-mode")
	      (setq tab-width 4)
	      (setq indent-tabs-mode nil))
	    (add-hook 'php-mode-hook 'my-php-mode-hook)
	    
	    ;(defun my-perl-mode-hook () ; perl-mode使ってたときの設定かな？覚えてないや
	    ;;  (c-set-style "cc-mode")
	    ;  (setq indent-level 4)
	    ;  (setq tab-width 4)
	    ;  (setq indent-tabs-mode nil)
	    ;  (setq continued-statement-offset 4)
	    ;  (setq brase-offset -4)
	    ;  (setq label-offset -4))
	    ;(add-hook 'perl-mode-hook 'my-perl-mode-hook)
	    
	    (defun my-cperl-mode-hook () ; 今はcperl-mode
	      (setq indent-tabs-mode nil)
	      ; BestPractices
	      (setq fill-column 78) ; コレもうごかんわぁ
	      (setq auto-fill-mode t))
	    (add-hook 'cperl-mode-hook 'my-cperl-mode-hook)
	    
	    (defun my-w3m-mode-hook ()
	      (setq w3m-use-filter nil)) ; よく覚えてない、なんだっけか
	    (add-hook 'w3m-mode-hook 'my-w3m-mode-hook)
	    
	    ; from Best Practices ; Vimっぽく % で対応する括弧へ飛べるやつ BestPracticesに載ってたコードは動かんのでどっかからぱくったの .tt 書くとき割と邪魔になるのが玉にキズ
	    ; Use % to match various kinds of brackets...
	    ;(defun match-paren (arg)
	    ;  "Go to the matching paren if on a paren; otherwide insert %."
	    ;  (interactive "p")
	    ;  (let ((prev-char (char-to-string (preceding-char)))
	    ;	(next-char (char-to-string (following-char))))
	    ;    (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
	    ;	  ((string-match "[\]})>" prev-char) (backward-sexp 1))
	    ;	  (t (self-insert-command (or arg 1))))))
	    (defun match-paren (arg)
	      "Go to the matching paren if on a paren; otherwise insert %."
	      (interactive "p")
	      (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
	    	((looking-at "\\s\)") (forward-char 1) (backward-list 1))
	    	(t (self-insert-command (or arg 1)))))
	    (global-set-key "%" 'match-paren)
	    
	    (defun my-insert-date () ; 日付入れる関数。perlモジュールのChanges書くときに主に使用
	      (interactive)
	      (insert (format-time-string "%Y-%m-%dT%R:%S+09:00" (current-time))))
	    
	    ; my keys ;いろいろキー設定
	    (global-set-key "\C-cu" 'w3m-browse-url) ; 昔使ってたかも
	    (global-set-key "\C-cr" 'replace-string) ; 置換ね
	    (global-set-key "\C-c\C-r" 'recentf-open-files) ; 最近開いたファイル一覧
	    (global-set-key "\C-c\C-y" 'browse-kill-ring) ; 使ってね
	    
	    (global-set-key "\C-cd" 'my-insert-date) ; 日付挿入
	    
	    (global-set-key "\C-ct" 'perltidy-region) ; perlコード整形、必須。でもmode-hookでやればいいな
	    (global-set-key "\C-c\C-t" 'perltidy-defun) ; こっちはつかってないや
	    
	    ; colors ; こっからカラーの設定だけどこれはMeadow使ってたときの設定。コンソールでは意味ない(256色モード使ってないので)
	    (require 'font-lock)
	    (set-face-foreground 'font-lock-comment-face "red")
	    
	    ; colors for Tab and Space
	    (defface my-face-b-1 '((t (:background "gray"))) nil)
	    (defface my-face-b-2 '((t (:background "gray26"))) nil)
	    (defface my-face-u-1 '((t (:foreground "SteelBlue" :underline t))) nil)
	    (defvar my-face-b-1 'my-face-b-1)
	    (defvar my-face-b-2 'my-face-b-2)
	    (defvar my-face-u-1 'my-face-u-1)
	    
	    ; タブと全角スペースの色かえる
	    (defadvice font-lock-mode (before my-font-lock-mode ())
	      (font-lock-add-keywords
	       major-mode
	       '(("\t" 0 my-face-b-2 append)
	         ("　" 0 my-face-b-1 append)
	         ("[ \t]+$" 0 my-face-u-1 append)
	         )))
	    (ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
	    (ad-activate 'font-lock-mode)
	    
	    ; test scroll ; 一行ずつスクロールするよ。デフォルトのかくかくスクロールはキモイ
	    ; clouder かどっかにもっとスマートに同じことするのが載ってて、それに変えようと思ってたけど忘れてた。今思い出した
	    (defun sane-next-line (arg)
	      "Goto next line by ARG steps with scrolling sanely if needed."
	      (interactive "p")
	      ;;(let ((newpt (save-excursion (line-move arg) (point))))
	      (let ((newpt (save-excursion (next-line arg) (point))))
	        (while (null (pos-visible-in-window-p newpt))
	          (if (< arg 0) (scroll-down 1) (scroll-up 1)))
	        (goto-char newpt)
	        (setq this-command 'next-line)
	        ()))
	    
	    (defun sane-previous-line (arg)
	      "Goto previous line by ARG steps with scrolling back sanely if needed."
	      (interactive "p")
	      (sane-next-line (- arg))
	      (setq this-command 'previous-line)
	      ())
	    
	    (defun sane-newline (arg)
	      "Put newline\(s\) by ARG with scrolling sanely if needed."
	      (interactive "p")
	      (let ((newpt (save-excursion (newline arg) (indent-according-to-mode) (point))))
	        (while (null (pos-visible-in-window-p newpt)) (scroll-up 1))
	        (goto-char newpt)
	        (setq this-command 'newline)
	        ()))
	    
	    (global-set-key [up] 'sane-previous-line)
	    (global-set-key [down] 'sane-next-line)
	    ;(global-set-key "\C-m" 'sane-newline)
	    (define-key global-map "\C-n" 'sane-next-line)
	    (define-key global-map "\C-p" 'sane-previous-line)
	    
	    ; インクリメンタルにバッファきりかえられるやつ。必須すぎ
	    ;(iswitchb-default-keybindings) ; emacs21の人はこっち
	    (iswitchb-mode 1) ; emacs22の人はこっち
	    
	    ; 同じ名前のバッファがあった場合上の階層のディレクトリとかも一緒に出して区別できるようにユニークなバッファ名にしてくれるやつ
	    ; コレも必須
	    (require 'uniquify)
	    (setq uniquify-buffer-name-style 'post-forward-angle-brackets)

	こう見ると、あんまりカスタマってないなぁ。perl書く分にはこれでまぁ満足。

	この中で必須なのはscreenとの連携部と、cperl-modeの設定、perltidy-region、iswitchb&uniquify、C-hでバックスペースくらいかな。

	次点でjavascript-mode、一行ずつのスクロールとかか。

	.zshrcもさらそうと思ったけどこれ以上にごちゃってるうえにプライベートな関数多いからやめた。

	screenとの連携部分は[ココ](http://unknownplace.org/memo/2005/12/11#e006 "CLON - 2005/12/11 - EmacsClient with screen")とか[ココ](http://unknownplace.org/memo/2005/12/11#e003 "CLON - 2005/12/11 - emacsclient で emacs のウィンドウをアクティブに")に書いたっぽい。

	* 02:03  [perl]:
	やっぱりワードリストは `qw//` だよな。

	左右対称とかDASEEEE

2006-09-19 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 19:48 MogileFS summit [perl] [mogilefs]:
	おもろそうだなぁ、いいなぁ。

	* 19:23  [irssi]:
	irssiの文字コード変換をpluginでやればtiarraつかわなくてもよくね？ というネタを思いついた。

	いまほんと文字コード変換のためだけにtiarraはさんでて意味ないからなぁ。

	* 18:15  [perl] [dbic]:
	> [D-5 出張版 - DBIx::Classページングのドツボ](http://d.hatena.ne.jp/lestrrat/20060919#1158627963)

	おーそうだったんだ。あぶねー。

	同じような使い方してたけど、たまたまページ指定は最後にしていた。

	* 18:01 Cmd-F5 [life] [osx]:
	OSX で Cmd-F5 したら大変なことになった。

	最初なんでそうなってるかわからずに困った。
	再起動しても直んねーし。

	田中さんに教えてもらった。

	* 09:59 朝のオレ [life]:
	なんか急激に甘いもの欲しくなって、朝のオレとかいう謎の飲み物をかってみたが、激しく後悔中。

	こんなの500mlものめるかYO!

	* 09:47 VARCHAR [mysql]:
	charset=utf8 だと短く感じるなぁ。

	感覚的に日本語は2バイト換算で考えてしまうので、`村瀬 大輔` は楽勝ではいるのに `Daisuke Murase` は Mu までしかはいらないとか、エェってなる。

	* 09:42  [life]:
	出社。

	* 01:31  [life]:
	退社。

2006-09-18 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 14:38  [baseball]:
	中里のサプライズ先発ないかなとおもってTVつけてたけど、やっぱり吉見だった。

	しかし吉見イイネこりゃ。

2006-09-17 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 00:04 昌さんおめでとう！ [baseball]:
	つか見れなかったの残念すぎ。何でデイゲームやねん、もー。

2006-09-16 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 19:36  [life]:
	出社。

	* 05:19  [life]:
	退社。

	* 02:20 svk重い [svk]:
	svkが重いのがちょっと耐えられなくなってきた。

	checkoutに数分かかるプロジェクトもあるように。

	`svk co` -> その間にLDR未読消化 -> 未読消化完了 -> あれまだco中だよ、とか。

	まぁプロジェクト全体を新規でcoするのは遅くても許そう。ただ `svk st` でさえ時間かかるのはかなりストレスになる。

	うーむ。

	今、svkのりビジョンは17453で容量は

	    $ du -sh ~/.svk/
	    687M    /home/typester/.svk/

	という感じ。

	重いのはcolinuxだからってこともあるだろうけどなぁ。

2006-09-15 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 19:22  [life] [baseball]:
	今日の川上いいねぇ、ほれぼれするわぁ。

	* 14:09  [perl]:
	今日からワードリストを `qw()` でかく。いままでは `qw//` 。

	なんとなく。

	* 13:56 plaggerライクなHTTP::Proxyフロントエンドスクリプト [perl]:
	を書いた。会社のrepos内にアップしてしまったのでここに貼り付けちゃう。

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    
	    use File::Spec;
	    use File::Find::Rule;
	    use FindBin;
	    use Getopt::Long;
	    use Pod::Usage;
	    
	    use HTTP::Proxy;
	    use YAML;
	    
	    # load config
	    my $config = do {
	        my $config_file = File::Spec->catfile( $FindBin::Bin, 'config.yml' );
	        my $port        = 0;
	        my $host        = '';
	        my $help        = 0;
	    
	        GetOptions(
	            'port|p=s'   => \$port,
	            'host|h=s'   => \$host,
	            'config|c=s' => \$config_file,
	            'help|?'     => \$help,
	        );
	        pod2usage(1) if $help;
	    
	        my $config = YAML::LoadFile($config_file);
	        $config->{global} ||= {};
	        $config->{global}{port} = $port if $port;
	        $config->{global}{host} = $host if $host;
	    
	        $config;
	    };
	    
	    my $proxy = HTTP::Proxy->new;
	    $proxy->port( $config->{global}{port} || 3000 );
	    $proxy->host( $config->{global}{host} || '' );
	    
	    # find plugins
	    my %plugins;
	    for my $plugin_dir ( @{ $config->{global}{plugins_dir} } ) {
	        my @files = File::Find::Rule->file->name('*.pm')->in($plugin_dir);
	        for my $file (@files) {
	            ( my $module = $file ) =~ s!(^$plugin_dir/?|\.pm$)!!g;
	            $module =~ s!/!::!g;
	            $plugins{"HTTP::Proxy::Plugin::$module"} = $file;
	        }
	    }
	    
	    # load and initialize plugins
	    for my $plugin ( @{ $config->{plugins} } ) {
	        my $class = "HTTP::Proxy::Plugin::$plugin->{module}";
	        my $file = $plugins{$class} || $class;
	    
	        eval { require "$file"; };
	        die $@ if $@;
	    
	        my $module = $class->new( $plugin->{config} || {} );
	        $module->register($proxy);
	    }
	    
	    # set log levels
	    my $log_mask = 0;
	    for my $log_level (@{ $config->{global}{log}{mask} || [] }) {
	        no strict 'refs';
	        $log_mask |= &{"HTTP::Proxy::$log_level"};
	    }
	    $proxy->logmask($log_mask);
	    
	    # start daemon
	    $proxy->start;

	HTTP::Proxy自体がすばらしくて、perlユーザーであればこんなことものを使わなくても、自分でさくさくフィルタがかけるのであまり必要はなかったりする。

	ただ再利用性とかperl知らない人用に考えると結構いい感じかもしれない。

	プラグインの例:

	    package HTTP::Proxy::Plugin::Rewrite::Host;
	    use strict;
	    use warnings;
	    use base qw(HTTP::Proxy::HeaderFilter);
	    
	    use List::Util qw(first);
	    
	    sub new {
	        my ( $class, $config ) = @_;
	        my $self = bless { rewrites => $config }, $class;
	    }
	    
	    sub register {
	        my ( $self, $context ) = @_;
	        $context->push_filter( request => $self );
	    }
	    
	    sub filter {
	        my ( $self, $content, $req ) = @_;
	    
	        my $host = first { $req->uri->host eq $_ } keys %{ $self->{rewrites} }
	            or return;
	    
	        $host = $self->{rewrites}->{$host};
	    
	        if ($host and ref $host eq 'ARRAY') {
	            my $path = $req->uri->path || '/';
	    
	            my $target = first { $path =~ /^$_->{path}/ } @$host
	                or return;
	    
	            if ($target->{host}) {
	                $path =~ s/^$target->{path}//;
	                $req->uri->path( $path );
	                $req->uri->host( $target->{host} );
	            }
	        }
	        elsif ($host) {
	            $req->uri->host($host);
	        }
	    };
	    
	    1;

	特定のホストへのリクエストを別ホストへ転送するプラグイン

	これを使う設定yamlはこんな感じ

	    global:
	      host: ''
	      port: 3000
	      plugins_dir:
	        - /home/typester/workdir/httpproxy/plugins
	      log:
	        mask:
	          - ALL
	    
	    plugins:
	      - module: Rewrite::Host
	        config:
	          www.example.com: localhost:3001
	          www2.example.com: localhost:3002
	          www3.example.com:
	            - path: /subbdir
	              host: localhost:3003
	            - path: /
	              host: localhost:3004

	これで

	 * www.example.com へのリクエストは localhost:3001 へのリクエストに
	 * www2.example.com へのリクエストは localhost:3002 へのリクエストに
	 * www3.example.com へのリクエストで、パスが `/subdir*` にマッチするものは localhost:3003 へ、それ以外は localhost:3004 へのリクエストに

	なります。

	パスみて変えるところはプラグインわけたほうがヨサゲではある。

	追記@2006-09-15T14:43:21+09:00: plugin例が間違ってたので修正した。

	* 11:12 bubbles [life]:
	Slimtimerのサイトからたどって発見した[buddles](http://www.3d3r.com/bubbles/index.php)というのを入れてみた。

	これずっと欲しかったアプリだわぁ。Geckoベースなやつないかな。

	* 10:33  [life]:
	出社。

2006-09-14 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:56  [life]:
	退社。

	* 22:14 Text::Hatena [perl]:
	入れようとしたらテストこけた。

	`use strict` のクラス名がsysPreProcではなく`sysStatement`になってるのがだめぽいが、これはText::VimColorの問題？vim自体？

	    [MSG] [Thu Sep 14 21:48:15 2006] Writing Makefile for Text::Hatena
	    
	    [MSG] [Thu Sep 14 21:48:16 2006] make: Warning: File `Makefile' has modification time 0.31 s in the future
	    Manifying blib/man3/Text::Hatena::AutoLink.3pm
	    Manifying blib/man3/Text::Hatena.3pm
	    make: warning:  Clock skew detected.  Your build may be incomplete.
	    
	    [ERROR] [Thu Sep 14 21:48:25 2006] MAKE TEST failed: Bad file descriptor PERL_DL_NONLAZY=1 /usr/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib/lib', 'blib/arch')" t/*.t
	    t/00_text_hatena................Use of uninitialized value in string eq at /home/typester/.cpanplus/5.8.8/build/Text-Hatena-0.15/blib/lib/Text/Hatena/HTMLFilter.pm line 52, <DATA> line 855.
	    
	    #   Failed test in t/00_text_hatena.t at line 292.
	    #          got: '<div class="section">
	    # 	<pre class="hatena-super-pre">
	    # <span class="synPreProc">#!/usr/bin/perl -w</span>
	    # <span class="synPreProc">use strict</span>;
	    # 
	    # <span class="synStatement">my</span> <span class="synIdentifier">$s</span> = <span class="synConstant">&quot;Hello, World!&quot;</span>;
	    # <span class="synStatement">print</span> <span class="synIdentifier">$s</span>; <span class="synComment"># prints Hello, World!</span>
	    # </pre>
	    # </div>'
	    #     expected: '<div class="section">
	    # 	<pre class="hatena-super-pre">
	    # <span class="synPreProc">#!/usr/bin/perl -w</span>
	    # <span class="synStatement">use strict</span>;
	    # 
	    # <span class="synStatement">my</span> <span class="synIdentifier">$s</span> = <span class="synConstant">&quot;Hello, World!&quot;</span>;
	    # <span class="synStatement">print</span> <span class="synIdentifier">$s</span>; <span class="synComment"># prints Hello, World!</span>
	    # </pre>
	    # </div>'
	    
	    #   Failed test in t/00_text_hatena.t at line 307.
	    #          got: '<div class="section">
	    # 	<pre class="hatena-super-pre">
	    # <span class="synPreProc">#!/usr/bin/perl -w</span>
	    # <span class="synPreProc">use strict</span>;
	    # 
	    # <span class="synStatement">my</span> <span class="synIdentifier">$s</span> = <span class="synConstant">&quot;Hello, World!&quot;</span>;
	    # <span class="synStatement">print</span> <span class="synIdentifier">$s</span>; <span class="synComment"># prints Hello, World!</span>
	    # </pre>
	    # </div>'
	    #     expected: '<div class="section">
	    # 	<pre class="hatena-super-pre">
	    # <span class="synPreProc">#!/usr/bin/perl -w</span>
	    # <span class="synStatement">use strict</span>;
	    # 
	    # <span class="synStatement">my</span> <span class="synIdentifier">$s</span> = <span class="synConstant">&quot;Hello, World!&quot;</span>;
	    # <span class="synStatement">print</span> <span class="synIdentifier">$s</span>; <span class="synComment"># prints Hello, World!</span>
	    # </pre>
	    # </div>'
	    # Looks like you failed 2 tests of 20.
	    dubious
	    	Test returned status 2 (wstat 512, 0x200)
	    DIED. FAILED tests 15-16
	    	Failed 2/20 tests, 90.00% okay
	    t/01_autolink_compile...........ok
	    t/02_autolink_text..............ok
	    t/03_autolink_http..............Parsing of undecoded UTF-8 will give garbage when decoding entities at /usr/local/share/perl/5.8.8/LWP/Protocol.pm line 114.
	    Parsing of undecoded UTF-8 will give garbage when decoding entities at /usr/local/share/perl/5.8.8/LWP/Protocol.pm line 114.
	    ok
	    t/04_autolink_ftp...............ok
	    t/05_autolink_mailto............ok
	    t/06_autolink_hatenafotolife....ok
	    t/07_autolink_hatenagroup.......ok
	    t/08_autolink_asin..............ok
	    t/09_autolink_hatenadiary.......ok
	    t/10_autolink_hatenaid..........ok
	    t/11_autolink_tex...............ok
	    t/12_autolink_unbracket.........ok
	    t/13_autolink_hatenaantenna.....ok
	    t/14_autolink_hatenabookmark....ok
	    t/15_autolink_hatenarss.........ok
	    t/16_autolink_hatenaidea........ok
	    t/17_autolink_hatenaquestion....ok
	    t/18_autolink_ean...............ok
	    t/19_autolink_hatenagraph.......ok
	    t/20_autolink_hatenamap.........ok
	    t/21_autolink_google............ok
	    t/22_autolink_hatenasearch......ok
	    t/23_autolink_amazon............ok
	    t/24_autolink_rakuten...........ok
	    t/99_autolink...................Parsing of undecoded UTF-8 will give garbage when decoding entities at /usr/local/share/perl/5.8.8/LWP/Protocol.pm line 114, <DATA> line 855.
	    Parsing of undecoded UTF-8 will give garbage when decoding entities at /usr/local/share/perl/5.8.8/LWP/Protocol.pm line 114, <DATA> line 855.
	    ok
	    Failed Test        Stat Wstat Total Fail  List of Failed
	    -------------------------------------------------------------------------------
	    t/00_text_hatena.t    2   512    20    2  15-16
	    Failed 1/26 test scripts. 2/129 subtests failed.
	    Files=26, Tests=129,  9 wallclock secs ( 3.82 cusr +  1.99 csys =  5.81 CPU)
	    Use of uninitialized value in pattern match (m//) at /home/typester/.cpanplus/5.8.8/build/Text-Hatena-0.15/blib/lib/Text/Hatena/AutoLink/HTTP.pm line 135, <DATA> line 855.
	    Failed 1/26 test programs. 2/129 subtests failed.
	    make: *** [test_dynamic] Error 255
	    
	    [ERROR] [Thu Sep 14 21:48:25 2006] Unable to create a new distribution object for 'Text::Hatena' -- cannot continue

	* 18:06 コミットログに理由を書くこと [life]:
	とあるjobスクリプトでrsync走らせているところがコメントアウトしてあって(俺がしたんだけど)、理由が思い出せなかったのでログ見たら

	    $ svk log -r 12450
	    ----------------------------------------------------------------------
	    r12450 (orig r15165):  murase | 2006-06-20 17:55:53 +0900
	    
	    Commented out rsync job
	    ----------------------------------------------------------------------

	なってて、しねーーーーーーーーーと思った。理由重要＞＜

	* 12:54 Catalyst::Plugin::RPC [perl] [catalyst]:
	個人的にかなり気に入ってるので、ドキュメントがんばって書いて(死にそう＞＜)CPANにうぷろう。

	* 11:46 pillows on googlevideo [web]:
	> [pillows pv - Google Video](http://video.google.com/videosearch?q=pillows+pv)

	わぁ。

	* 11:05  [screen]:
	vbell off なときでもうっかり ^Z^G, ^Zg してしまうことがあって、激しくうざいので

	    bind ^G
	    bind g

	とかした。

2006-09-13 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 10:21  [life]:
	出社。

	* 03:05  [life]:
	退社。

	* 02:56  [life]:
	マックいじってたらこんな時間に。

	 * xcodeいれる
	 * zsh, screenの設定ファイルcoしてマック用にちょと変更
	 * wgetとかlvとかインスコ
	 * keychainいれる
	 * CVS emacsビルド
	 * .emacs co してちょっと変更
	 * .el もろもろいんすこ
	 * cpan祭り、DBICのインスコでエラってあせる
	 * Terminal.app周りいじる、フォント変更、色変更

	とかとか。

	ねむーす。

2006-09-12 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 18:14  [life]:
	keychainをマックに入れようとしてシェルスクリプトだということを始めて知る。

	ずっとdebianパッケージしか使ってなくてきづかなんだ。

	* 10:53  [life]:
	出社。家用のmacminiをもってきた。

2006-09-11 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:00  [life]:
	退社。

	* 20:46 眠いわぁ [life]:
	diaryがgerryに見えるくらい。

	* 18:04 nothingmuchのCahe::FastMmapラッパ [perl]:

	    use base qw/Cache::FastMmap/;
	    
	    sub get {
	        my ( $self, $key ) = @_;
	        ${ $self->SUPER::get($key) || return };
	    }
	    
	    sub set {
	        my ( $self, $key, $value ) = @_;
	        $self->SUPER::set( $key => \$value );
	    }

	カッコイイわぁ。

	* 13:45 SubRequest [perl] [catalyst]:
	テラオソス

	うーむ。

	* 08:44 スタバ月曜お得すぎる [life] [starbucks]:
	なんかまたスタバで豆100g買ったらおまけで50g付いてきたｗ

	先週だけかと思ったら、毎週月曜は無料で50gもらえるらしい。太っ腹すぎる。。

	* 02:14 Use the force, luke [perl]:
	思いついてActivePerlをいれた。

	案の定CPANモジュールいれるのがめんどくさい。テスト失敗したのRT見たり、ソース見たり。

	問題なさげなのはforce installした。

	それでおもったけどCPANのforce installってテストもはしっちゃうからうぜーのね。いつもCPANPLUS使ってたから忘れてたわぁ。

	CPANPLUSだと--skiptestと--forceの両方ある。

	前者はテストしないでインストール。後者は強制的にインストール(同じバージョン入れなおしたりする場合に使う)。

2006-09-10 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 20:51  [life]:
	出社。

2006-09-09 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 20:45  [life]:
	退社。

	* 16:19 Helper::Lighttpd #4 [perl] [catalyst] [lighttpd]:
	`MIME::Types` が入ってたらそっからがーって mimetype.assign をはくようにした。

	てけとう。

	でも、mime-typeが指定されてなくて困るのは、FirefoxでCSSが適用されないってぐらいな気がするというかそんな感じなのでとりあえずこれで。

	* 15:58  [life]:
	> [うさうさ【右脳左脳占い】 How To UsaUsa](http://www.nimaigai.com/howto.html)

	うさ男。

	* 15:49 Helper::Lighttpd #3 [perl] [catalyst] [lighttpd]:
	`-d`オプションもつけた。`-Debug` してなくてもデバッグ出力できるやつ。まぁ`server.pl`と同じ。

	    $ ./script/myapp_lighttpd.pl -l /usr/sbin/lighttpd -d
	    2006-09-09 15:45:39: (log.c.75) server started
	    [debug] Debug messages enabled
	    [debug] Loaded plugins:
	    .----------------------------------------------------------------------------.
	    | Catalyst::Plugin::ConfigLoader  0.13                                       |
	    | Catalyst::Plugin::Static::Simple  0.14                                     |
	    '----------------------------------------------------------------------------'
	    
	    [debug] Loaded dispatcher "Catalyst::Dispatcher"
	    [debug] Loaded engine "Catalyst::Engine::FastCGI"
	    [debug] Found home "/home/typester/tmp/MyApp"
	    [debug] Loaded Config "/home/typester/tmp/MyApp/myapp.yml"
	    [debug] Loaded components:
	    .-----------------------------------------------------------------+----------.
	    | Class                                                           | Type     |
	    +-----------------------------------------------------------------+----------+
	    | MyApp::Controller::Root                                         | instance |
	    '-----------------------------------------------------------------+----------'
	    
	    [debug] Loaded Private actions:
	    .----------------------+--------------------------------------+--------------.
	    | Private              | Class                                | Method       |
	    +----------------------+--------------------------------------+--------------+
	    | /default             | MyApp::Controller::Root              | default      |
	    | /end                 | MyApp::Controller::Root              | end          |
	    '----------------------+--------------------------------------+--------------'
	    
	    [info] MyApp powered by Catalyst 5.7001

	Yes! YEs!

	あとは静的ファイルの mime-types をちゃんとサポートすれば、server.plいらない気がする。

	perl -d するとき以外は。

	* 15:00 error-handler-404 で指定したスクリプトで 404 返すと [perl] [lighttpd]:

	    2006-09-09 14:58:36: (connections.c.1422) Warning: Either the error-handler returned status 404 or the error-handler itself was not found: /script/myapp_fastcgi.pl
	    2006-09-09 14:58:36: (connections.c.1424) returning the original status 404
	    2006-09-09 14:58:36: (connections.c.1426) If this is a rails app: check your production.log

	とか言われるわけだが、404を返す正しい方法が何かあるのだろうか？

	* 12:35  [life]:
	出社。

	* 11:39 Helper::Lighttpd #2 [perl] [catalyst]:
	昨日のやつ、

	> [Fixes Engine::CGI for Lighttpd - typester's vox](http://typester.vox.com/library/post/fixes-enginecgi-for-lighttpd.html)

	このパッチ当てないとうまく動かんよ、って書くの忘れてた。

	あと、myapp_lighttpd.pl に -p オプションつけるとlighttpdの設定を標準出力に出すようにしてみた。

	これで、lighttpd.confで

	    include_shell "/path/to/myapp_lighttpd.pl -p -approot /myapp/"

	とか書くだけで設定完了みたいな。

	まだオプション足りなくて設定きめうちで微妙だけど、なんかいいアイデアな気がする。

	* 11:24  [life]:
	CLONさんとかCLONの中の人とかいわれるようになってきたので、名前を変えよう。

	サイト名じゃないんだよ

	* 03:26  [life]:
	退社。

2006-09-08 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 21:24  [life]:
	vox のブログをplaget catalystに追加してもらえばとか言われたけど、あの面子にはいるとかこわすぎるので<del>断った</del>りたかったんだけど、柔らかく断るフレーズが出てこなかったので軽く無視しておいた。

	恐れ多いのでいいです

	とかって英語でなんていう？

	 * 恐れ多いのでいいです
	 * いいです、恐れ多いし
	 * No thank you, 恐れ多いし

	あとだれｋ！

	* 18:34 Catalyst::Helper::Lighttpd [perl] [catalyst]:
	とか作った。

	> [http://svn.unknownplace.org/public/library/perl/trunk/Catalyst-Helper-Lighttpd/](http://svn.unknownplace.org/public/library/perl/trunk/Catalyst-Helper-Lighttpd/)

	これいれると、

	    ./script/myapp_create.pl Lighttpd

	でscriptディレクトリにmyapp_lighttpd.plができる。これがlighty使ったテストサーバー。

	lighttpdにPath通ってれば

	    ./script/myapp_lighttpd.pl

	叩くだけでOK。デフォポートは3000。他オプションは`-h`で。

	* 13:08 FastCGIでテストサーバーしたい！ [perl] [catalyst]:

	    $ CATALYST_DEBUG=1 ./script/myapp_fastcgi.pl -l :3001
	    [debug] Debug messages enabled
	    [debug] Loaded plugins:
	    .----------------------------------------------------------------------------.
	    | Catalyst::Plugin::ConfigLoader  0.13                                       |
	    | Catalyst::Plugin::Static::Simple  0.14                                     |
	    '----------------------------------------------------------------------------'
	    
	    [debug] Loaded dispatcher "Catalyst::Dispatcher"
	    [debug] Loaded engine "Catalyst::Engine::FastCGI"
	    [debug] Found home "/home/typester/tmp/MyApp"
	    [debug] Loaded Config "/home/typester/tmp/MyApp/myapp.yml"
	    [debug] Loaded components:
	    .-----------------------------------------------------------------+----------.
	    | Class                                                           | Type     |
	    +-----------------------------------------------------------------+----------+
	    | MyApp::Controller::Root                                         | instance |
	    '-----------------------------------------------------------------+----------'
	    
	    [debug] Loaded Private actions:
	    .----------------------+--------------------------------------+--------------.
	    | Private              | Class                                | Method       |
	    +----------------------+--------------------------------------+--------------+
	    | /default             | MyApp::Controller::Root              | default      |
	    | /end                 | MyApp::Controller::Root              | end          |
	    '----------------------+--------------------------------------+--------------'
	    
	    [info] MyApp powered by Catalyst 5.7001
	    FastCGI: manager (pid 3003): initialized
	    FastCGI: server (pid 3004): initialized
	    FastCGI: manager (pid 3003): server (pid 3004) started

	こんな感じで、CatalystのFastCGIプロセスをDebugモードでかつデーモンじゃなく起動して、組み込みのテストサーバー代わりにしたいのだけど、上記以降の出力は全部lighttpdのログのほうに吐き出されてしまうのでびみょい。

	なんとかなんないかなぁと、田中さんに相談中。

	* 10:27  [life]:
	出社。

2006-09-07 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 22:08  [life]:
	帰った。

2006-09-06 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:15  [life]:
	合宿に来た。

	山梨県。すずしい。

2006-09-05 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:19  [life]:
	退社。

	* 13:27 aptitude update [life]:
	ろうとしたら、大量に 404 った。

	aist.ring.gr.jp め。

	* 11:42 コロンビア 100g [life] [starbucks]:

	* 09:54  [life]:
	出社。

2006-09-04 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:44  [life]:
	退社。

	* 17:03 Larryのフィギュア [perl]:
	> [Charsbar::Note - Larry Wallのフィギュア](http://d.hatena.ne.jp/charsbar/20060903/1157211559)

	おー、ingyとかaudreyとかのフィギュアもあわせてsubtech入りたいを再現したい。

	* 08:40  [life]:
	出社。

2006-09-03 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 23:40  [life]:
	ファミマでジャンボチーズフランク頼んだら、店員のおじちゃんレジうち間違えて普通のジャンボフランクの値段で買えた。

	ラッキー！っとおもったけどチーズくどい普通ののほうがうまい＞＜

	* 21:53  [life]:
	退社。なんか眠い。

	* 16:32  [life]:
	出社。

	* 01:08  [life]:
	退社。

2006-09-02 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 23:52  [life]:
	キクタンおわった(といってもちゃんと覚えてるの半分？くらいだ)けどなんか、前より英語力落ちてる気がする。

	つか、なんか英語を書く気にどうしてもなれない。なんだろう。

	んで、そんな気分だったのでPlugin::Flavourのドキュメントなんもかかずにアップしたらなんか叩かれてる、、なぁ。

	* 22:13 Chained [perl] [catalyst]:
	Chainedアクションを使って、`/ユーザー名/...` だとそのユーザーのエントリを表示。

	`/...` だと全員のエントリを表示するアプリケーションの例。

	最後にはてなっぽく `/ユーザー名/profile` もつけてある。

	    package MyApp::Controller::UserView;
	    
	    use strict;
	    use warnings;
	    use base 'Catalyst::Controller';
	    
	    sub user_detect :Chained('/') :PathPart('') :CaptureArgs(1) {
	        my ($self, $c, $user) = @_;
	        $c->stash->{user} = $c->model('DBIC::User')->find({ username => $user })
	            or $c->detach('/default');
	    }
	    
	    sub user_root :Chained('user_detect') :PathPart('') :Args(0) {
	        my ($self, $c) = @_;
	        $c->forward('/view/index');
	    }
	    
	    sub user_tag :Chained('user_detect') :PathPart('tag') :Args(1) {
	        my ($self, $c, $tags) = @_;
	        $c->forward('/view/tag');
	    }
	    
	    sub user_year :Chained('user_detect') :PathPart('') :Args(1) {
	        my ($self, $c, $year) = @_;
	        $c->forward('/view/year');
	    }
	    
	    sub user_month :Chained('user_detect') :PathPart('') :Args(2) {
	        my ($self, $c, $year, $month) = @_;
	        $c->forward('/view/month');
	    }
	    
	    sub user_day :Chained('user_detect') :PathPart('') :Args(3) {
	        my ($self, $c, $year, $month, $day) = @_;
	        $c->forward('/view/day');
	    }
	    
	    sub user_permalink :Chained('user_detect') :PathPart('') :Args(4) {
	        my ($self, $c, $year, $month, $day, $id) = @_;
	        $c->forward('/view/permalink');
	    }
	    
	    sub user_profile :Chained('user_detect') :PathPart('profile') :Args(0) {
	        my ($self, $c) = @_;
	    
	        $c->stash->{template} = 'user/profile.tt';
	    }
	    
	    1;

	うーん、微妙ｗ

	    :Chained('/') :PathPart('')

	はあんまりやらないほうがよさげ。

	* 21:07  [baseball]:
	勝ちゲームで中里キター。

	* 16:29 Chainedアクションを覚えた [perl] [catalyst]:
	便利ねー。これで Plugin::Flavour の半分はいらなくなったから削ってシンプルにしようかと思う。

	CaptureArgsやArgsをRegexで指定できたらもっとあついなぁ。

	引数の数は同じだけど振り分けられる的な。

	* 14:04 diigo [life] [web]: 
	diigo ったのが del.icio.us にポストされないのは del.icio.us のAPIがかわったのにdiigoが対応してないためらしい。田中さんに教えてもらった。

	おしいなぁdiigo。

	今まで使っていたサービスにもクロスポストできる機能というのは、ためしに使ってみても良いな感が相当出るのでかなり重要。

	diigoの完成度がたかければ良いけど、今の状態じゃdel.icio.usに戻るかということになっちゃうよなぁ。

	コンセプトは良いだけに本当に惜しい。

	* 12:42 Text::Tags::Parser [perl]:
	いつも名前忘れるなぁ。

	* 09:47  [life]:
	出社。

	* 01:36  [life]:
	あー、今日diigoったやつ、deliciousにとんでねーー。気がする。

	うーむ信用ならねぇなぁ。もどろうかな。

	* 00:54  [life]:
	退社。

2006-09-01 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 17:03 ldr [life]:
	rate 5,4 だけはちゃんと読もうと思ってんだけど、rate4 はてしない。。

	* 16:35 DBIC+SQLiteでイテレータループ内でupdateが出来ない件 [perl] [dbic] [sqlite]:
	すっかり忘れててまたはまってしまった。

	検索したら自分のメールが出てきてびびる罠。

	> [The Dbix-class January 2006 Archive by thread](http://lists.rawmode.org/pipermail/dbix-class/2006-January/thread.html#531)

	ここにもメモしてた

	 * [CLON - 2006/01/20 - DBD::SQLite のバグ？](http://unknownplace.org/memo/2006/01/20#e002)

	* 10:07  [life]:
	出社。

	* 09:09  [life]:
	起きた。習慣で7時ぐらいに起きられるかと思ったらまったくそんなことはなく、目覚ましで起きたよ。

	* 01:36  [life]:
	退社。

2006-08-31 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:19 Class::Inspector->loaded [perl]:
	の実装はなんか微妙な気がするなぁ。

	    $RE_CLASS = qr/\A[^\W\d]\w*(?:(?:'|::)[^\W\d]\w*)*\z/s;

	この正規表現でネームスペース名のチェックしてるけど、あってるのこれ。

	    Foo::32

	とか、とおらない。

	* 21:49  [life]:
	LDRの未読を消化し終わるまでが、社会復帰です。

	あと236フィード(16600エントリ)。

	* 21:15  [life]:
	でも、キクタン一周終わらせたよ。

	音なしで。

	意味ねぇ。

	* 20:54 20日間拘留の刑 [life]:
	に処せられてました。お久しぶりです。

	酒飲んでて気づいたら留置所で寝ていたという。

	まったく記憶がないのだけど、よっぱらって他人の敷地内に進入して通報されたらしい。

	それで、「覚えてない」という供述が検事の心証を悪くし、留置所での拘留延長が可能な最大日数まで干されてしまったということらしい。

	いい経験にはなったけど、二度と行きたくないな。きがくるう。

	いろんな人に迷惑かけまくったしなぁ。。ごめんなさい。

	* 20:51  [life]:
	メール消化。うえっぷ。

	* 16:14  [life]:
	出社。

	* 15:00  [life]:
	出所。

2006-08-10 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 11:04 PlaggerLDR: レートリセット [life] [plagger]:
	なんか、catalyst系のレートが0になっちゃってるなぁとか思ったら、フィードURLが変っていた。

	そうか、今のStore::DBICはFeedURLで分類してるからそれが変ると別フィード扱いになっちゃうんだなぁ。ummmm。

	* 10:32  [life]:
	出社。

2006-08-09 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:11 macmini 購入 [life]:
	macbook売って、macmini買った。

	今会社においてるのとどっちを家用にしようかな。

	* 22:33  [life]:
	退社。

	* 10:33  [life]:
	出社。

	* 00:38  [life]:
	退社。

2006-08-08 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:57 Behaviour.jsライクな設定でエレメントに音を鳴らすイベントをつけるライブラリ [javascript]:
	を作った。

	> [http://svn.unknownplace.org/public/library/js/trunk/JSound/](http://svn.unknownplace.org/public/library/js/trunk/JSound/)

	使い方は

	    <script type="text/javascript" src="/js/prototype.js"></script>
	    <script type="text/javascript" src="/js/sound.js"></script>
	    <script type="text/javascript">
	    
	        Sound.swf = 'sound.swf'; // sound.swf のパスを指定 (デフォルト /swf/sound.swf)
	    
	        // 設定
	        var rules = {
	            // CSSライクなセレクタでエレメントを指定
	            'a': {
	                onmouseover: '/static/sample/foo.mp3', // イベントとサウンドファイル指定
	                onclick: '/static/sample/foo.mp3'
	            },
	            '#foo a': {
	                onmouseover: '/static/sample/foo.mp3'
	            },
	            '.blah a': {
	                onmouseover: [
	                    '/static/sample/foo.mp3',  // サウンドファイルを配列で指定すると
	                    '/static/sample/bar.mp3'   // その中からランダムで再生される
	                ]
	            }
	        };
	    
	        // イベント登録
	        SoundEvent.onloadregister(rules);
	    
	    </script>

	こんな。prototype.js 1.5 以上が必要。重複するエレメントがあるばあい下に書いた方が有効になります。なのでa全体に適用とかいうセレクタは一番上に。

	Javascript Sound library とか id:brazil さんの FlashProxy とか見てたら面白くなってきて、自分でも作ってみたという感じ。

	MTASC + ExternalInterface おもろいわぁ。

	* 18:17 (function(){ なんかコード })(); [javascript]:
	ずっと何でこんな書き方すんだろとおもってたんだけど、MTASCのサイト見ててわかった。

	JavaScriptやActionScriptって変数のスコープがブロックじゃなくて関数なんだね。だからperlとかの感じでブロック作ろうとするとタイトルのような書き方になっちゃうわけか。

	* 10:32  [life]:
	出社。

2006-08-07 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:15  [life]:
	退社。

	* 11:50 ユーコンブレンド 100g [life] [starbucks]:
	なんか月曜はお試しに豆50g配布中とかで、オーシャンサイドブレンドを50gもゲット。すごい。

	鎌倉店++

	* 10:58  [plagger]:
	遅レス読んでると、babieさんはplaggerを動かすPCは常時立ち上げっぱなしのサーバー的なものであると思っている感じがするが全然そんなことはない。

	`Subscription::Bloglines` とか `Subscription::Livedoor` とかつかえばBloglinesやLDRにフィードの巡回は任せられるのでplagger動かすPCがたまにしか起動しないものでも取りこぼしはない。

	* 10:54 昼寝スペース [life]:
	久しぶりに会社に泊まったので、寝るついでにうまいことして簡易ベッドを会社の席の横に設置。

	思い立ったらすぐ仮眠可能。

	* 04:20 F1見逃した [life] [f1]:
	歴史的瞬間が！！＞＜＞＜＜＜

2006-08-06 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 23:31 コーディングスピード [life]:
	前よりは大分はやくなったかなぁ。

	前までは、どうしようかなーどうしようかなーと考えてまったく進まない状態がかなり長かったんだけど、miyagawaさんとかうちのCTOとか見てたらとにかく速くて。あーこれはコード書きながら考えてんだな、と思ってそれからそれをまねしようとしてきたけどなかなかできなかったけど最近は出来てる気がする。

	* 22:10  [life]:
	20時ちょっと前くらいに出社。いまにいたる。

2006-08-04 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:18  [life]:
	退社。

	* 17:55  [life]:
	同じこと何回も聞いてくんじゃねーよハゲが！！！

	と思っていたが、これはオレの説明が下手だから起こる現象という新事実。

	* 17:16 Amazonから大量に [life]:
	荷物が。

	 * CD5枚
	 * DSブラウザ
	 * PS2

	PS2は自宅宛だったのに、一緒に会社にもってこられた。

	てなわけでいまさらPS2をゲット。FFやっちゃうよ。

	* 16:35 Schema::Loader::make_schema_at 便利 [perl] [dbic]:
	Schemaクラスの雛形つくるスクリプトを書こうと思って、sqltの出力ベースにしてやるかとか思ったらなんかcolinuxだとtestにこけたので、Schema::Loaderのdebug出力を基に作るかとか思ってSchema::Loaderのぞいてたら、なんかmake_schema_atとかいうのでやりたいことができた。

	いつのまに。coolすぎるぜ。

	すこし出力ファイルいじりたいからラッパスクリプト書くかな。

	* 12:20 CLASS.pm とか [perl]:
	きもいよ。

	* 10:29  [life]:
	出社。

2006-08-03 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 21:14  [life]:
	退社。

	* 11:07 diigo [web]:
	素敵すぎる。しばらく使う。

	* 10:24  [life]:
	出社。

2006-08-02 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 19:39  [life]:
	退社。

	* 18:31  [baseball]:
	種田うぜーーーー。

	つか山本昌が140km出してるよ。。

	こういう時は打たれるんだよな。。

	* 10:16  [life]:
	出社。

	* 00:52 PlaggerLDR を IE で動かす [plagger]:
	[Turnabout](http://www.reifysoft.com/turnabout.php) というのでIEでもGreasemonkeyぽいのが動くというのをAjaxianでみて、これ使えばPlaggerLDRをIEで動かせるんじゃねとか思って、まららんに教えてもらいつつやってみた。

	    === assets/PlaggerLDR/hackldrapi.user.js
	    ==================================================================
	    --- assets/PlaggerLDR/hackldrapi.user.js     (revision 7604)
	    +++ assets/PlaggerLDR/hackldrapi.user.js     (local)
	    @@ -10,6 +10,7 @@
	     */
	    
	     (function(){
	    + if(typeof unsafeWindow == "undefined"){unsafeWindow = window}
	      var w = unsafeWindow;
	      var NativeAPI = w.API.prototype.post;
	      var Conf = {};
	    @@ -39,7 +40,12 @@
	    
	      function save_servers(){
	        // to json, firefox only
	    -   var json = servers.toSource();
	    +   //var json = servers.toSource();
	    +   var json = '({';
	    +   for (var i in servers) {
	    +       json += "'"+i+"':" + "'"+servers[i]+"',";
	    +   }
	    +   json = json.replace(/,$/, '})');
	        GM_setValue("servers", json);
	      }
	      function add_server(name,host){

	TurnaboutではunsafeWindowは普通にwindowなんでそれなおしたのと、toSourceはFirefox限定なのでそこを無理やりjson文字列作るように変更しただけで動いた！
	まららんありがとう！

	<a href="http://www.flickr.com/photos/typester/203977158/" title="Photo Sharing"><img src="http://static.flickr.com/62/203977158_cbc26f68bd_m.jpg" width="240" height="174" alt="PlaggerLDR with IE" /></a>

	まぁつかわんけどｗ

2006-08-01 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:23  [life]:
	退社。

	* [s]17:54 Store::DBIC版plagger backtick [plagger]:
	rate 5 or 4 の未読数だけ表示。すごく適当。

	    #!/usr/bin/env perl
	    
	    use strict;
	    use warnings;
	    use FindBin;
	    use File::Spec;
	    use lib File::Spec->catfile( $FindBin::Bin, 'lib' );
	    
	    use List::Util qw/first/;
	    use Plagger::Schema::SQLite;
	    
	    my $schema = Plagger::Schema::SQLite->connect( 'dbi:SQLite:/home/typester/workdir/plagger/plagger.db' );
	    $schema->storage->on_connect_do( ['PRAGMA synchronous = OFF'] );
	    
	    $| = 1;
	    while (1) {
	        my @rates = $schema->resultset('Feed')->search(
	            { 'entries.read' => 0 },
	            {   join            => [qw/entries/],
	                group_by        => [qw/me.rate/],
	                include_columns => ['count(*)'],
	                order_by        => 'me.rate DESC',
	            }
	        )->all;
	    
	        print 'Plagger(';
	        for my $rate ( reverse 4 .. 5 ) {
	            my $data = first { $rate eq $_->rate } @rates;
	    
	            print $data
	                && defined $data->get_column('count(*)')
	                ? $data->get_column('count(*)')
	                : '0';
	            print ',' unless $rate == 4;
	        }
	        print ") \n";
	    
	        sleep 60;
	    }

	* 16:38 はかそん [life] [plagger]:
	定期的にやるのいいなぁ。

	plaggerとか動き出すとあまり弄らなくなるから、そういう時間を作るという意味でもいい。

	* 14:47  [life]:
	[書いた](http://rt.cpan.org/Ticket/Display.html?id=20783)。

	* 14:34 WWW::Blog::Metadata [perl]:
	Typepadのfeed数が変ったせいかテストこける。

	    --- t/01-extract.t.orig 2006-08-01 14:32:46.448523382 +0900
	    +++ t/01-extract.t      2006-08-01 14:32:02.566356991 +0900
	    @@ -28,7 +28,7 @@
	     $meta = WWW::Blog::Metadata->extract_from_uri('http://btrott.typepad.com/');
	     ok($meta);
	     ok($meta->feeds);
	    -is(scalar @{ $meta->feeds }, 2);
	    +is(scalar @{ $meta->feeds }, 3);
	     is($meta->feeds->[0], 'http://btrott.typepad.com/typepad/atom.xml');
	     is($meta->feeds->[1], 'http://btrott.typepad.com/typepad/index.rdf');
	     is($meta->foaf_uri, 'http://btrott.typepad.com/foaf.rdf');

	うーむ、こういうテストの書き方はどうなんだ。RTかいとくか。

	* 10:43  [life]:
	出社。

2006-07-31 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:14  [life]:
	早く帰ろう週間中。

	この時間帯に帰るとコンビニにて熾烈な立ち読み争いが楽しめます。

	今日は1冊しか残ってなかったジャンプゲットして周りに立つ人プレッシャーに耐えつつ完読してきました！

	* 21:20  [life]:
	退社。

	* 19:00 WWW::Robot的なの [perl]:
	`WWW::Robot` ちょっといいなと思って使おうと思ったんだけど、今の`LWP::RobotUA`だとちょっとコード書き換えないとうごかねー。

	RTみてみたら[二年も放置されてる模様](http://rt.cpan.org/Public/Bug/Display.html?id=4209)。

	うーむ。他に何か言いのありますか？ URL渡すとリンクたどってなんかする系。

	`WWW::Robot`はなんかhookで処理追加できていい感じなんだよなー。再発明しちゃおっかなーー。

	てかなんかこれ系モジュールのきなみ最終更新古いなぁ。なんか見逃してる予感。

	* 17:03 Algorithm::C3 0.02 [perl]:
	あとでためすとかいいつつ結局なにもしてなかったblblackさんのC3高速化パッチですが、本家に適用されたみたい。

	あｔｄｔｍｓ

	* 10:05  [life]:
	出社。

2006-07-30 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 05:16 メモカ死亡 [life] [game]:
	ひさしぶりにPS1だしてきて、よしこれでクロノクロスでもやるかと思ったらメモリーカードがまっさらになってる！

	数年通電してないので揮発しちゃった。。。のかね？

	あああああもーーーーまじすかｋーまじすか。

	とりあえずお詫びにPSPでクロノトリガーとクロス出してくれ。あーそしたらPSP名機確定だけどなぁ。

	* 04:12 svkでためしに作ってみる [svk]:
	なんかふと思いついたプログラムとかためしに作ってみるときとかに、svkのローカルreposを使うとイイよという話。

	    $ svk mkdir //tmp/myapp -m 'created myapp directory'; svk co //tmp/myapp

	とかして作業ディレクトリ作成。いろいろ作業作業コミットコミットしたのち、使えるなーと思ったら本reposにマージ。

	    $ svk sm -b XXX //tmp/myapp //mirror/myrepos/path

	`-b XXX` には最初にディレクトリ作ったときのリビジョン番号を指定してあげればOK。svk cpとかでブランチきったわけじゃないからこっちでベースポイント指定してあげないとsmergeできないの（多分

	こないだつくったXSendFileとかはこんな感じで作った。そのときのログはこんな感じ。

	> [http://dev.unknownplace.org/public/changeset/337](http://dev.unknownplace.org/public/changeset/337)

	一括でマージされてしまうのがイヤなら `-I` つければsvkでciしたのと同じものがそれぞれ本reposにciされる。

	rXXXX@hostname みたいなsvkのログがうざければ `--verbatim` すればいい。

	あと `-C` で実際にマージはせずにチェックだけ出来る。

	svkサイコウ。

	とかいうvoxの下書きメモ。

2006-07-29 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 00:36 gerry狙い撃ち [baseball]:
	gerryの話してて思い出したんだけど、中日ドラゴンズの山本リンダの狙いうちの応援テーマって、昔は外人用だったよね。

	オレはライアルからだと思ってたけどゲーリーってやつがいたらしい（現役<del>生まれる前</del><ins>でもなかった</ins>

	で、ライアルは3代目なんだって。[wikipedia参照のこと](http://ja.wikipedia.org/wiki/%E3%82%B2%E3%83%BC%E3%83%AA%E3%83%BC%E3%83%BB%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%83%E3%83%81)

	今はチャンスのとき誰でもに使われてるよね。

	後なんか昔は外人用だったからか、チャララララ、HEY!、チャララララ、HEY! 見たいな感じだったけどいまそれよりみんなで「ねーらーいーうーちー」とかいってるほうが目立ってるね。

	立浪のときもなんか同じように使わるようになっててちょっとやだなぁとか。立浪は立浪のあれをちゃんと使って欲しいよ。今日代打で出たけど音声聞いてなかったなぁ、そういえば。初球うちで速攻終わっちゃったしｗ

	* 00:01  [life]:
	退社。

2006-07-28 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 10:39  [life]:
	出社。

	* 08:19 体調 [life]:
	よくなった。

2006-07-27 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 21:44  [life]:
	退社。

	* 11:04  [life]:
	出社。

2006-07-26 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:33 体調最悪 [life]:
	今日はほとんど仕事できなかったなぁ。今日は10時間ぐらい寝てやろう。

	* 21:47  [life]:
	退社。

	* 11:58  [life]:
	出社。

	なんか取材に来ていた人におかえりなさいとかいわれた。ごめんなさい＞＜

	* 00:13  [life]:
	退社。というか帰宅。

2006-07-25 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 16:13 リフトバリーブレンド 100g [life] [starbucks]:

	* 13:56 DBIC が起動時の重いのは C3 のせい [perl] [dbic]:
	らしい。さっきIRCでそのパッチが出てた。

	後で見てみよう。

	開発中アプリの再起動に時間かかって結構致命的なのよね。

	* 13:14 GMailユーザー [life]:
	まったくメールの引用しない人が結構いてうぜい。

	話題を追うのにわざわざスレッド表示にきりかえないという。

	* 10:56  [life]:
	出社。

	* 01:55  [life]:
	退社。

2006-07-24 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 17:00  [subversion]:
	> [svn fsfs, svnfs < 24 < July < 2006 < nulog, NULL::something : out of the headphone](http://lowreal.net/logs/2006/07/24/1)
	>
	> svn の HEAD を自動で公開したい。Apache さんが HEAD を普通のファイルとして認識して、普通にアクセスできる感じ。既存のものをそのままバージョン管理するような。

	    SVNAutoversioning On

	でいいんじゃないと？おもった。

	でもWindowsのWebDAV機能はうんこすぎるのでまともに使う場合はdavfsとかでマウントしつつそれをsamba共有とかのほうがいい気がする。

	* 16:46 SubRequest #2 [catalyst]:
	今のCatalystだとうまく動かんね。localまくってるところに

	    local $c->{action};
	    local $c->{namespace};

	追加いりそう。あんまり見てないんですが。

	* 12:43 Catalyst::Plugin::SubRequest [perl] [catalyst]:
	初めてソース見たけど、いいじゃんこれ。

	なぜか名前から連想で内部で`LWP::UserAgent`とかもってて普通にHTTPアクセスしてるとか勝手に思い込んでたけど、そうじゃなかった。

	食わず嫌いはよくないなぁ。

	自分自身が提供してるAPIを使う場合とかかなり便利そう。

	    my $json = $c->subreq('/json/blahapi');

	* 10:11  [life]:
	出社。

2006-07-22 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 03:50 Simple tip for text parsers with Catalyst [perl] [catalyst]:
	    for my $parser (qw/Markdown Textile Trac Hatena/) {
	        __PACKAGE__->plugin( lc $parser, "Text::$parser" );
	    }
	    __PACKAGE__->textile->charset('utf-8');

	とかで一括セットアップ。

	`$c->trac->parse($text)` とか使える。

	* 02:51  [life]:
	ブログ、日記すみわけ。

	こっちはどうでもいいこと。日記。独り言。メモ。

	向こうはまとまった記事用。英語の勉強のためになるべく文章を書く。

	なのでもう日本語ブログはいいか、復活させなくて。

	* 01:49  [life]:
	退社。というか帰宅。

2006-07-21 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 21:05 Catalyst::Plugin::XSendFile [perl] [catalyst] [lighttpd]:
	lightyのX-SendfileをCatalystから使うプラグインをつくった。

	    $c->res->sendfile("/path/to/file");

	って感じで使えます。同じインタフェースでCatalystテストサーバーの時でも動くようになってます。

	miyagawaさんの話だとperlbalでも同じようなことが出来るとのこと(もっと高機能)。でさらにそれにmogilefsを組み合わせるとかなりスケーラビリティが高そうな感じ。

	ちょっと見てみるべきかなぁ。

	* 13:30 Slimtimerよさげ [life]:
	ちょっと(だいぶ)まえにnaoyaさんがなんだっけ、get back to work(?) とかいうの紹介してたけど、それっぽく使える。それっぽくも使える。

	* 01:10  [life]:
	退社。

2006-07-20 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:53  [life] [perl]:
	CDBI で鬼はまる。

	あーーーもう二度と触りたくない。

	* 10:44  [life]:
	出社。

	* 00:00  [life]:
	退社。

2006-07-19 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:45 vox [life]:
	drawnboyさんに招待してもらった。ありがとうございます！

	良い機会なので前からやろうと思っていた英語ブログを始めます。

	> [typester.vox.com](http://typester.vox.com/)

	書く練習をしていればそのうちすらすら文が出てくるようになるかしら。

	* 16:20 Firefox2.0 [life]:
	拡張とりあえず使ってるの全部動いたから乗り換えてみた。

	perlがスペルチェックにひっかかってわらたｗ

	* 13:38  [life]:
	PuTTY + utf-8 な環境だと mutt の描画が結構おかしくなるなぁ。C-l で直るからまぁいいけどさ。

	* 10:43  [life]:
	出社。

2006-07-18 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 13:09 irssi [life]:
	予想以上にいいわー。

	utf8なterm -> irssi -> tiarra -> irc server

	とかという感じで基本utf-8ベースで日本語で話すチャンネルのみtiarraでjisに変換するようにしたので、perlなチャンネルでよく見る moose の別バージョン(なんかoが変な奴になってる奴)の文字化けもなくなったし、ヨーロッパ圏の文字も見えるように。

	あとnickの補完できたり(`t<tab>`でtypester: と出たり)、M-1～0でチャンネル切り替えられるのはまあ普通だけどM-q～pで11～20番目のチャンネルも簡単に切り替えられるの意外と便利。

	あと未読表示も未読のレベルによって表示を変えられるのもGood。

	過去ログ見るのがちょっと弱い感じするけど。riece使うならこっちという気がするな。

	* 09:59  [life]:
	出社。

	* 04:15 IRCクライアント [life]:
	riece重すぎなので、irssiに乗り換えた。

	良い感じ。

2006-07-15 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 17:29  飲みすぎた [life]:
	あー。どうやって帰ってきたかおぼえてないや。

2006-07-14 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 00:26  [life]:
	退社。

2006-07-13 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 00:10  [life]: 
	退社。

2006-07-12 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 17:04  [perl]:
	miyagawaさんが作ってくれた！

	> [Term::Encoding](http://search.cpan.org/dist/Term-Encoding/)

	cooool

	* 13:59 端末の文字コードを得たい [perl]:
	perlで端末の文字コードを知るにはどうやるのがいいんだろうと思って、`LC_ALL`とかでgrepした結果、

	    use Locale::Maketext::Lexicon { _encoding => 'locale' };
	    
	    my $encoding = Locale::Maketext::Lexicon::encoding();

	とかでました。いちおうこれでできるけど超微妙。

	このencoding関数だけ外だしにしたようなモジュールないのかなぁ。

	* 12:38 MacBook不安定 [life]:
	10.4.7 になってからだよなぁたぶんこれ。

	あー

	* 10:40  [life]:
	出社。

2006-07-11 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 00:29  [life]:
	退社。

2006-07-10 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 14:47 colinux 再インスコではまる [life] [colinux]:
	先週からWindowsで結構作業しててやっぱcolinux必要ってことで入れ直したんだけど、shfsのコンパイルとおらねーってはまった。@colinux0.6.3 with etch

	0.6.2 のときはすんなりいった気がするんだけど。

	そもそもカーネルコンパイルの時点でエラーるけど、それは

	> [夜行録: colinux 063 kernel compile](http://ccm.gs.niigata-u.ac.jp/~si006/NightWalker/archives/2006/02/1486.html)

	のおかげで解決。

	でも今度はshfsのコンパイルでエラー吐く。うぜえ。適当にソース見て

	    --- Linux-2.6/dcache.c.old      2006-04-15 06:55:49.000000000 +0900
	    +++ Linux-2.6/dcache.c  2006-07-10 12:52:04.000000000 +0900
	    @@ -68,7 +68,7 @@
	            spin_lock(&dcache_lock);
	            next = parent->d_subdirs.next;
	            while (next != &parent->d_subdirs) {
	    -               dentry = list_entry(next, struct dentry, d_u.d_child);
	    +               dentry = list_entry(next, struct dentry, d_child);
	                    dentry->d_fsdata = NULL;
	                    shfs_age_dentry(info, dentry);
	                    next = next->next;
	    @@ -101,7 +101,7 @@
	            spin_lock(&dcache_lock);
	            next = parent->d_subdirs.next;
	            while (next != &parent->d_subdirs) {
	    -               dent = list_entry(next, struct dentry, d_u.d_child);
	    +               dent = list_entry(next, struct dentry, d_child);
	                    if ((unsigned long)dent->d_fsdata == fpos) {
	                            if (dent->d_inode)
	                                    dget_locked(dent);

	とかしたら通った＆動いてる風味。

	* 10:06  [life]:
	出社。

2006-07-08 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 02:10 blue dot の登録ダイアログ [web]:
	あー同じようなの作ってた。やられたなー。

	まぁ、仕組み自体はCoCommentのパクリだけどさ。

	* 01:45  [life]:
	退社。

2006-07-07 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:10 タイプ数 [life]:
	lowreal.net で見ておもろいなぁとおもっていれてみたタイプ数カウンタ。おもろいなぁ。

	<a href="http://www.flickr.com/photos/typester/184064057/" title="Photo Sharing"><img src="http://static.flickr.com/59/184064057_6e9dfddc09_o.png" width="410" height="245" alt="Clipboard" /></a>

	割と毎日同じようなグラフを描くのがおもしろい。

	最押しキーはCtrlみたい。emacerなら多分誰でもこうなるかなぁ。

	コーディングしてるとCtrlのタイプ数が増えて、日本語打ちまくってるとEnterが増えるようだ。

	* 21:57 777Project 2006 [life] [work]:
	今年もがんばった！（オレ以外の人が

	> [第８回 777Project ! http://www.kayac.com/777_2006/](http://www.kayac.com/777_2006/)

	僕らperlチームがかかわったのは

	> [湘南Clip](http://www.shonan-clip.jp/)

	湘南を愛してやまない人のための情報・コミュニティサイト。まだまだ実装途中の機能がいっぱいあるけど、とりあえずプレオープン。

	日本で始めてのCatalyst poweredなサイトなんじゃないかな。

	* 10:33  [life]:
	出社。

2006-07-06 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 21:37  [life]:
	退社。

	* 19:03 それPlaな仕事 [life]:
	がきたが、Plaggerいれるより適当に書いたほうが速いと思ってさくっと書いた。

	惜しい。

	* 14:24 BIGMAMA [music]:
	> [BIGMAMA - short films (amazon.co.jp)](http://www.amazon.co.jp/exec/obidos/ASIN/B000FPWZJE/unknownplace-22/ref=nosim/)

	届いた。

	バイオリン使ってるこれ系のバンドで初めていいと思ったかも。

	* 11:02  [life]:
	出社。びしょぬれだよもう。

2006-07-05 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:45  [life]:
	退社。

	* 15:00 コーディング用フォント [font]:
	ライセンス見たら大丈夫風味なので、置いておきますよ。

	 * [CodingFontTobiS](/fonts/CodingFontTobiS.zip)

	[proggyfonts](http://proggyfonts.com/ "Proggy Programming Fonts")のCodingFontTobiの横幅を1px削って日本語フォントとアスペクト比をそろえたもの。オリジナルより字間がつまった感じになるけど、フォントリンクがちゃんとできるよという。(9pt以外はぼやけるよ)

	僕の使ってるのはCodingFontTobi1というこれの前身フォントなんだけどもう配布してないみたい(ランセンスもわからんし)なのでこっちを代わりに。

	フォント改造のしかたなどは

	> [Beside Bayside](http://beatsync.net/bayside/memo/log20051031.html)

	ここが参考になりまっす。proggy clean とかだれかよろsk

	* 14:55 あんちあんちえいりあす [life]:
	> [subtechグループ - 'hceT'.sub(/\Z/,'bus').reverse - めいりょう](http://subtech.g.hatena.ne.jp/secondlife/20060705/1152072852)
	>
	> アンチエイリアスがなんでみんな好きかなぁ。

	ねー。僕はコーディングにぼやけたフォント使う気にならん。

	* 11:18  [life]:
	出社。

	* 02:33  [life]:
	退社。

2006-07-04 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:38  [life]:
	出社。

	* 01:25  [life]:
	気づいたら、svkのrepos容量が500MB超えてるなぁ。

	これってなんか圧縮できないんだっけ。

	* 00:06  [life]:
	退社。

2006-07-03 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 17:04  [perl]:
	> [naoyaグループ - naoyaの日記 - overload#2](http://naoya.g.hatena.ne.jp/naoya/20060703/1151907779)

	あーそうか、だめじゃんオレ。うーむ、これやるにはどうするのがかっこいいんだろ。

	* 10:04  [life]:
	出社。

2006-07-02 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 18:35  [life]:
	なんか体調悪くって、昨日はひたすら寝た。今日もさっき起きたところ。

	体調はよくなったけど、寝すぎでだるい

	* 18:23 overload [perl]:
	> [naoyaグループ - naoyaの日記 - 正規表現 overload](http://naoya.g.hatena.ne.jp/naoya/20060630/1151666501)

	これは普通に文字列参照のoverloadでいいんじゃない？

	    use strict;
	    use warnings;
	    
	    {
	        package NDOString;
	    
	        use overload (
	            q{""} => sub { shift->stringify },
	        );
	    
	        sub new {
	            my ($class, $str) = @_;
	    
	            bless { string => $str }, $class;
	        }
	    
	        sub stringify {
	            shift->{string};
	        }
	    }
	    
	    
	    my $str = NDOString->new('blah blah');
	    
	    $str =~ s/a/u/g;
	    
	    print $str;

	こんな感じで。

2006-06-30 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 11:34  [life]:
	出社。

	* 00:20  [life]:
	退社。

2006-06-29 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 22:29 ディカフェコモドドラゴンブレンド 100g [life] [starbucks]:

	* 15:54  [life]:
	> [スラッシュドット ジャパン | RPN電卓を使ってますか？](http://slashdot.jp/askslashdot/article.pl?sid=06/06/29/0452211)

	HP 32SII いまだに使ってるー。

	* 10:49  [life]:
	出社。

	* 00:15  [life]:
	退社。

2006-06-28 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 10:44  [life]:
	出社。

2006-06-27 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:49  [life]:
	退社。

	* 13:09 Action attribute [perl] [catalyst]:
	Catalyst 5.70 の dev リリースでサポートされた Action attribute 良いね。

	[http://search.cpan.org/~mramberg/Catalyst-Action-RenderView-0.01/lib/Catalyst/Action/RenderView.pm](http://search.cpan.org/~mramberg/Catalyst-Action-RenderView-0.01/lib/Catalyst/Action/RenderView.pm)

	こんなんとか簡単に作れる。cool。

	    sub foo : Action('+Foo::Bar')

	は

	    sub foo : MyAction('Foo::Bar')

	と等価。

	 * [Catalyst::Manual::Actions](http://search.cpan.org/~mramberg/Catalyst-Runtime-5.70_01/lib/Catalyst/Manual/Actions.pod)

	* 11:41  [life]:
	出社。

	* 00:40  [life]:
	退社。

2006-06-26 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:47 Weak references are not implemented in the version of perl [perl] [debian]:
	なにげなく `aptitude upgrade` したら CRON からメールがきまくって

	    Weak references are not implemented in the version of perl at /usr/local/share/perl/5.8.4/DBIx/Class/Schema.pm line 7

	とかで Scalar::Util::weaken 使ってるスクリプトが全滅。

	おいおいなんだよこれ。

	weaken は Catalyst でも DBIC でも使ってるのでこのままだと fastcgi プロセス再起したらこの鯖で動いてる Web アプリ全部死亡する危機w

	なんでだろーとおもってとりあえず Scalar::Util 再インストールしたら直った。

	謎過ぎる。。同じバージョンだったのに。

	* 18:37 仕様上の欠陥 [life]:
	バグというか、根本的な仕様上の欠陥のためにかなりのコード書き直しが発生。

	あー、だるすだるす。

	* 14:32 寝てる人が [life]:
	多いなぁ。サッカーみすぎ？

	* 10:12  [life]:
	出社。

2006-06-24 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 19:33 巨人戦 [life]:
	いやー、高橋尚成と豊田の魂の投球は敵ながらすごかった。

2006-06-23 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 17:19  [life]:
	なんか寝てたらナガヤマンに叩き起こされた。

	夢かとおもったけど本当だった。

	* 14:43 ユーコンブレンド 100g [life] [starbucks]:

	* 13:13 NEXT, Class::C3 のいいとこ [perl]:
	redefineが楽チン。

	てかダメダメいってたけど最近はそうでもなくなってきた。

	* 11:49  [life]:
	出社。

	* 03:48  [life]:
	退社。

	* 02:47  [perl] [catalyst]:
	マルチ language なアプリを作る練習もかねて、ちょっとしたサイトつくりはじめたんだけど、

	    msgid  "Logged in as %1"
	    msgstr "%1 としてログインしています"

	こういうのが化ける。`%1` とかはいってないのはいける。Unicodeフラグっぽい化けかたなので、MyApp.pm に

	    sub localize {
	        my $c    = shift;
	        my $text = shift;
	    
	        my $args = ref $_[0] eq 'ARRAY' ? $_[0] : [@_];
	    
	        for my $arg (@$args) {
	            utf8::decode($arg);# unless utf8::is_utf8($arg);
	        }
	    
	        $c->NEXT::localize( $text, $args );
	    }

	とか書いてみたら直ったよ。しかし、`is_utf8` のところコメント外すとうごかねーよ、なにこれ。

	`$args` には `is_utf8` は真だけど、perl utf8 じゃないのがはいってる？何かが悪さをしておる。

	Unicode プラグインと併用してるのがまずいのかもしれん。

2006-06-22 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 13:06  [life]:
	出社。

	* 00:57  [life]:
	退社。

2006-06-21 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 11:40 Schema::Loader with Catalyst [perl] [catalyst]:
	[Catalyst::Model::DBIC::Schema](http://search.cpan.org/dist/Catalyst-Model-DBIC-Schema/) を使う。

	この Model は大きく3つの使いかたがある。

	 1. 単純に既に存在する Schema クラスを使用する
	 2. Schema::Loader で既存の DB から Schema クラスを生成し、それを使用する
	 3. Schema::Loader で既存の DB から Schema::Loader クラスを生成し、それを利用する。

	1 はまず Schema クラスをどこかに作ってあり(My::Schemaと仮定する)、それをそのまま Catalyst::Model として利用する。

	    ./script/myapp_create.pl model DBIC DBIC::Schema My::Schema

	で、MyApp::Model::DBIC が作成される。この My::Schema に connection なんかが定義されていてそれを使う場合はこのままでOK。

	別の接続先を使う場合なんかは MyApp::Model::DBIC の設定で connect_info を書いておけばそっちが使われる。ヘルパーの最後に

	    ./script/myapp_create.pl model DBIC DBIC::Schema My::Schema dbi:SQLite:/path/to/foo.db

	とかしてもOK。

	で、これでアプリ内から Schema クラスを使える。で、この場合で My::Schema::Table を使うには `$c->model('DBIC::Table')->search` とかとする。ここがわかりにくいのかもしれない。

	2 は 1 と同じだが、ヘルパーを叩くときに既存DBを元にSchemaクラスを生成する。

	    ./script/myapp_create.pl model DBIC DBIC::Schema My::Schema create=static dbi:SQLite:myapp.db

	こんな感じで、ヘルパーを叩いたときに、myapp.db のテーブル定義をもとに My::Schema(::*) クラスが自動生成される。後の使いかたは同じ。

	3 は Schema クラスではなく、Schema::Loader クラスを生成し、Catalystアプリが起動するたびにDBのテーブル定義を見て動的にSchemaクラスを生成する。Catalyst::Model::CDBI みたいな感じ。

	これを使うには

	    ./script/myapp_create.pl model DBIC DBIC::Schema My::Schema create=dynamic dbi:SQLite:myapp.db

	で、My::Schema という Schema::Loader クラスが生成され、それが使われる。

	Catalystアプリからの使いかたはすべて1と同じ。

	My::Schema::* をよぶのに、`$c->model('DBIC::*')` を呼ぶというのがわかりずらいのかも。

	あと、Schema::Loader を使う場合、テーブル定義以外の、リレーションの設定とかインフレーションとかの設定を書くために、My::Schema::Table を書くかもしれないが、CDBI::Loader と違いそれらはデフォルトでは読み込まれないから注意が必要。

	それらをロードするためには、My::Schema に `__PACKAGE__->load_classes;` を付け加える必要がある。

	たしかになんかわかりにくいかも。かなぁ。

	 * Schema based な DBIC の使いかたの例: DBIx::Class::Manual::Example
	 * C::M::Schema::Loader: Catalyst::Model::Schema::Loader
	 * とそのヘルパー: Catalyst::Helper::Model::Schema::Loader

	とかの pod を見るといいかも。

	* 11:21  [life]:
	出社。

2006-06-20 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 19:17 on_connect_do [perl] [dbic]:
	で、下記の `PRAGMA synchronous = off` だとか、MySQL の `SET NAMES utf8` みたいなのを DBIC でやるばあいは

	    $schema->storage->on_connect_do( ['SET NAMES utf8'] );

	みたいにするわけだけど、これは今はschemaクラス自体には書いておけないのでめんどくさい。(0.699..のほうではできるようになっている)

	Catalyst でつかうだけなら、今の DBIC でも、Model::DBIC::Schema の `connect_info` で `on_connect_do` を書いておける。

	    connect_info => [
	        'dbi:SQLite:dbname=foo.db',
	        { on_connect_do => [ 'PRAGMA synchronous = OFF', ], }
	    ],

	blblack++

	* 19:12 PRAGMA synchronous [sqlite]:
	IRC で興味深い話題。

	SQLite には synchronous という PRAGMA があり、これが off(0) だと MySQL でいうと MyISAM っぽく、full(2) だと InnoDB っぽくなるらしい。デフォルトは full。

	ので、パフォーマンス重視の場合、PRAGMA synchronous = off; しろと。

	 * [http://www.sqlite.org/cvstrac/wiki?p=SpeedComparison](http://www.sqlite.org/cvstrac/wiki?p=SpeedComparison)
	 * [http://www.sqlite.org/pragma.html#pragma_synchronous](http://www.sqlite.org/pragma.html#pragma_synchronous)

	* 15:22  [perl]:
	> [shag の日記 - undef な SCALAR を ARRAY でデリファレンスすると、値が変わる](http://d.hatena.ne.jp/shag/20060616)

	ん、これ普通じゃね。値が変わるというか、初期化されてるだけじゃないかしら。

2006-06-19 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 05:06  [life]:
	出社。

2006-06-18 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 22:23  [life]:
	やべぇ、帰らねば。

	* 16:42 undefined symbol: FT_GlyphSlot_Embolden [life] [linux]:
	ものすごーくひさしぶりに Gimp を使おうとしたら

	    gimp: symbol lookup error: /usr/lib/libcairo.so.2: undefined symbol: FT_GlyphSlot_Embolden

	とか言うエラーで起動しやがらねぇ＠ubuntu breezy

	ぐぐったら

	> [\[debian-users:45959\] Re: etchでKDEが起動しくなった](http://lists.debian.or.jp/debian-users/200602/msg00213.html)
	>
	> libxft2が中途半端な状態でtesting行きになったために同様の問題多数で阿鼻叫喚になっていますね
	> (http://bugs.debian.org/cgi-bin/pkgreport.cgi?pkg=libxft2)。
	>
	> libfreetype6をunstableから持ってくることで当面は解決できるようです。

	とかが最初にきた。あらまぁ。utunbuもかよ。

	apt-line に dapper のやつ追加して

	    sudo aptitude install libfreetype6 -t dapper

	したら起動するようになった。

	* 16:01 ubuntu on Parallels [life]:
	OSX を快適な開発環境にすべく、parallels 上に ubuntu を入れてみた。

	キーリピート設定はちゃんとできたが、Parallels Tools がないのでいまいち。。

	フォーラムによれば次期メジャーバージョンでは Linux 用の Prallels Tools もつくらしいので、それ待ちかな。

2006-06-17 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 22:53 Text::Trac [perl]:
	> [mizzy.org - Text::Trac - Trac Wiki 記法パーサ](http://mizzy.org/program/text-track00.html)
	>
	> IRC の #catlxom での会話の流れで、自分が Text::Trac をつくることになりました。といってもまだつくりかけなので、CPAN にアップするのはまだ先になりそう。

	先になりそうとかいってますが、このペースでいけばこの週末中にはあがっちゃいそうです。

	あー、catlxomどしようなぁ。

	* 16:24  [life]:
	出社。

2006-06-16 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 11:25  [catlxom]:
	> [Nowhere Near - Catlxom::Plugin::Format::Hatena](http://d.hatena.ne.jp/drawnboy/20060616/1150384749)

	コミットしろYO

	> やっぱり、こんなリクエストがきたら、このプラグインを使って…みたいなことが YAML で書きたいなあ。。

	これは、こんなリクエストがきたらというのはそれぞれのプラグイン内でやっちゃう。というのがblosxom, catlxom流です。

	具体的には、startをフックしてそこでやります。このあたりはblosxomいじったことがあると違和感ないと思います。

	あとデフォルトではプラグインディレクトリにプラグインを放りこむと全部有効になります。これもblosxomの流れをくんでそうなっています。

	* 01:35  [life]:
	退社。

2006-06-15 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:37 Imager::Filter::RoundedCorner 0.02 [perl]:

	 * アンチエイリアスサポート
	 * ボーダーサポート

	した。

	併用はしない方が良いw ボーダーは wired.com にあるような感じの画像作成用。

	しかしひどい実装だ。アンチエイリアスはコーナーにblurかけてるだけだし、ボーダーはなんかごちゃごちゃ力技処理。

	パッチ歓迎！

	はての君がなんかいってたからWebインタフェつくっか。

	* 18:27 コロンビア ナリニョ スプレモ 100g [life] [starbucks]:

	* 17:29 コーヒー買いにいこうとしたら [life] [starbucks]:
	<a href="http://www.flickr.com/photos/typester/167571733/" title="Photo Sharing"><img src="http://static.flickr.com/57/167571733_3aa42a1756_m.jpg" width="240" height="180" alt="starbucks recommends" /></a>

	袋の底にこんなの書いてあったw

	* 12:33 角丸フィルタ for Imager [perl]:
	仕事用に作ったの、ちょっと整備してリリース。

	    use Imager;
	    use Imager::Filter::RoundedCorner;
	    
	    my $image = Imager->new;
	    $image->read( file => 'source.jpg' );
	    
	    $image->filter(
	        type   => 'rounded_corner',
	        radius => 10,
	        bg     => '#ffffff'
	    );
	    
	    $image->write( file => 'dest.jpg' );

	とかって使う。

	Imager 良いねー。夜時間があったら border のサポートもする。

	* 11:09  [life]:
	出社。

	* 04:35  [life]:
	といいつつまだいたり！

	今からビールかって帰るお＞＜ノ

	* 03:01  [life]:
	退社。

	泊まろうかとおもったけど、眠い。

	* 02:58 Plugin::Flavour [perl] [catalyst]:
	URLの最初のパスをflavourに使うっていうやつを別モジュールにきりわけようかとおもうんだけど、だめかなぁ。

	誰か使ってたりすんのかなぁ。

	* 00:04  [life]:
	そうだ、オレも英語ブログやろうとおもっていたんだったよ！

2006-06-14 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 13:49  [life]:
	BECKSコーヒーでかむかむサンドたのんだらタンドリーチキンサンドがでてきた。

	どうやったら聞き間違えるんだ？

	* 13:27  [life]:
	imbex に飯いきましょうよつったらもう食っちゃったっていわれた。

	* 12:46  [life]:
	「使うべきではない」って日本語あってる？

	* 12:35 $c が必要な場合 prepare ハンドラは使うべきではない [perl] [catalyst]:
	代りに `prepare_*` を使え。

	そもそも NEXT のチェーンで

	    sub prepare {
	        my $class = shift;
	        my $c = $class->NEXT::prepare(@_);
	    
	        ...
	    }

	とか、NEXT 呼んだ後に処理を書くべきじゃないと思う。こうすると実行される順番があべこべになってしまう。

	こうする必要があるのは prepare は `$c` ではなくクラス名を渡されるようになっているため。

	`prepare_*` は $c がわたされる。

	* 12:29 ギャース [life]:
	オレの使ってるキーボード、AT端子なんだけど、ShopUみたら[PS/2版](http://www.vshopu.com/SIIG_JKAPS311S1/index.html "MiniTouch PS/2 Plus JK-APS311-S1")が売っていたみたいだ。

	すでに売り切れてるよー＞＜

	* 11:27  [life]:
	出社。

	* 03:15  [life]:
	退社。

	* 02:05  [perl] [catalyst]:
	作った。

	[svn.unknownplace.org: Catalyst-Plugin-FormValidator-Simple-Auto](http://svn.unknownplace.org/public/library/perl/trunk/Catalyst-Plugin-FormValidator-Simple-Auto/)

2006-06-13 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:45 SYNOPSIS of Plugin::FormValidator::Simple::Auto [perl] [catalyst]:

	    use Catalyst qw/
	      FormValidator::Simple
	      FormValidator::Simple::Auto
	      /;
	    
	    __PACKAGE__->config(
	        validator => {
	            messages => 'messages.yml',
	            profiles => 'profiles.yml',
	            # and other FormValidator::Simple config
	        },
	    );
	    
	    
	    # profiles.yml
	    action1:
	      param1:
	        - NOT_BLANK
	        - ASCII
	        - [ 'LENGTH', 4, 10 ]
	      param2:
	        - NOT_BLANK
	    
	    
	    # then your action
	    sub action1 : Global {
	        my ($self, $c) = @_;
	    
	        # $c->form($profile) already executed!
	        unless ($c->form->has_error) {
	            ...
	        }
	    }

	とか言うのを作ろうかと。

	牧さんのパクリ。

	* 14:16  [life]:
	開発環境を Thinkpad - ubuntu にもどした。

	快適すぎる。。

	* 13:37 ペルー 100g [life] [starbucks]:
	新しいの。ブラジルなんちゃらは名前覚えらんなかったのでこっち。

	うっかり袋もらっちゃった。スタバの袋って柄がおもろいからもらうと捨てにくいんだよなー。

	* 12:13  [life]:
	やっぱりコーディング環境はLinuxがいいなぁーー

	* 12:11  [life]:
	ちなみに僕のキーリピート設定は X でいうと

	    $ xset r rate 250 80

	とか言う感じ。kbdacc のはわすれた。

	* 12:08 キーリピート [osx]:
	synergy 経由で作業すれば問題解決じゃね？とかおもってやってみた。

	一瞬快適！っとおもったけどiTermがキーリピートについていけなくてキー離してもしばらくタイプされちゃう。

	限界だわこりゃあ。

	* 10:43  [life]:
	出社。

	* 02:44  [life]:
	退社。

	* 01:32 明日忘れちゃいけないもの [life]:
	 * MacBookの外部ディスプレイ用のアダプタ
	 * コーヒーミル&ドリッパー

	* 00:28 日本なんだよーあれーもー [life]:
	とりあえずサッカー興味ねぇとかゆってるやつにはこれを。

	<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4344404777/unknownplace-22/ref=nosim/" title="悪魔のパス 天使のゴール"><img src="http://images-jp.amazon.com/images/P/4344404777.01._OU09_PE0_SCMZZZZZZZ_.jpg" alt="悪魔のパス 天使のゴール - 村上龍" width="" height="" /></a>

2006-06-12 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 18:09 OSXキーリピート [osx]:
	> [\[macosx-jp:09570\] TIPS KeyRepeat](http://www.tech-arts.co.jp/macosx/macosx-jp/htdocs/9500/9570.html)
	>
	>     %defaults write NSGlobalDomain KeyRepeat 0
	>
	> または
	>
	>     %defaults write "Apple Global Domain" KeyRepeat 0
	>
	> ログアウトして再ログイン。以上。

	これでちょっとはましになった。これが素OSXの限界か。kbdaccみたいなのねーんかなぁ。

	とりあえずカーソル移動をインクリメンタルサーチとかを使うように矯正する。

	すみぱんありがとう！

	* 14:19 shibuya.pl のメアド欲しい！ [life]:
	やばい、ちょうでおくれた。

	ドメインとる前から欲しいつってたのに。

	* 10:34  [life]:
	出社。

2006-06-11 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 23:42  [perl]:
	> syntax あつかい

	そういうことみたいで。

	    my local our and or eq ne if else elsif until unless while for foreach return switch case given when

	が、perltidy の<ins>スペースを伴う</ins>キーワードらしい。

	もちろん設定で変えられるけど、どうしようかな。

2006-06-10 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 23:52  [perl]:
	同じように関数じゃないのかとおもったのに `my` がある。

	    my( $self, $c ) = @_;

	はperltidyかけると

	    my ( $self, $c ) = @_;

	になる。

	つまり perltidy では `my` も `return` も Perl BestPractices 的成形方法でいうところの識別子的扱いになっているのね、関数ではなく。

	でもperl的には両者はどちらも組み込み関数だよね？ 何その特別扱い。おしえてDamian！

	* 23:43  [perl]:
	> [SQLAlchemy Database Engines 日記。 (TokuLog) - ||= と弊社コーディングルール](http://d.hatena.ne.jp/tokuhirom/20060610/1149949183)

	    return ($self->{_obj} ||= My::Object->new);

	は気持ち悪いと思った。括弧付けるなら

	    return( $self->{_obj} ||= My::Object->new );

	じゃね？

	とかおもたけど、上記をperltidyにかけると

	    return ( $self->{_obj} ||= My::Object->new );

	になる罠。なんだこりゃ。`return` は関数扱いではないのか。

	* 18:05 全日本最強 CPAN Author 決定選手権[perl]:
	> [輝け！全日本最強 CPAN Author 決定選手権 - にぽたん研究所](http://blog.livedoor.jp/nipotan/archives/16108466.html)

	おぉ、なんか4位じゃん。前回はランク外だったのに＞＜

	前回はこれ元に偏差値出してた人がいたとおもったけど、それも見たい！

	* 17:54 rt.cpan.org [life] [perl]:
	起きたらなんかrt経由でtypo指摘きてたので直した。

	んで、てきとうに解決済みにしといたけどいまいち使いかたわからね。

2006-06-09 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 18:00 かえった [life]:
	ちょうつかれた

2006-06-04 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 05:32  [life]:
	今日もフィレンツェぶらぶらした。日本人多いなぁ。

2006-06-02 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 18:03  [life]:
	<a href="http://www.flickr.com/photos/typester/158568631/" title="Photo Sharing"><img src="http://static.flickr.com/72/158568631_79759e6bab_o.png" width="551" height="178" alt="wtf" /></a>

	なんだよこれ。

	* 03:23 ことえりはガンオタ [life]:
	「そら」で変換すると「宇宙」が候補に出る。

	でもコスモで小宇宙にはならない。

2006-06-01 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 19:28  [life]:

	    $ sudo dpkg-reconfigure exim4-config

	してSmarthost使うようにして、それにsmtp.nifty.com指定したらメールおくれるようになった。

	本当は587ポート（だっけ？）つかうようにしたいけどどうやんのかわからん。とりあえず送れたからいいや。

	* 19:08  [life]:
	ぎゃーーーす

	メール送れなくなった。ログ見るとtimeoutまくってる。

	outbound 25 port blocking がついにうちにもきたのか。

	* 16:02 ひどい夢を見た [life]:
	昨日のみすぎたかな。

2006-05-31 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:21 コミットログ [life]:
	かかねーやつはなんなんだ。うぜー

	* 07:00 OSX [life]:
	こっちにはMacBookしかもってこなかったので、使わざるを得ないわけで、だいぶ慣れてきた。

	けど、

	 * キーリピート加速するソフトないのかな
	 * shfs のようなツールはないのかな

	この2点がどうしても耐え切れない。不便だ不便だ。

	あとiTermつかっているとmetaキーのために入力モードをU.S.にする必要があるのだけど、そうするとことえりとのきりかえが非常に面倒。

	とりあえずそれ以外は不満もなく。

2006-05-29 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 06:38 [perl]:
	ack いいねー。

	* 06:09 イタリアは日が長い[life]:
	20:50で

	<a href="http://www.flickr.com/photos/typester/155035004/" title="Photo Sharing"><img src="http://static.flickr.com/72/155035004_c674450796_m.jpg" width="180" height="240" alt="sunset" /></a>

	やっとこんな感じ。

	* 06:07 三日目[life]:
	日曜だけど一日中仕事した。

	家周辺なら無線届くのでいろんな場所で。犬の側は落ち着かない。

2006-05-28 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 08:43 Vodafone++ [life]:
	普段自分でもうんこうんこいってるう゛ぉだふぉねですが、イタリアでも普通に使えて超便利。通話(通信)料は高いですけどね。

	経由した香港の空港でも使えたよ。

	海外についてから電源いれると、なんかメールきて、その国のサポート番号とか日本への電話のかけかたとかもおしえてくれる。スバラシス。

	* 05:14  [life]:
	二日目、土曜ということでフィレンツェをぶらぶらした。

	夕方帰ってきて仮眠後、仕事まくり中。

2006-05-26 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:15 I'm in Italy! [life]:
	宿ついた。今午後4時。

2006-05-24 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 13:39 なんとか性格分析 [web]:
	> [性格分析](http://www.be-fine.net/wannabe/contents/character/index.cfm)

	<dl>
	<dt>型番</dt>
	<dd>内向- 直感- 思考 -自然</dd>
	<dt>気質</dt>
	<dd>戦略性</dd>
	<dt>タイプ</dt>
	<dd>研究者</dd>
	<dt>主文</dt>
	<dd>常に頭の中で問題解決策を考えている分析家です。</dd>
	<dt>解説</dt>
	<dd>あなたは、非常に論理的で分析好きです。常に頭の中でアイデアをひねり、絶えず問題の解決策を考えています。人の考えにとらわれない、知的で独創的なタイプ。創造的でやりがいのある仕事を常に追い求め、それが困難であるほど、挑戦のしがいを感じて情熱を燃やします。
	　独立心旺盛で、疑い深く、頭の回転が速い。自尊心があり、どんな問題でも論理的に解決できるという自信を持っています。トラブルが発生し、誰もがお手上げという状態にあっても、沈着冷静に対処。能力そのものを重視し、他人に左右されず、屈服しません。
	　物事を大局的に見る力があり、物事の本質や関連性を見通す能力があります。知的好奇心が旺盛で、新しいアイデアを熱心に取り入れようとし、より有能になろうと努力します。</dd>
	<dt>留意点</dt>
	<dd>ありふれた知識には無関心で、単純な事にはすぐに飽きてしまう傾向があります。会議中はだらだらと自分の意見を述べる一方で、くだらないと思ったものは完全に無視。他人の感情や欲求には鈍感です。自分に追いつこうと熱心に学ぶ人に対しては口うるさく、見下したような傲慢な態度をとります。
	　価値があると思う物に対しては努力を惜しみませんが、人間関係には弱い。自分や他人の感情にはまるで無頓着です。いくら自分にとっては簡単な理論でも、他人にはもっと説明が必要だということが、まるで分かっていません。</dd>
	<dt>アドバイス</dt>
	<dd>新しい情報をどんどん吸収し、臨機応変に対処でき、物事の問題点を見つけ、斬新な解決方法を発見できるあなたは、大変有能な人物。しかし、一つの仕事をやり遂げずに、新しいものに飛びつく傾向があります。人の助けを借りたくないでしょうが、素直に人の忠告を受け入れる努力をしましょう。</dd>
	</dl>

	あんまりあたってない。

	* 00:29  [life]:
	なんかあまりに眠さに仮眠していたら、気づいたらオレ一人になっていた。。

2006-05-23 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 16:49  [life]:
	MacBookとどいた。

	Safariの速さにびっくり。こんなちがうのか。

	* 10:26  [life]:
	出社。

	視力が0.2しかなかった件。

	* 02:11  [life]:
	明日健康診断、うぜいー。

	夜9時以降なんも食べるなとかいわれたけど、普通に無理です。

2006-05-22 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 18:46  [perl] [catalyst]:
	> [del.icio.us/url/f140e1ad9d58fa4f5b2ee0b55b9002db](http://del.icio.us/url/f140e1ad9d58fa4f5b2ee0b55b9002db)
	> 
	> Catalyst::Authentication と NEXT.pm. NEXTでのMixinだとplugin内にメソッド定義しにくいため `Auth::Credential::*`, `A::Store::*` な名前空間がある。

	これはちょっと違うので補足。

	それら二つの名前空間は単にいろいろな認証系に対応するためのもので、NEXTのために名前空間をわけているわけではないです。

	実装的にも `Credential::*` も `Store::*` も Authentication プラグインを利用してはいますが、それら自体は普通の Catalyst プラグインで、

	    use Catalyst qw(
	        Authentication
	        Authentication::Credential::Password
	        Authentication::Store::DBIC
	    );

	などのようにロードします。

	なのでそれぞれが、

	> NEXTでのMixinだとplugin内にメソッド定義しにくい

	ということはいえます。

	* 13:56  [life]:
	ひどいtypoをみつけた。

	* 13:11 Catalyst の認証系 [perl] [catalyst]:
	> [Monologue:Catalystではてな認証APIを使うプラグイン](http://blog.teachat.org/archives/50460153.html)

	これはちょっとなぁ。コメントしようと思ったけど途中まで書いて長くなったのでここに書いておく。

	まず、`Authentication::Credential::*` と `Authentication::Store::*` はどちらも `Authentication` プラグインを利用する認証プラグインのための名前空間。

	なので、上記プラグインは Credential とつけるのはいくない。

	Authentication プラグインは Catalyst プラグインだけど、それ自体が認証プラグイン用のフレームワークみたいになっていて、ユーザー(プログラマ)はさまざまなバックエンドプラグインを共通のインタフェースで使用することができるようになっている。

	んで、上記プラグイン、名前をかえればいいんじゃね。とかおもったけどよくみたらこれ、`$c->login` とかよんでる。

	んでloginはプラグイン内になくて、トップレベルのアクションに `login : Local` とか書いてる。これ、MyApp.pm にlogin定義してないと動かないんじゃね。

	Authentication プラグインのコードが読みにくいということも問題かなぁ。NEXT を使うMixinのプラグイン機構はそのプラグイン内にメソッドを定義しまくれない(すべて`$c`の関数になってしまうから)ため、複雑な処理をしようとすると別名前空間を使う必要があるので実装がむずかしい。

	それプラス、作者が nothingmuch。この人のコードは基本読みにくいw

	でも、Authentication プラグインをつかったはてな認証プラグインは[すでにある](http://search.cpan.org/dist/Catalyst-Plugin-Authentication-Credential-Hatena/ "Daisuke Murase / Catalyst-Plugin-Authentication-Credential-Hatena")ので、今からつくるなら Authentication プラグインを使わないもののほうがいいのかな。

	* 09:34  [life]:
	起床＠会社。

	今日は仕事する。

	* 04:31 del.icio.us tagroll [web]:
	del.icio.us でタグクラウドだけ表示するページどこだっけ、とかさがしてたら [del.icio.us/help/tagrolls](http://del.icio.us/help/tagrolls) とか見つけた。

	<script type="text/javascript" src="http://del.icio.us/feeds/js/tags/typester?icon;count=592;totals;size=10-60;color=87ceeb-0000ff;title=my%20del.icio.us%20tags"></script>

	* 03:04 マグカップ [life]:
	でコーヒーうっかりのんじゃって、タンブラーに戻れない件。

	全然うまいよなぁ。。

	でも何個キーボード壊したかわからないし。悩む。

	* 02:54  [life]:
	あー、鎌倉にカフェドクリエできないかなぁ。

	あと、たこ焼屋。

2006-05-21 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 23:03  [perl]:
	さっきのは Spiffy つかえばいいらしい。

	Spiffy ってそういえば `my $self = shift;` いらずになるとか聞いてはいたけど、pod みたことなかった。

	* 22:59  [life]:
	髮切った。やっときれたよ、もう。

	* 15:06 use strict [perl]:
	絶対書くのに、いちいち書かなきゃいけないのめんどくね？

	dan さんとかがなんかおもしろいことしてなんとかしてくれるんじゃね、と思ったけど。

	> [404 Blog Not Found:perl - use strict; # and be happy](http://blog.livedoor.jp/dankogai/archives/50502585.html)

	なんだか普通の反応。しょぼん。

	* 13:21  [life]:
	DCからの電話で起床。緊急対応からはじまる、そんな日曜。

2006-05-20 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 03:54  [life]:
	退社。

2006-05-19 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 18:58 シェイドグロウンメキシコ 100g [life] [starbucks]:

	* 17:35  [perl]:
	`SQL::Abstract` ドリルほしい＞＜ (二回目

	* 17:29 DBIC というか SQL::Abstract の小技 [perl] [dbic]:
	同僚が DBIC で、

	    select * from table where column1 > column2;

	みたいのを実行したいけどどうやるかわからんとかいっていて、オレもわからなかったので IRC で聞いたらすぐ解決した。

	    $rs->search({ column1 => \'> column2' });

	`SQL::Abstract` の機能。しらなかった。

	これ他にもいろいろつかえるね。DBIC の機能というわけではないから CDBI::Sweet とかでもOKか。

	* 16:16  [life]:
	MacBook 発送されたメールきた。件名が Shipping notification なんとかとかなってるけどアメリカからくるのかな。

	イタリア間に合いそう。楽しみ。

	* 13:56  [life]:
	出社。

2006-05-18 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 20:55  [life]:
	退社。

	なんかひさしぶりだな。

2006-05-17 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 05:28 のどいてー [life]:
	昨日から。

	御大にうつされたにちがいない。

2006-05-16 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:04 MacBook [life]:
	注文した！

	1.83G の。メモリは 2GB に変更。

	もっと小さいのがでてショックを受けませんように。

	* 11:26 そういや [life]:
	Yahoo! 360 とかあったね。

	plagger でも巡回しなくなって久しい。

2006-05-15 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 12:11  [plagger]:
	EntryFullText のなにかが utf8 フラグ落としちゃってる気がするなぁ。

	mndks

	* 10:15  [life]:
	掃除機うるせー＞＜

	* 08:40 ユーコンブレンド 100g [life] [starbucks]:

	* 08:20  [life]:
	`WWW::Google::Calculator` かな。

	* 07:58 モジュール名 [perl]:
	Google 電卓用のモジュールを作った。

	[http://svn.unknownplace.org/public/library/perl/trunk/WWW-GoogleCalc/](http://svn.unknownplace.org/public/library/perl/trunk/WWW-GoogleCalc/)

	なんか名前がむずかしい。

	CPAN みると google 関係だけで

	 * Net::Google::*
	 * WWW::Google::*
	 * WebService::Google::*

	とかありまくるし。どれつかえばええねん。

	こういう、無理矢理ハック系のは WWW かなとおもったので WWW::GoogleCalc としたのだけど、どうなんだろう。

	* 05:58 PlaggerLDR  [plagger]:
	[\[743\] - Plagger - Trac](http://plagger.org/trac/changeset/743)

	rating 対応。

	* 04:02 YAML.pm bug? [perl] [yaml]:

	    use strict;
	    use warnings;
	    
	    use Data::Dumper;
	    use YAML;
	    
	    my $config = {
	        default => [ 1, { '*' => 1 }, ],
	        deny    => ['script'],
	    };
	    
	    my $yaml = Dump($config);
	    
	    print $yaml;
	    print Dumper( Load($yaml) );

	output:

	    ---
	    default:
	      - 1
	      - '*': 1
	    deny:
	      - script
	    YAML Error: Couldn't parse single line value
	       Code: YAML_PARSE_ERR_SINGLE_LINE
	       Line: 5
	       Document: 1
	     at /usr/local/share/perl/5.8.7/YAML.pm line 60

	This code works fine with `YAML::Syck`.

2006-05-14 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 20:45  [life]:
	出社。

2006-05-13 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 03:50 Hachathon in CL [life] [plagger] [plaggercon]:
	中。

	なんか

2006-05-12 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 13:32  [life]:
	出社。

	* 02:26  [life]:
	退社。

2006-05-11 (Thu)  Daisuke Murase  <murase@kayac.com>
	* 06:48  [life]:
	なんかぼけてたのなおした。

	* 06:22 PlaggerLDR 改造 [plagger] [catalyst]:
	 簡易認証追加と
	 `server.pl -d` のときだけデバッグモードになるように

	    Index: lib/PlaggerLDR/Controller/API.pm
	    ===================================================================
	    --- lib/PlaggerLDR/Controller/API.pm	(revision 1819)
	    +++ lib/PlaggerLDR/Controller/API.pm	(working copy)
	    @@ -12,8 +12,9 @@
	     my $module = first { $_->{module} eq 'Store::DBIC' } @{$config->{plugins}};
	     my $schema = Plagger::Schema::SQLite->connect(@{$module->{config}->{connect_info}});
	     
	    -sub default : Private {
	    +sub auto : Private {
	         my($self, $c) = @_;
	    +    $c->user;
	     }
	     
	     sub subs : Local {
	    Index: lib/PlaggerLDR.pm
	    ===================================================================
	    --- lib/PlaggerLDR.pm	(revision 1819)
	    +++ lib/PlaggerLDR.pm	(working copy)
	    @@ -3,21 +3,45 @@
	     use strict;
	     use warnings;
	     
	    -use Catalyst qw/-Debug/;
	    +use Catalyst qw(
	    +    Authentication
	    +    Authentication::Credential::Password
	    +    Authentication::Store::Minimal
	     
	    +    Session
	    +    Session::State::Cookie
	    +    Session::Store::FastMmap
	    +);
	    +
	     __PACKAGE__->config(
	         name => 'PlaggerLDR',
	         'View::JSON' => {
	             expose_stash => 'json',
	         },
	    +    authentication => {
	    +        users => {
	    +            your_username => { password => 'your_password', },
	    +        },
	    +    },
	     );
	     __PACKAGE__->setup;
	     
	     sub default : Private {
	         my ( $self, $c ) = @_;
	     
	    -    # Hello World
	    -    $c->response->body( $c->welcome_message );
	    +    $c->login(
	    +        $c->req->params->{u},
	    +        $c->req->params->{p},
	    +    );
	    +
	    +    $c->res->status(404);
	     }
	     
	     1;

2006-05-10 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 15:20  [life]:
	出社。

2006-05-09 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 18:14 Xango [perl]:
	test 失敗したなーとおもったら podcoverage でこけてる。ちょw

	* 14:28 plagger+LDR [plagger]:
	[subtechグループ - Bulknews::Subtech - \[Plagger\] Livedoor Reader Frontend](http://subtech.g.hatena.ne.jp/miyagawa/20060509/1147150987)

	きたこれ！

	plagger最高！

2006-05-08 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:16  [life]:
	退社。

	* 10:22  [life]:
	出社。

2006-05-07 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 18:32 パスポート [life]:
	とりに岐阜まで行ってきた。日帰りで。

	つかれたー。かえりに菊菜の駅がありえないほど混んでて歩くのもしんどくて、またオレがナッパなら(ry とか思いつつ帰ってきた。

	今のパスポートってICチップいりなんだよ！すごい！

	* 18:15  [linux]:
	> [CMS researcher - zsh: 直前にうったコマンドをクリップボードに(Mac OS X限定)](http://d.hatena.ne.jp/ysano2005/20060507/1146984859)

	    tail -n 1 ~/.zhistory | perl -pe 's/.*?;//' | xclip

	かな。Linuxだと。

	そういえばおなじようなネタで screen と X のコピペを同期するとか言うのあった気がするなぁ。

	* 07:39 iPod [life]:
	昨日はiPodなくして、ショックすぎた。もーどこさがしてもなくて。

	前に気づかないうちに机から落としていてごみ箱のなかに入っちゃってたことがあったので、会社のごみ箱ひっくりかえしてみてもみつかんなくて。

	移動時つねにもってるし、セットで持ち歩いてるヘッドホンは持ってきていたので、会社のどこかにあるはずなんだけど。

	けどみつかんない！ので昨日はあきらめて帰った。

	なんつーかしずかーに自転車漕ぐのは非常にさみしいね。

	んで今日改めて探し回ったのち、なんとなくティッシュの箱に手入れてみたら！！！ あったっすよ、コレ。

	灯台下暗しすぎた。

	連休一番のイベントでした。

2006-05-05 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:11 結局 [perl]:
	modulemaker にもどったよ。

	module-starter で modulemaker と同じことをやろうとしてプラグイン書きはじめるとかばからしかったので。

	* 19:29 Module::Starter [perl]:
	モジュール作ろうと思ったらノートにまだ modulemaker 入れてなかったので、Damian おすすめの Module::Starter をいれてみた。

	お、これも plugin 機構もってるな

	    sub import {
	        my $class = shift;
	        my @plugins = ((@_ ? @_ : 'Module::Starter::Simple'), $class);
	        my $parent;
	    
	        no strict 'refs';
	        while (my $child = shift @plugins) {
	            eval "require $child;"; 
	            die "couldn't load plugin $child: $@" if $@;
	    
	            push @{"${child}::ISA"}, $parent if $parent;
	    
	            if ($child->can("load_plugins") and @plugins) {
	                $parent->load_plugins(@plugins);
	                last;
	            } 
	            $parent = $child;
	        }
	    }

	これもおもしろい。

	Mixinじゃなくて直列つなぎなんだな。

	* 15:04 コロンビア ナリニョ スプレモ [life] [starbucks]:

	* 15:03  [life]:
	観光客UZEEEE。GWUZEEEEE。

	スタバが夢遠いよ。。

	オレがナッパだったら町ごとふっとばしてるところだ。

	* 00:54 perlの学習こすと [perl]:
	正直ソース嫁な僕の横でperl勉強する人は大変だと思うよ。。

	なんか宿題だすかー！

	ああしまった。GW前に思い付くべきだった。

2006-05-04 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 17:06 MOTHER3 [life] [game]:
	7 章まで来た。

	けんたろさんにはプレイ時間10時間くらいといったけど今みたら11:53とかなってました。

	* 04:44 MOTHER3 [life] [game]:
	5 章まできた。

	* 04:41  [life]:
	ひとまず `svk revert -R`

	どうしようーー

	* 04:38 NEXT うれしいところ [catlxom]:
	plugin の初期化は駱駝なぁ。何も考えなくていい。

	でも plugin つくるのはめんどくなる部分の方が多いんだよなぁ。

	* 03:23 Plugin [catlxom]:
	NEXT やめやめ。

	なんもうれしいことない。

	plagger の hook 機構をぱくろう。そうしよう。

2006-05-03 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:03 sshfs [life]:
	ubuntu にうまく shfs いれられなかったので、速攻あきらめて sshfs をためしてみた。

	こっちのがいいかも。emacs でリモートファイル編集してもごみが残らない。

	* 20:45 Plugin::Flavour [life] [catalyst]:
	mmm..

	* 03:26  [life]:
	退社。

2006-05-02 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 11:29  [life]:
	出社。

2006-05-01 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:45  [life]:
	退社。

	* 15:40  [life] [linux]:
	synergy 経由で操作しているといつのまにか PC 自体のキーボードのキーリピートが無効になる。。なんだろ

	* 11:58 やつがきた #2 [life]:
	<a href="http://www.flickr.com/photos/typester/137951435/" title="Photo Sharing"><img src="http://static.flickr.com/47/137951435_3ccde6e44c_m.jpg" width="180" height="240" alt="Kayac newbie" /></a>

	本大量に持ってきた。

	* 09:56 やつがきた [life]:

	* 09:02 起床＠会社 [life]:
	ねむ。みんな早く来すぎだよ。

2006-04-30 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 16:49 ubuntu on X41 [life] [linux]:
	なんか現実逃避で Thinkpad に Linux いれた。

	<a href="http://www.flickr.com/photos/typester/137330923/" title="Photo Sharing"><img src="http://static.flickr.com/53/137330923_cbf42ce758_m.jpg" width="240" height="192" alt="ldr" /></a>

	なんかいろいろよくわからなくて苦労したけど、Windows と比べてると軽すぎる。。全然スワップしねぇ！！

	あとインストーラの時点で無線 LAN 認識してたのは驚いた。Thinkpad の Fn キーとかも普通に使えるし。。すごいなあ。

2006-04-29 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 13:32  [life]:
	退社。

2006-04-28 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 13:15  [life]:
	出社。

	* 02:10  [life]:
	退社。

	* 01:08  [catlxom]:
	<a href="http://www.flickr.com/photos/typester/135951540/" title="Photo Sharing"><img src="http://static.flickr.com/53/135951540_d71d72299d_o.png" width="564" height="444" alt="catlxom prototype" /></a>

	とりあえず blosxom デフォルトくらいのはうごくようになった。

	テンプレート書くのがだるぃ。

2006-04-27 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 15:46 重い！ [life]:
	Thinkpad。メモリ買おう。

	* 14:23 CGI版 [catlxom]:
	catlxom.cgi

	もつくるか。いらない子だけど、作るのは楽しそう。

	Catalyst 関係なくなるがｗ

	* 13:03  [catlxom]:
	あー、render より interpolate のほうが blosxom ぽい？

	* 12:48 プラグイン周りとかライフサイクルとか [catlxom]:
	プラグインは plagger みたいに config.yaml に使うのを書くのではなくて、blosxom みたいに plugin ディレクトリに置くだけで動作、みたいな感じにしたい。

	けどそうする場合の配布方法の問題。あと複数の設定を使い分けるのも面倒になる。

	あと複数の設定を使い分けたいときの mod_perl 問題も。

	プラグインはとりあえず NEXT 方式にした。叩かれそうｗ

	あとライフサイクル案:

	 * setup
	 * start
	 * update
	 * filter
	 * sort
	 * render
	 * end

	setup は起動時のみに実行され、あとはリクエスト毎に start〜end が回る。Plagger の fixedup みたいのも欲しいかもなぁ。filterでいいのかな。

	これをプラグインで定義してやって、catlxom の動作を決める。

	Plugin::Entry::Blosxom は setup で全エントリをロード。update で更新チェックし、更新があったものは再ロード。

	Plugin::Template::TT は setup でテンプレートロード。update で更新チェック。render で Templatize。

	みたいな。

	* 11:13  [life]:
	出社。

2006-04-26 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:14  [life]:
	退社。

	* 20:20 catlxom のコードを書き始めた [life] [catlxom]:
	[catlxom](http://catlxom.org/trac "catlxom - Trac") とは [Blosxom](http://www.blosxom.com/) や [Plagger](http://plagger.org/) にインスパイアされた [Catalyst](http://catalystframework.org/) ベースの Web サイト構築フレームワーク(になる予定)。

	ようするに Plugin でなんでもできちゃうよという。この CLON も catlxom で実装できるなー。

	Webアプリ版 Plagger。

	あーでもないこーでもないとコード弄りまくってる段階だけど、おもろいなぁ。

	* 18:04 コロンビア ナリニョ スプレモ 100g [life] [starbucks]:

2006-04-25 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 19:33 MOTHER3 [life] [game]:
	3章突入。

	* 14:39  [life]:
	出社。

2006-04-24 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:17  [life]:
	退社。

	* 20:45 はてな認証API [web] [hatena]:
	GJ!

	さっそく [Cred::Hatena](http://svn.unknownplace.org/public/library/perl/trunk/Catalyst-Plugin-Authentication-Credential-Hatena/) を作ってみた。

	ここにも導入しようかな。

2006-04-23 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 18:32 linkage.xrea.jp [life] [web]:
	が見えなくなっちゃってる。ここにミラーされていた [XHTML リファレンス](http://linkage.xrea.jp/ref/xhtml_ref/)に依存しまくっていたので困りまくる。

	とりあえず webarchive.org でみれた。

	[XHTML リファレンス \[WEB ARCHIVES REPRINT\]](http://web.archive.org/web/20050207151033/http://linkage.xrea.jp/ref/xhtml_ref/)

	と思いきやアーカイブされてないページもあるなぁ。

	* 15:40 Root コントローラ #2 [perl] [catalyst]:
	今までのルートコントローラは MyApp.pm 自体だった。

	でもこれだと YAPC でちょろっと話したように Catalyst は自分自身も  Plugin も MyApp の親としてロードされるようになっているため、ルートコントローラと Catalyst 自身やプラグインの名前空間が干渉する。

	いわゆる sub login 問題ですが、普通に prepare とかいうアクション定義すると Catalyst の prepare 呼ばれなくなってアボンとかいうことになってて、かなり微妙な感じだった。

	なので 5.66 から MyApp::Controller::Root に外付けできるようになった。一応まえと同じ書き方でも動くけど、Root.pm 推奨という流れ。

	とか書いておいてみる。

	* 15:37 Root コントローラ [perl] [catalyst]:
	いつの話題だよｗ

2006-04-22 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 17:15 MOTHER3 [life] [game]:
	1章終わったー。

	* 01:54  [life]:
	退社。

2006-04-21 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:59  [life] [game]:
	<a href="http://www.flickr.com/photos/typester/132250877/" title="Photo Sharing"><img src="http://static.flickr.com/51/132250877_9629e7f320_m.jpg" width="240" height="161" alt="MOTHER3" /></a>

	昨日寝る前に20分くらいやった。

	おもろそうな予感がした。

	* 16:03 API関係 [life] [catalyst]:
	現在 `Catalyst::Plugin::RPC` という RPC の統合プラグインを作成してます。

	以下のような感じ。

	    use Catalyst qw/
	        RPC
	        RPC::Serializer::URIQuery
	        RPC::Serializer::XML
	        RPC::Serializer::JSON
	        /;

	などと RPC と一緒に使いたいプロトコルのシリアライザをロードしておくと

	    # endpoint
	    sub rpc : Global {
	        my ( $self, $c ) = @_;
	        $c->rpc;
	    }
	    
	    sub echo : RPC('myapp.echo') {
	        my ( $self, $c, @args ) = @_;
	    
	        @args;
	    }

	というような RPC アクションが利用できるようになるというものです。

	deserializer はリクエストの Content-Type から自動的に判別されるため、同じアクションを複数のプロトコルで共有できます。(このあたりはmiyagawaさんインスパイア)

	serializer はデフォルトでは deserializer と同じになりますが、format=json などとクエリで渡し指定することも可能となっています。

	Plugin::Flavour と組み合わせて /rpc.js 等とアクセスすれば Serializer::JSON が使われるようにもできますかね。これはどうしようかな。

	とりあえず今はRPCプラグイン本体を大まかに実装して、sri のコードコピペして Serializer::XML 作って XMLRPC のみ動くようになった段階。

	なんか同じようなことしてる人がいるっぽいので情報共有もかねて書いてみるｗ

	フィードバックフィードバック！

	* 11:05  [life]:
	出社。

	* 01:08  [life]:
	退社。

2006-04-20 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 16:44 DBIx::Class::Schema [perl] [dbic]:
	Schema ベースにすると重くない？

	なんかアプリの起動に10秒くらいかかるよ。。

	* 16:38 MOTHER3 [life]:
	届いた！

	* 16:01 カフェエスティマ 100g [life] [starbucks]:
	
	* 14:00 livedoor Reader 要望 [web]:
	 1. Bloglines にある note 機能
	 2. 1エントリに2個のURL情報がある場合のサポート

	がほしいなぁ。

	1 はBloglinesでフィード登録するときなんで登録したら書くために使っていて、こうしておくとあとから「オレは何でこんなくそフィード登録したんだ？」ってなるのを防げる。でもあんまり意味ないけど。

	2 は RSS1.0 だったら rdf:about と link、Atomだったら link の rel 属性とかで二つURLもってたりする。Bloglines だとこの場合、タイトルで rdf:about に飛べて、下のほうに link というリンクアンカーがでていてそこから link 先へ飛べる。

	オレンジニュース とか、diggdot.us とかがそういう感じのフィードになってる。

	* 10:34  [life]:
	出社。

	* 01:18  [life]:
	退社。

	* 00:30  [web] [firefox]:

	    @-moz-document url-prefix('http://reader.livedoor.com/reader/') {
	        #header, #menu, #footer, #ads_top, #ads_bottom { display: none !important; }
	    }

2006-04-19 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:06  [life]:
	なんか変だと思ったらSNS用のplaggerのcrontabコメントアウトしたままだった。おおう。

	* 16:06  [life]:
	でも一番うるさいのが設定中のXServeな罠。

	* 12:05  [life]:
	あー、会社うるさい。

	静かなところで作業したい。

	* 11:14  [life]:
	出社。

2006-04-18 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:11  [life]:
	退社。

	* 13:02 Catalyst::Plugin::DebugScreen [perl] [catalyst]:
	とか作った。自分用。

	[repos](http://svn.unknownplace.org/public/library/perl/trunk/Catalyst-Plugin-DebugScreen/ "Catalyst-Plugin-DebugScreen")

	$c->debug が偽のときでも DebugScreen を出したかったのだけど、今の cat の実装だと無理っぽかったので。

	Catalyst::Plugin::StackTrace と Catalyst::Engine からのコピペに、おまけで Template で自分で DebugScreen を定義できるようにしただけのやつ。

	* 12:57  [life]:
	鼻かみすぎて耳が痛い。

	* 02:24  [life]:
	退社。

2006-04-17 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:55  [life]:
	風邪ひいたくせー。

	* 12:29 sub camera [life] [photo]:
	すげー天気よくて、しかも後で海方面行く用事があるっていうのに、ISO400のフィルムが入っちゃってるという。

	もう一個カメラほしーなぁ。X-700 とかですかね奥さん。

	* 12:27 lighty で configtest [lighttpd]:

	    lighttpd -t -f lighttpd.conf

	* 11:15 Flickr 認証の問題点 [life] [web] [flickr]:
	まぁしょうがないのかもしれないが。

	Flickr の認証 API を使うアプリケーションは、アプリケーション自身の権限を read のみ、read/write、read/write/delete という設定をでき、ユーザーは最初にログインするときにその権限を確認のうえログインができるようになっているのだけど、最小の権限が read という問題。

	認証のみの目的で利用するような場合にも read になるわけだが、この権限ではログインしたユーザーの写真をアプリ側ですべてみることができてしまう。

	たとえ完全に private な写真であっても。

	認証のみの権限があるといいなぁ。

	* 09:59  [life]:
	出社。

2006-04-16 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 22:12  [life]:
	退社。

	* 15:02  [life]:
	XML::Simple かけたら珍しく良い感じになった。

	    $c->stash( XMLin( $content, ForceArray => [qw/photo/]) );

	でいいやもう。

	* 14:42 配列を何個かごとに分割したい [perl]:
	以下のような Flickr API の レスポンスをパースしようとしていて

	    <?xml version="1.0" encoding="utf-8" ?>
	    <rsp stat="ok">
	    <photos page="1" pages="4" perpage="100" total="333">
	        <photo id="126831864" owner="29838003@N00" secret="b12ca76f6a" server="54" title="達人" ispublic="1" isfriend="0" isfamily="0" />
	        <photo id="126831781" owner="29838003@N00" secret="5a9b9f4075" server="44" title="party room" ispublic="1" isfriend="0" isfamily="0" />
	        <photo id="124231350" owner="29838003@N00" secret="d7a463ebb6" server="41" title="P3290041.JPG" ispublic="1" isfriend="0" isfamily="0" />
	         :

	こんなコード書いたの、

	    @{ $c->stash->{photos} }{qw/page pages perpage total/} = $content
	        =~ m!<photos page="(\d+)" pages="(\d+)" perpage="(\d+)" total="(\d+)">!;
	    
	    my $re
	        = qr!<photo\ (id)="(\d+)"\ (owner)="(.*?)"\ (secret)="(.*?)"\ (server)="(\d+)"
	                 \ (title)="(.*?)"\ (ispublic)="(\d+)"\ (isfriend)="(\d+)"\ (isfamily)="(.*?)".*?/>!x;
	    
	    my @matches = $content =~ /$re/g;
	    for ( my $i = 0; $matches[$i]; $i = $i + 16 ) {
	        my %photo = @matches[ $i .. $i + 15 ];
	        push @{ $c->stash->{photo} }, \%photo;
	    }

	:O

	`@matches` をかっこよく分割したい。

	* 11:55  [life]:
	マックのコーヒーがうまくなってる件。普通にのめるよ。すごい。

	ファストフードでは一番うまいんじゃない？これ。いつからだろ。。

	* 00:46 fotologue の URL [web]:
	    http://fotologue.jp/typester#/path/to

	みたいな書き方良いね。一瞬普通のURLにみえる。

2006-04-15 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 23:44 50mm 1.2 [life] [photo]:
	[ヤフオクに出てて](http://page8.auctions.yahoo.co.jp/jp/auction/h38369829)ヲチしてたけどやっぱ人気だなぁ。上がりまくり。

	今の F1.4 で満足してるのでまぁそんなに欲しくないのだけど。

	* 17:10  [life]:
	出社。

	* 16:17 ダウン [life]:
	久々に寝込んでしまった。しかもなんか食あたりっぽいもの。

	何がいけなかったのだろう。

	いろいろ迷惑かけてしまった。

	いちおう復活したっぽい。

2006-04-13 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 22:17  [life]:
	退社。

	* 11:04  [life]:
	出社。

2006-04-12 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:57  [life]:
	もうかえろっと。なんかやる気でない。

	退社。

	* 22:01 $ ls -a ~/|egrep -i '^\.' [life]:
	via [subtechグループ - 'hceT'.sub(/\Z/,'bus').reverse - ls -a ~/|egrep -i '^\.'](http://subtech.g.hatena.ne.jp/secondlife/20060412/1144827617)

	symlink なのがバージョン管理してる設定ファイル。

	    ./
	    ../
	    .anthy/
	    .aptitude/
	    .autosave/
	    .backup/
	    .bash_history
	    .bash_profile
	    .bashrc
	    .cpan/
	    .cpanplus/
	    .elmo/
	    .emacs@
	    .emacs.d/
	    .emacs~
	    .fetchmailrc
	    .folders
	    .gnupg/
	    .ircmotd
	    .irssi/
	    .keychain/
	    .kkcrc
	    .mew.el
	    .mew.el~
	    .modulemaker/
	    .mutt/
	    .mysql_history
	    .navi2ch@
	    .pause
	    .perlsh_history
	    .perltidyrc@
	    .plagger/
	    .plagger-customfeed/
	    .procmailrc
	    .procmailrc~
	    .pyzor/
	    .recentf
	    .recentf~
	    .riece@
	    .rnd
	    .screen@
	    .screenrc@
	    .screenrc_base
	    .screenrc_base~
	    .screenrc~
	    .spamassassin/
	    .sqlite_history
	    .ssh/
	    .subversion/
	    .svk/
	    .wgetrc
	    .wl
	    .ximapd
	    .ximapd~
	    .zcompdump
	    .zhistory
	    .zshrc@
	    .zshrc.bak
	    .zshrc~

	* 12:06 ムアンジャイブレンド 100g [life] [starbucks]:

	* 10:13  [life]:
	出社。

	* 03:31 気合icalデータ [life] [perl]:
	社内スケジューラを `WWW::Mechanize` って無理やり iCal 形式のファイルを作るのを書いた。超強引だけど満足度かなり高い。

	いまはスケジューラ->iCalだけだけどその逆も実装したいところ。

	あと、それで気づいたのだけど、30boxes に読み込ませるためには `X-WR-CALNAME` が定義されてる必要があるよう。

	30boxes で ics ファイル読み込ませたいけどなんかエラーるよという人は `X-WR-CALNAME` 追加して見るといいかもしれない。

2006-04-11 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 18:56 overload 期 [perl]:
	が来た。

	* 12:26 clouder さんのところに [life]:
	コメントしようとしてTypekey認証したら

	> コメントしてください サイン・インを確認しました、typester. さん。コメントしてください。

	とかでて何じゃこりゃとか思ってたら、なにコメントしようとしたか忘れた。

	* 11:01  [life]:
	出社。

2006-04-10 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 17:33 さっきかいたの [perl] [dbic]:

	    __PACKAGE__->inflate_column(
	        query => {
	            inflate => sub {
	                my $u = URI->new;
	                $u->query(shift);
	    
	                my $ret = {};
	                for my $k ( $u->query_param ) {
	                    my @v = $u->query_param($k);
	                    $ret->{$k} = @v > 1 ? [@v] : $v[0];
	                }
	    
	                $ret;
	            },
	            deflate => sub {
	                my $utf8off = sub {
	                    my $str = shift;
	                    utf8::encode($str) if utf8::is_utf8($str);
	                };
	    
	                my $hash = shift;
	                for ( keys %$hash ) {
	                    if ( ref $hash->{$_} eq 'ARRAY' ) {
	                        $utf8off->($_) for @{ $hash->{$_} };
	                    }
	                    else {
	                        $utf8off->( $hash->{$_} );
	                    }
	                }
	    
	                my $u = URI->new;
	                $u->query_param(%$hash);
	                $u->query;
	            },
	        }
	    );

	`foo=bar&baz=blah` みたいなクエリを保存するカラムに、ハッシュで保存してハッシュで取り出すというやつ。

	短くかけるかと思って書き始めたら、URIの `query_form` や `query_param` にutf8フラグったの渡すとこけたり、`foo=bar&foo=baz` のように配列になるべきものがうまくハッシュにできなかったりとかしてこんなに長く。

	* 11:14  [life] [javascript] [jemplate]:
	Jemplate 試してみた。超楽。

	あとTT理解できるデザイナであればjavascriptでつくってるHTMLがすぐわかるってのも利点だなぁ。

	* 09:59  [life]:
	出社。おお遅刻じゃない。

2006-04-09 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 22:43  [life]:
	今日は妹のPCを買いに秋葉原へ。久しぶりすぎて駅前にメイド姿の人がいっぱいいるのに軽くカルチャーショックを受ける。

	その後、そのまま厚木までいって叔父夫婦と食事。ホルモンテラウマス。

2006-04-08 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 20:58 ls *.pl [life]:
	ホームディレクトリには何も置いてないのだけど、`~/temp` でやったら

	    $ ls *.pl
	    array.pl        flickrtoken.pl  mua_list.pl       proxy.pl          test_gmail2.pl
	    atomclient.pl   geo.pl          musicsync.pl      require.pl        test_utf8.pl
	    atomtest.pl     gmail.pl        num.pl            stdin.pl          testdns.pl
	    classdata.pl    import.pl*      orz.pl            super.pl          testmore.pl
	    daap-server.pl  love.pl         overload.pl       syntaxhilight.pl  testtemp.pl
	    datetime.pl     maketable.pl    pathclass.pl      termtest.pl       under.pl
	    dbic_test.pl    mime.pl         plagger_test.pl*  test.pl           weaken.pl
	    filetemp.pl     mimelite.pl     podload.pl        test_emacs.pl
	    find.pl         movizotest.pl   podtest.pl        test_get.pl
	    flickrtest.pl   mua_count.pl    postmovie.pl      test_gmail.pl

	こんなにでた。。

	* 18:19 Catalyst::Plugin::Flavour 0.03pre [perl] [catalyst]:
	あぷ。新機能のドキュメント、テスト書いてないので Developer release にしておいてみる（ぉ

	いままでは flavour とはいうものの Blosxom とは違い最初のパスを flavour としていたのを、Blosxom 互換な拡張子による方法に対応。

	設定で、flavour, flavours_except が定義されていない場合この互換モードになるようにしておいた。

	あと最初のパスを flavour にするモードの場合に、いままでは

	    flavours => [ 'html', 'rss', 'js', ]

	などとして定義したものだけを flavour として扱うということをしていたけど、

	    flavours_except => [ 'about', 'login', ]

	などと、特定のパス以外はすべて flavour として扱うオプションも追加。これではてなっぽいアプリが簡単に作れるかね。

	あと、date_flavour 機能もつけた。

	これは /2005/04/08 などのような日付っぽいURLにアクセスされた場合、`$c->flavour->(year|month|day)` に日付を格納し、その日付部分をパスから除く。

	この機能はデフォルトONで date_flavour => 0 とすればOFFにできる。

	一気に機能追加しすぎてドキュメント書くのがあれすぎる。

	しかも日本語の説明でも上記みたいに意味不明になっちゃうのに英語だとどうなっちゃうんだ、という。

2006-04-07 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 23:48  [life]:
	退社。

	* 18:34 CPAN Ratings に返信とかは [perl]:
	どうやればいいんだろう。

	> [Array-Diff reviews](http://cpanratings.perl.org/dist/Array-Diff)

	に反応したいんだけど。

	* 11:21 WRONGSCALE 新譜 [music]:
	キター

	<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EZ88MS/unknownplace-22/ref=nosim/" title="WRONG SCALE - fate effects the surface"><img src="http://images-jp.amazon.com/images/P/B000EZ88MS.09.MZZZZZZZ.jpg" alt="WRONG SCALE - fate effects the surface" /></a>

	* 11:03  [life]:
	出社。

	* 01:08  [life]:
	退社。

2006-04-06 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 11:11  [life]:
	出社。

	* 00:22  [life]:
	退社。

2006-04-05 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 17:10 30boxes 用 Quick Search  [firefox] [web] [30boxes]:
	    http://30boxes.com/index.php?action=newEvent&input=%s

	これで、アドレスバーから直で予定入れられる。

	* 10:32  [life]:
	出社。

	* 01:56  [life]:
	退社。

2006-04-04 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:31 岩瀬 [sports]:
	また救援失敗したのか。

	* 19:05  [perl] [plagger]:
	miyagawa さんの sub ref の使い方かっこいいなぁ。まねよう。

	* 13:27  [life]:
	出社。

	* 03:32 マウスの話 [life]:
	あれさ、左利きが右手でマウス使うのと、右利きが左手でマウス使うのを同じに見てるのがそもそも間違い。

	* 02:43  [life]:
	退社。

	* 02:01  [life] [svk]:
	SVK のローカルコピーを複数の場所に checkout して作業してるとなんかおかしくなるなぁ。

	pull するとコンフリクトまくったり。そこで push ろうとするとやばげな感じ。-C したらなんか G マークいっぱい出たのでローカルコピー作り直したんだけど。

2006-04-03 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 11:01  [life]:
	社会復帰。

2006-04-02 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 18:56 hackathon #3 [life] [yapc] [emacs]:
	miyagawa さんの emacs さばきをみていてなんかバッファの切り替えが違うぞと思って聞いたところ、iswitchb とかいうのを使ってると教えてもらった。

	emacs21なら

	    (iswitchb-default-keybindings)

	22 なら

	    (iswitchb-mode 1)

	で C-x b がインクリメンタルに。やべぇぇえぇ。ありえないほど便利。

	* 05:57 hackathon #2 [plagger] [yapc]:
	perldoc ブラウザをつくっていたけどめんどくて飽きたので、YAPC 終わったら使い方まとめるとかいってた Plagger::Plugin::Store::DBIC に取り組む。

	そのうち Plagger 本体もDB対応するということらしいのでそれまでの野良プラギン。とりあえず僕の[レポジトリ](http://svn.unknownplace.org/public/library/perl/trunk/Plagger-Plugin-Store-DBIC/ "Plagger-Plugin-Store-DBIC")にUP。

	使い方は sql ディレクトリにはいってる plagger.sqlite.sql から

	    $ sqlite3 plagger.db < sql/plagger.sqlite.sql

	などとしてDBをつくって

	      - module: Store::DBIC
	        config:
	          schema_class: Plagger::Schema::SQLite
	          connect_info: [ 'dbi:SQLite:/path/to/plagger.db', ]

	などと設定ファイルを作ればOK。

	schema_class はめんどいから SQLite 用しかつくってないよ。

2006-04-01 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 23:32 hackathon [life] [yapc]:
	とりあえず [-ingy](http://unknownplace.org/cpanrecent/author/-ingy) 実装。

	* 01:37  [life]:
	退社。

	YAPC でたまりまくった未読フィードやっと消化完了。

2006-03-31 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 13:01  [life]:
	出社。

	なんか人がいっぱいいる。

	* 02:34  [life]:
	退社。

2006-03-30 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 22:41  [life]:
	帰社。

	* 17:42  [life] [yapc]:
	Larry がなんか手間取っております。

	今日のトークはなんか言い忘れたこと多いので後で補足を書く。

	* 14:11 YAPC 二日目 [life]:
	電源確保し、小展示ホールのトークを聞きつつスライドつくり。

	やっとできた。

2006-03-29 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 09:39 YAPC [life]:
	きた。

	* 02:44  [life]:
	とりあえず退社。

	* 02:39 YAPC [life]:
	スライド書き中。なかなか進まない＞＜

	とりあえず Spork::S5ThemeKayac は作った。

2006-03-28 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 11:03  [life]:
	出社。

	* 02:51  [life]:
	退社。

2006-03-27 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 21:08  [life]:
	コーヒーを沸かす間、リフティングの練習するのが流行。

	あと、一人移動オフィス。

	* 12:37 ためしどり [life] [photo]:
	早速昨日のカメラに12枚撮りフィルムいれて仕事前にプラプラしてみた。

	<a href="http://flickr.com/photos/typester/sets/72057594091515749/" title="Test XD - a photoset on Flickr"><img src="http://static.flickr.com/55/118524951_166d379656_m.jpg" width="240" height="161" alt="80design's desk" /></a>

	おまけでつけてくれたレンズにしては結構良かった。ちょっとリング重いんだけど。

	24mmぐらいのレンズほしいなぁ。とか。

	* 10:01  [life]:
	出社。

2006-03-26 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 21:33 カメラが [life]:
	また増えました。

	馬鹿ですね。

	* 05:36  [life]:
	ぎゃー、今日は天気悪そう。

	フォトライフろうと思ってたのに。あぁー昨日に戻りたい。

	* 03:50 mutt にも [mutt]:
	だいぶ慣れてきた。

	唯一不便なのがメール書くときだなぁ。僕は `$EDITOR=emacsclient` なので mutt でメール書くと普通に emacs が開くのだけど、メール書き終わるまで mutt 側は Waiting for Emacs... で何にも操作できないので、他のメール参照しようと思っても出来なかったりとか。

	Mew のころは書きかけメールを buffer にためまくっていたので、かなり不便だ。(そのせいで書きかけでそのままなメールがいっぱいあるのだがｗ)

	mutt はエディタ起動するだけでそのまま投げっぱなしで、送信は emacs のほうでやるようにできればいいなぁ。

	どうやるんかわからんけｄ

2006-03-25 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 03:58  [life] [web]:
	Gyaoがログイン必要になってるよ。

	* 02:59  [life]:
	退社。

	* 01:32 E-300 買った [life] [photo] [camera]:
	パナソニックの例のデジタル一眼買うこと前提で、レンズ集めのために同じフォーサーズの型落ちE-300を入手。

	今までは銀鉛ばかりだったので戸惑いまくり。正直、あまり気に入らない。

	写り云々じゃなくて、写真撮っているときの楽しさが全然違うなぁ。

	でもパシャパシャとりまくれるのはいいんだけど。うーーむ。

2006-03-24 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 12:18  [life]:
	出社。

	* 01:56  [life]:
	退社。

2006-03-23 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 11:19  [life]:
	出社。

	* 01:17  [life]:
	退社。

	* 00:32 イタリアンロースト 100g [life] [starbucks]:
	昼間買ったんだけどね。

2006-03-22 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:30  [mutt]:
	1 も解決

	    message-hook ~N 'exec sync-mailbox'

	cool!

	* 18:01  [mutt]:
	下記 2 は解決した。

	    set mbox_type=Maildir
	    set spoolfile="~/Maildir"
	    set folder="~/Maildir"

	としかしてなかった。これに

	    set mbox="~/Maildir"

	を追加したら出なくなった。

	<ins>`set move=no` でよかったぽい。</ins>

	* 17:38 mutt 雑感 [mutt]:
	素晴らしいなぁ。メール書くときは mew のほうが優れてると思うけど。

	今わからないこと

	1. 未読を表示し、Maildir 更新 (new から cur にメールをうつすの) にいちいち $ 打つのがめんどくさい。
	   これは削除とかそういうのだけにしたい。というのも未読よんでも $ 押さなければ biff がうまく動かないから。
	2. 終了するとき `Move read messages to /home/typester/mbox? ([no]/yes):` とか聞かれるのがうざい。なにこれ。

	* 03:14  [life]:
	ヘブライの人はまだ20歳なのかぁ。すげーなぁ。

	* 02:01 mew to mutt [life] [mutt]:
	Mew に特に不満はなかったのだけど、imapではローカルに全部ダウンロードしてきちゃうし、ローカルでMaildir使ってる場合でも別の場所にまんまコピーをつくるのでいまいちスマートじゃないなぁと思っていた。

	muttはなんか起動するたびにMaildir読み込むからすげーおそいし、とか言ったらナガヤマンがヘッダをキャッシュしておくパッチがあるらしいと教えてくれたので入れてみた。

	そのパッチ当てて入れてみたら、初回起動は変わらないが、2回目以降の起動はめっさ早くなった。

	inbox に今 53000 通くらいメールあって、初回起動は1分以上かかるけど、次からは1,2秒。すごい。キャッシュファイルは40MBちょいくらいだ。

	起動しっぱなしで使うだろうからそんなに関係ないとは思うけど、さすがにデフォルトの状態はありえない。

	メモ:

	    $ sudo apt-get build-dep mutt
	      (snip.. gdbm が入ってるかとかたしかめたりとか)
	    $ wget http://prdownloads.sourceforge.jp/mutt-j/8177/mutt-1.5.6i.tar.gz
	    $ wget http://prdownloads.sourceforge.jp/mutt-j/8179/mutt-1.5.6i-ja.1.tar.gz
	    $ wget http://wwwcip.informatik.uni-erlangen.de/~sithglan/mutt/patch-1.5.6.tg.hcache.12
	    $ tar -zxvf mutt-1.5.6i.tar.gz
	    $ tar -zxvf mutt-1.5.6i-ja.1.tar.gz
	    $ cd mutt-1.5.6
	    $ patch -p1 < ../patch-1.5.6.tg.hcache.12
	    $ patch -p1 < ../mutt-1.5.6i-ja.1/patch-1.5.6.tt.ja.1
	    $ ./prepare --prefix=/usr/local/mutt --enable-hcache --enable-default-japanese
	    $ make
	    $ sudo make install

	cacheパッチが1.5.6用は15まであるけど、13以降はうまくコンパイルできない模様。うちでも失敗したので何も考えず12を入れた。

	設定もぼちぼちやろう。

2006-03-21 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:25  [life]:
	出社。

	* 04:40  [life]:
	退社。

2006-03-20 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 13:58  [life]:
	世間がいう Perl ができるってのと僕らが言うそれとはずいぶん違うんだなぁと思った。

	* 05:16 256色PuTTY with screen [life] [putty] [linux] [screen]:
	でけた。

	ごろさんのやり方を参考にいろいろ

	> [subtechグループ - 'hceT'.sub(/\Z/,'bus').reverse - putty 256色](http://subtech.g.hatena.ne.jp/secondlife/20060313/1142237563)
	>
	> 1.   screen の --enable-colors256 のコメントアウトをハズして debuild る
	> 2. ncurses-term を入れて /etc/terminfo を れて/usr/share/terminfo の symlink にする←これって大変微妙
	> 3. putty の xterm-256 を使うのチェックを入れる
	> 4. putty の端末タイプの文字列を xterm-256color に

	1やって、2は ncurses-term (terminfo/xterm-256colors用) いれただけ。symlinkはいらねぽい。

	3やって、4 は screen しかつかわなかったら変えなくてOk。

	これで screen 上で 256color2.pl は通るようになる。

	でも emacs, vim ともに TERM=xterm-256colors して起動しないと256にならん。こういうもんかね。

	あと、このままだと背景色関係などおかしな部分が出るので .screenrc に

	    defbce on

	と書いて bce モードを ON にする。こうすると vim とかの特定の colorschema で背景がおかしくなるのも治る。bce モードが何かは知らない（ぉ

	後こうすると TERM が screen-bce とかになるのでいろいろなスクリプトの書き換えが必要、めんどい。

	* 00:59 鎌倉はかそん [life]:
	なやがまんと。

	VMWare をいれてみつつ、vim の使い方を教わる。むずい＞＜

	巷で colinux より軽いともっぱらの噂の VMWare だが、正直体感では全然重い気がする(手元のcolinux0.6.2と比較)

	慣れ親しんだ svk, aptitude の反応が VMWare テラオソス。

	最近のバージョンの colinux が不安定つことなんかね。

	までも VMWare の良いと思った点は

	 * イメージファイルの容量が可変(1Gのイメージ作っても使ってるバイト数分しか容量食わない)
	 * サスペンドできるからいつでも復旧可能

	とノートPCにはやさしい感じなので、もう少し使ってみようかと。

	vim はむずい。あと perl の色付けがキモイ。

2006-03-18 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 02:18  [life]:
	退社。

2006-03-17 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 21:06 ユーコンブレンド 100g [life] [starbucks]:

	* 15:41 JavaScript や CSS の query に自動で最終更新時間をつける Catalyst Plugin [perl] [catalyst]:

	> [川o・-・）＜2nd life - JavaScript や CSS の query に自動で最終更新時間をつける Rails Plugin](http://d.hatena.ne.jp/secondlife/20060316/1142512987)

	インスパイア。

	    package Catalyst::Plugin::URI::MtimeQuery;
	    
	    sub uri_for {
	        my $c   = shift;
	        my $res = $c->NEXT::uri_for(@_);
	    
	        if ( $res =~ /\.(css|js|swf)$/ ) {
	            my $base = $c->req->base;
	            my ($path) = $res =~ m!^$base/(.*)!;
	    
	            my $file = $c->path_to( 'root', split '/', $path );
	            if ( $file->stat && -f _ && -r _ ) {
	                $res .= '?' . $file->stat->mtime;
	            }
	        }
	    
	        $res;
	    }
	    
	    1;

	Catalyst では CSS や Javascript の読み込みは `[% c.uri_for('/js/prototype.js') %]` などのように記述することが多いのですが、上記プラグインをロードしておくと、css|js|swf の場合は自動で更新時間が付くようになります。試してないけど。

	上のは設定きめうちなんだけどその理由は config の設定キー名思いつかなかったからという。。

	あと、swf は普通にクエリを渡して使うことが多いのでこのままだとあまり使えない。

	* 14:53  [perl] [yaml]:
	`qr/\.(css|js|swf)$/` みたいなのを YAML で書くにはどうしたらいいのだろうとおもって、とりあえず YAML モジュールを使って

	    use YAML;
	    
	    my $data = {
	        regex => qr/\.(css|js|swf)$/,
	    };
	    
	    print Dump( $data );

	こんなのをしてみる。

	結果。

	    ---
	    regex: !perl/regexp:
	      REGEXP: \.(css|js|swf)$

	こんな風に書くのか。これを LoadFile しても

	    $VAR1 = {
	              'regex' => qr/(?-xism:(?:\.(css|js|swf)$))/
	            };

	となるのでちゃんと使えるようだ。

	でも YAML::Syck だと Load Dump ともにうまく動かない。

	* 12:34  [life]:
	出社。

	* 04:24 Gyao用 [gyao] [greasemonkey]:

	    // ==UserScript==
	    // @name         Gyao link fixer
	    // @namespace    http://unknownplace.org/
	    // @description  fix gyao movie links
	    
	    // @include      http://www.gyao.jp/*
	    
	    // ==/UserScript==
	    
	    (function() {
	        var anchors = document.getElementsByTagName('a');
	    
	        for (var i = 0; i < anchors.length; i++) {
	            var anchor = anchors[i];
	            if (anchor.href.match(/javascript:directScreen/)) {
	                var content = anchor.href.match(/cnt\d+/);
	                var rate    = anchor.href.match(/bit\d+/);
	                var user    = document.cookie.match(/Cookie_UserId=(\w+)/)[1];
	    
	                anchor.href
	                    = 'http://www.gyao.jp/sityou/asx.php?contentsId=' + content +
	                    '&userNo=' + user + '&rateId=' + rate;
	            }
	        }
	    })();

	* 03:39  [life]:
	退社。

2006-03-16 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 16:24 盗聴 [life]:
	 * perldoc DB
	 * Devel::SimpleTrace

	* 15:54  [life]:
	もはや apache2 は svn 専用。

	* 15:48 1.4.11 [lighttpd]:
	> \* fixed handling of error codes returned by mod\_dav\_svn behing a mod\_proxy

	ってなってて、やっと mod_proxy で [OPTIONS 通らないの](http://unknownplace.org/memo/2006/01/15#e005 "CLON - 2006/01/15 - あげた")なおったぽい。

	これでやっとフロント lighty にできる！

	* 11:07  [life]:
	出社。

	* 01:46  [life]:
	退社。

2006-03-15 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:46 Authentication::Store::HTTP #2 [perl] [catalyst]:
	0.04 で変なことしないで実装した。ロードする順番もいつでもOK。

	trunk にあるコードは get_user にすべてのパラメータを渡してくれるようになっているのでそもそも昨日からの悩みは無用だったらしい。と、 nothingmuch が教えてくれた。

	* 18:38  [perl] [catalyst]:
	あー、login 上書きしなくても出来るや。

	* 16:51 Authentication::Store::HTTP [perl] [catalyst]:
	作った。

	[昨日の夜書いた問題](http://unknownplace.org/memo/2006/03/15#e001 "CLON - 2006/03/15")により、`$c->login` のオーバーライドという暴挙に出ているため、Credential 系プラグインよりも先にロードする必要がありますｗ

	Cred プラグインを選べるので、::Basic::Remote よりは良くなってはいる。

	* 13:05  [life]:
	出社。

	* 04:42 MOTHER1+2 [life]:
	はじめた。

	名前ペルル。好きな食べ物クパン。

	* 03:58  [web]:
	Gyao でシティハンター。

	なっつかしー。

	* 03:15  [life]:
	退社。

	* 02:40  [catalyst]:
	Catalyst::Plugin::Authentication の get_user は $id しか引数とらないために、Store::Backend の実装は $id からユーザー情報を引ける必要がある。

	でもこんな感じで

	    sub get_user {
	        my ( $self, $id, $password ) = @_;
	    
	        $self->{ua} ||= LWP::UserAgent->new;
	    
	        my $request = HTTP::Request->new( HEAD => $self->{auth_url} );
	        $request->headers->authorization_basic( $id, $password );
	    
	        my $response = $self->{ua}->request( $request );
	    
	        return unless $response->is_success;
	    
	        my $user = {
	            id => $id,
	            password => $password,
	            store => ref $self || $self,
	        };
	    
	        return bless $user, 'Catalyst::Plugin::Authentication::User::Hash';
	    }

	みたいに Authentication::CDBI::Basic::Remote ぽいのを再実装しようとして詰まった。

	こうやってかけるようにならねーかなぁ。

2006-03-14 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:48  [life]:
	出社。

	* 04:13  [life]:
	退社。

2006-03-13 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 19:52 Yahoo! のブログ検索 [web]:
	ここも引っかかるな。Google と同じで自動で RSS みつけてるのか。

	すばらしいなぁ。

	* 19:35  [life] [perl]:
	ingy さんは Changes も YAML か。

	* 19:08 $/ [perl]:
	perldoc perlvar みてたら、$/ とかみっけ。これが undef だとファイルハンドルは slurp モードになるらしい。

	    my $stdin = join '', <STDIN>;

	を

	    my $stdin;
	    {
	        local $/;
	        $stdin = <STDIN>;
	    }

	ほー

	* 15:05 YAML Support of Module::Build [life] [perl]:
	YAMLとの相性が悪い問題。最近は大丈夫になったかと思いきや、いまのModule::BuildはインストールするとYAML.pmのバージョンをチェックして新しすぎると

	    Feature 'YAML_support' disabled because of the following prerequisite failures:
	     * Version 0.58 of YAML is installed, but we need version < 0.49

	とかいわれるようだ。このままだと META.yml をうまく作成してもらえない。

	0.58 つかってても Module::Build::ConfigData を `'YAML_support' => 1` とかって書き換えれば動くように見えるんだけど。何でこんなことになっているのか。

	C::P::EmailJapanese をアップデートしたら META.yml がおかしなことになってて気づいたよ。。

	* 14:25 Live timing [life] [f1]:
	テレビ用パソコがお亡くなりになってF1は見えそうになかったので、昨日は公式ページの Live timing をずっと見てたｗ

	普段なら映像なしだとつまんなくなって他ごとしちゃうんだけど昨日のレースはやばすぎる。なんかずっと見てたよ。

	シューというかフェラーリが復活。アロンソより速かった印象。でもピット作戦で負けた。

	ホンダも上位チームと戦える位のレベルにはきたのかな。バリチェロが遅かったのはなんなの？

	ピット出ると常に誰かのすぐ後ろに出るバトン運悪すぎ。あとすぐ前に出られたり。モントーヤ、キミ関係で3度ほどあった気がする。

	キミはすごすぎる。なんだありゃｗ

	タイムが肉薄まくってておもろかったなぁ。あとウィリアムズのルーキー速かった。ファステスト？

	正直 Live timing ないと F1 テレビ見てても面白さが半減する。全員のラップタイムが常に(しかもセクションごとのタイムも)見えてて、状況が一発でわかる。

	Live timing を録画しておいてF1放送時に再生しつつ見たいｗ

	フジが生中継すれば問題ないんだけど。

	* 10:24  [life]:
	出社。

2006-03-12 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 17:51  [web]:
	zooomr 試してみたけど今は重すぎてだめだ。

	* 05:46  [life] [f1]:
	今年のF1おもろそう。

	上位4チームの戦力が拮抗してるげ。

	しかしさっき予選見ようとしたらTVパソコが起動しなくなってた。ノオオオ。

	* 05:37  [life]:
	Mozilla の人たちは、Windows にログインとかいってねーのかなー。

	ログインじゃないよログオンだよ！！ いやいやだから一般的にいえばそれはログインでしょ。

	* 05:30 窓の杜問題 [life]:
	バカジャネーノ問題。

	Firefox ではエクステンションというけれども、一般的にプラグインつったらそのアプリケーションの機能を拡張するものとして認知されてる。

	でも Firefox ではエクステンションていうんだ！ いやいやだから一般的にいえばそれはプラグインでしょ。

	不毛すぎて笑える。

2006-03-11 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 00:36  [life]:
	退社。

2006-03-10 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:14 花粉 [life]:
	おかげさまで（今日雨ってのもあるかもですが）ほとんどよくなりました。イエイ。

	杉の人はこれからが本番だと思いますが、がんばってください＾＾

	それにしても今週の仕事の出来なさっぷりはほんとすごかったな。。

	* 17:56  [life]:
	見てもらえばわかるけどってなんだよ、自分用のメモなんじゃないのかと小一時間。

	* 17:44 clmemo + Markdown [clmemo] [clon]:
	いややっぱ Markdown と clmemo は相性いいよ。

	ここで使っている素の [clmemo.txt](http://unknownplace.org/pub/clmemo.txt) を見てもらえばわかると思うけど、テキストとしても普通に読めちゃう。

	あとこういうテキストパーサー系のものって全部そのルールにのっとって書かなきゃいけないものばかりだけど、Markdown だと普通に html を書くことも出来る。

	たとえば Flickr とかの画像貼ろうと思ったとき Flickr が出してくれる img タグをそのまま貼り付けられたりとか。

	<a href="http://www.flickr.com/photos/typester/72680516/" title="Photo Sharing"><img src="http://static.flickr.com/35/72680516_487271b400_t.jpg" width="71" height="100" alt="JIZO with muffler" /></a>

	こんな感じで。

	* 11:54  [dbic]:
	`insert_or_update` が `update_or_insert` になった。

	この関数、`find_or_create` と一緒に使うことが多くて、その関係か `update_or_insert` ってよく間違えてエラーってたからうれしい。

	    *insert_or_update = \&update_or_insert;

	とかしてあって、一応まえのも使える。

	* 11:43  [life]:
	出社。

2006-03-09 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:54  [life]:
	退社。

	* 23:36 F1 2006 [life] [f1]:
	いやー今年もいよいよ始まりますね。

	個人的にはあぐりチームよりも HONDA + バトンに注目。

	* 21:36 Catalyst::Plugin::Unicode [perl] [catalyst]:
	とかあったんだ！ ほとんど同じやつ作ってた。

	入れ替えた。

	> [HTML::FillInForm::ForceUTF8 : blog.nomadscafe.jp](http://blog.nomadscafe.jp/archives/000630.html)
	>
	> ただ、Catalyst::Plugin::UnicodeやDBIx::Class::UTF8Columns、Class::DBI::utf8などを使っている場合、必要ないかも。

	必要ないんですが、プラグインのロード順に気をつける必要があります。

	というのも Unicode も FillInForm もどちらも finalize をオーバーライドしているので、Unicode のほうがあとに実行されるように

	    use Catalyst qw/FillInForm Unicode/;

	と FillInForm よりも後ろに書いておく必要があります。

	BKだなぁ。

	kazeburo さんのやつをつかえばこれに気をつける必要もなくなるのでいいかも。

	* 18:49  [life]:
	> [これがインテルの「Ultra Mobile PC」だ - CNET Japan](http://japan.cnet.com/video/story/0,2000055094,20098053,00.htm)

	むっちゃほしい！！

	* 17:06  [life]:
	出社。

	* 00:48  [life]:
	退社。というか家ついた。

2006-03-08 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 19:00 花粉症 [life]:
	峠越えた。

	今日ずっと寝てたよ。。

	* 10:22 [life] [dbic]:
	`$c->forward( $c->view('YAML') );` したとき日本語が数値参照になるなぁ、とかおもったら DBIC::UTF8Columns で get_columns オーバーライドしてなかった。

	するようにした。

	* 02:31 マイ花粉症 [life]:
	いつも人とピークが違うんだよな。

	他の人より早くかかって早く治る。あと期間が1ヶ月も2ヶ月もかからない。1週間くらいでなおる(ひどいのは)。

	今日明日あたりがピークかなーという感じ。

	うー、しぬー。

	* 02:07 海外オフィス [life]:
	今やればいいのに。

	花粉症がない国へ行きたい＞＜

2006-03-07 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:53  [life]:
	出社。

	* 00:38  [life]:
	退社。

	* 00:29 ForceUTF8 [perl] [catalyst]:
	lyokato さんの View::TT::ForceUTF8 とか UTF8Columns とかいろいろ使って、今のプロジェクトを UTF8 化中。

	さっき Catalyst::Plugin::Email::Japanese の ForceUTF8 対応版をうぷしといた。

	なんかそれぞればらばらに設定しててめんどいなーこれ。

	あと `$c->req->parameters` などを ForceUTF8 する奴も作ってつかっているのだけど、激しく適当で間に合わせもいいところ。これはもう少し仕様考えてから誰も作ってなかったらリリースする。

	* 00:26  [life]:
	花粉症きてるーーーー。夕方くらいからひどい

2006-03-06 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 16:05  [plagger] [screen]:
	だめだ、すげー重い。

	    backtick id lifespan autorefresh command

	で autorefresh に 0 以外を指定するとその秒数毎に command が実行されるのだけど、実行されてる間 screen が固まるｗ

	plagger でやるなら Notify::Pipe or Notify::File とかでなんかファイルに書き出しておいて

	    backtick id 0 0 tail -f そのファイル

	かなー。

	* 15:45 plagger で backtick [plagger] [screen]:
	plagger のみで backtick れるじゃんと、miyagawaさんにつっこまれたのでやってみた。

	まず Plugin::Notify::Stdout を書いた。

	    package Plagger::Plugin::Notify::Stdout;
	    use strict;
	    use warnings;
	    use base qw/Plagger::Plugin/;
	    
	    sub register {
	        my ( $self, $c ) = @_;
	        $c->register_hook(
	            $self,
	            'publish.feed'     => \&update,
	            'publish.finalize' => \&finalize,
	        );
	        $self->{count} = 0;
	    }
	    
	    sub update {
	        my ( $self, $c, $args ) = @_;
	    
	        $self->{count} += $args->{feed}->count if $args->{feed}->count;
	    }
	    
	    sub finalize {
	        my ( $self, $c, $args ) = @_;
	    
	        if (defined $self->{count}) {
	            $self->conf->{format}
	                ? printf $self->conf->{format}, $self->{count}
	                : print $self->{count};
	            print "\n";
	        }
	    }

	ので下記のように backtick.yaml を作る

	    global:
	      timezone: Asia/Tokyo
	      log:
	        level: error
	    
	    plugins:
	      - module: Subscription::Config
	        config:
	          feed: "https://username:password@mail.google.com/mail/feed/atom/!!Plagger" # !!Plagger はラベル名
	    
	      - module: Plagger::Plugin::Aggregator::Simple
	    
	      - module: Notify::Stdout
	        config:
	          format: "Plagger(%d) "

	で、あとは .screenrc で

	    backtick 3 0 60 ${HOME}/plagger/plagger -c ${HOME}/.plagger/config/backtick.yaml

	とか書いておけば 60 秒ごとに plagger が実行され、hardstatus とか caption とかで %3` とかけばそこにに plagger の出力が出る。

	3 ていうのは backtick で指定した最初の数字 (僕がすでに0 1 2とIDを使ってるので3ってこと)

	* 15:04 Gmail の Atom フィードは https + basic 認証 [plagger] [screen]:
	と教えてもらった。！！！

	さっき書いたの超意味ない。

	    #!/usr/bin/perl
	    
	    use strict;
	    use warnings;
	    use Carp;
	    use LWP::UserAgent;
	    use MIME::Base64;
	    
	    our $VERSION = '0.02';
	    
	    # ---- Configurations ----------------
	    my $username = 'username';
	    my $password = 'base64::cGFzc3dvcmQ=';
	    my $label    = '!!Plagger';
	    
	    my $interval = 60;
	    # ------------------------------------
	    
	    if ( my ($crypt, $pass) = $password =~ /^(\w+)::(.+)$/ ) {
	        $password = $crypt eq 'base64' ? decode_base64($pass) : undef;
	    
	        croak qq/Invalid password crypt type, "$crypt"/ unless $password;
	    }
	    
	    my $ua = LWP::UserAgent->new;
	    
	    my $feed_request =
	        HTTP::Request->new( GET => "https://mail.google.com/mail/feed/atom/$label" );
	    $feed_request->headers->authorization_basic( $username, $password );
	    
	    $|=1;
	    while (1) {
	        my $res = $ua->request( $feed_request );
	    
	        my ($unread) = $res->content =~ m!<fullcount>(\d+)</fullcount>!m;
	        print "Plagger($unread) \n" if defined $unread;
	    
	        sleep $interval;
	    }

	これでOKだ。

	* 14:08 plagger_backtick.pl [plagger] [screen]:
	つくた。

	<img src="http://static.flickr.com/52/108556653_e3953f4d88_o.png" width="283" height="42" alt="plagger backtick" />

	こんな感じ。

	    #!/usr/bin/perl
	    
	    use strict;
	    use warnings;
	    use Carp;
	    use WWW::Mechanize;
	    use HTTP::Cookies;
	    use MIME::Base64;
	    
	    our $VERSION = '0.01';
	    
	    # ---- Configurations ----------------
	    my $username = 'username';
	    my $password = 'base64::cGFzc3dvcmQ=';
	    my $label    = '!!Plagger';
	    
	    my $interval = 60;
	    # ------------------------------------
	    
	    if ( my ($crypt, $pass) = $password =~ /^(\w+)::(.+)$/ ) {
	        $password = $crypt eq 'base64' ? decode_base64($pass) : undef;
	    
	        croak qq/Invalid password crypt type, "$crypt"/ unless $password;
	    }
	    
	    my $mech = WWW::Mechanize->new( cookie_jar => HTTP::Cookies->new, );
	    $mech->agent_alias('Windows IE 6');
	    
	    $|=1;
	    while (1) {
	        $mech->get('http://mail.google.com/');
	        if ( $mech->content =~ /ServiceLoginAuth/ ) {
	            $mech->submit_form(
	                fields => {
	                    Email  => $username,
	                    Passwd => $password,
	                }
	            );
	    
	            my ($redirect_url) = $mech->content =~ /url=(.*?)"/;
	            $mech->get($redirect_url);
	        }
	        $mech->get("http://mail.google.com/mail/feed/atom/$label");
	    
	        my ($unread) = $mech->content =~ m!<fullcount>(\d+)</fullcount>!m;
	        print "Plagger($unread) \n" if defined $unread;
	    
	        sleep $interval;
	    }

	これ作ってて見つけたんだけど、Gmail の Atom フィードって URL に Label 名つけるとそれで絞り込めるのね。便利！！

	* 11:32 Gmail で読むということ [life] [plagger]:
	plagger つかって Gmail でフィードを読んでると、Bloglines 使ってたときより圧倒的に速く読み終わる。

	けど、Bloglines のが読みやすい。この謎さ。

	* 09:54  [life]:
	出社。

	* 03:45  [life]:
	うおー、なんか[筒井康隆の番組](http://www.gyao.jp/drama/souri/)がGyaoに。

	筒井ファン必見ですなー。なんか放送期限切れてるのも見れるな。。

	* 03:09  [life]:
	退社。

	* 00:43 livedoor FeedFetcher [life]:
	って何だろう、同時に 20 回くらい同じフィードに対してリクエストくるんだけど。

2006-03-05 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 21:25 ユーコンブレンド 100g [life] [starbucks]:
	豆を袋に入れてもらう待ち時間に本日のコーヒーを小さいカップにいれてもらえることが多い。

	「よろしければお試しください」 みたいな感じで。

	今日は店員がそのコーヒーを持ってきつつ、それを僕に渡す前にレジの会計をしたためか、

	「よろしければ、500円とレシートのお返しです」

	とか意味のわからないことを言ってきて面白かった。

	* 15:41  [life]:
	[id:secondlife](http://d.hatena.ne.jp/secondlife/) さんにそっくりな人が女づれで人力車のお兄さんにつかまっていた。

	顔を確認するために振り返ったら「ニコニコガイド」とか意味のわからないことを口走っていた。

2006-03-04 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 06:59  [life]:
	ねむ。のんできたっす。

	会社の鍵わすれてどうなることかとおもったけど、まだ会社に人がいた罠。

	退社。

2006-03-03 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:11 DBIC::UTF8Columns [perl] [dbic]:
	昨日のやつ、[bast](http://dev.catalyst.perl.org/repos/bast/) のほうにコミット。次のDBICのリリースに含まれちゃうよ＞＜

	使い方はテーブルクラスで

	    __PACKAGE__->load_components(qw/UTF8Columns Core/);

	とかしてロードしておき、

	    __PACKAGE__->utf8_columns(qw/name description/);

	と文字列カラムを指定。

	こうすると `$table->name` や `$table->get_column('name')` でとってくる値は utf-8 フラグが自動的にたつ。

	逆に `$table->name( $name );` とかでは utf-8 フラグが落とされてから保存される。

	utf8_columns で自分で指定するだけじゃなく、テーブル単位で文字列カラムにすべてに対して有効になる機能もあるといいかも？

	* 13:47 聖剣DS [game]:
	んー、あんまおもろくないきがす。

2006-03-02 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 18:54 DBIC::UTF8Columns [perl] [dbic]:
	[書いた](http://svn.unknownplace.org/public/library/perl/trunk/DBIx-Class-UTF8Columns/lib/DBIx/Class/UTF8Columns.pm "DBIx::Class::UTF8Columns")。

	Template::Stash::ForceUTF8 インスパイア。

	* 15:30 なんちゃってREST [web]:
	Flash から使うことを考えるとしょうがねーんじゃねーかなー。

	たとえば

	    DELETE /rest/entry/[ id ] HTTP/1.0

	で、なにかエントリーを消せる API を実装していたとしても、

	    GET /rest/entry/delete/[ id ] HTTP/1.0

	などを代替として置いておくとかさ。

	REST 的にはキモイんだろうけど、そんなんなー。

	* 09:44  [life]:
	出社。

	* 02:08  [life]:
	と思わせてまだ会社。

	* 00:52  [life]:
	退社。

2006-03-01 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:27  [life]:
	お、packages.debian.org 復活してるー。ナイス。

	* 11:38  [life]:
	出社。

	* 03:54  [life]:
	退社。

	* 00:50 CPANPLUS [perl]:
	> [Hatena::Diary::Neko::kak 500 Internal Server Error - Plaggerはいらない！](http://d.hatena.ne.jp/nekokak/20060228/1141138614)
	>
	> CPANPLUS.pmで入れようとしたら設定がまずいのか
	>
	> タイムアウトしたりなんだかんだで入らない！！

	これ多分設定悪いんじゃねーかなぁ。一番最初に試したときになんかそうなってぜんぜんうまくうごかねーCPANPLUSうんこ！とかなった記憶。

	とりあえず最近新しいPCにCPANPLUS入れたのでそのときの作業を思い出しつつ書いておいて見る。

	1. `$ sudo cpan`
	2. `cpan> install Bundle::CPANPLUS`
	3. ここではてけとうに設定
	4. cpan シェル終了
	5. `$ chown -R typester:typester ~/.cpanplus`
	6. `$ export PERL5_CPANPLUS_CONFIG=$HOME/.cpanplus/config` とrcスクリプトにそれ追加
	7. `$ cpanp`
	8. `CPAN Terminal> s reconfigure` で再設定。ここでちゃんと設定する

	設定時の注意は設定ファイルを `~/.cpanplus/config` になるようにするのとインストール時に sudo を使うようにするくらい。

	あと Storeble を有効にすると環境によってはすげー遅くなる場合があるかもしれないのでその場合は切る。

2006-02-28 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 18:06 Plagger::Plugin::Store::DBIC #2 [plagger]:
	DB Schema 外部におく必要ねーよなー、よく考えたらｗ

	DBIx::Class::Schema のメリットは Plugin::Store::DBIC::Schema::SQLite とかで作って、それを外部から普通に使えるっていうことで、反対だよ。

	* 12:37  [life] [plagger]:
	どこにおこうか迷って、svk のローカルreposのみで作業していた plaggerer(何 をとりあえず僕のpublic reposにマージ。

	Plagger::Plugin::Store::DBIC から使っている Schema を公開したかったので。

	svk はこういうのが簡単に出来るから素敵ですねー。

	昨日書いた Plugin::Store::DBIC の schema_class で指定しているクラスが[これ](http://svn.unknownplace.org/public/plaggerer/trunk/lib/Plaggerer/Schema.pm "Plaggerer::Schema")で、その階層以下にテーブル定義があります。

	sql は[こんな感じ](http://svn.unknownplace.org/public/plaggerer/trunk/sql/plaggerer.sqlite.sql "plaggerer.sqlite.sql")。

	* 11:07  [life]:
	出社。

2006-02-27 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:35 Plagger::Plugin::Store::DBIC [perl] [plagger]:
	作ってみたけどびみょーー。Schema をこっちの指定通りに作ってないとだめなんだよな。せっかく外部におけるのに。

	    package Plagger::Plugin::Store::DBIC;
	    use strict;
	    use warnings;
	    use base qw/Plagger::Plugin Class::Accessor::Fast/;
	    
	    use UNIVERSAL::require;
	    
	    our $VERSION = '0.01';
	    
	    __PACKAGE__->mk_accessors(qw/schema/);
	    
	    sub register {
	        my ( $self, $c ) = @_;
	    
	        unless ( $self->conf->{schema_class} and $self->conf->{connect_info} ) {
	            $c->error('schema_class and connect_info are required');
	        }
	    
	        $self->conf->{schema_class}->require
	            or $c->error(
	            qq/Can't load schema class "@{[ $self->conf->{schema_class} ]}", $!/);
	    
	        $self->schema( $self->conf->{schema_class}
	                ->connect( @{ $self->conf->{connect_info} } ) );
	    
	        $c->register_hook( $self, 'publish.feed' => \&store, );
	    }
	    
	    sub store {
	        my ( $self, $c, $args ) = @_;
	    
	        # feed
	        my $feed = $self->schema->resultset('Feed')
	            ->find_or_new(
	            { link => $args->{feed}->link, type => $args->{feed}->type } );
	    
	        $feed->$_( $args->{feed}->$_ )
	            for (qw/url image description language author updated/);
	    
	        $feed->insert_or_update;
	    
	        # feed meta
	        $feed->meta->delete_all;
	        for my $k ( keys %{ $args->{feed}->meta } ) {
	            $feed->add_to_meta( { key => $k, value => $args->{feed}->meta->{$k}, } );
	        }
	    
	        # entry
	        for my $feed_entry ( @{ $args->{feed}->entries } ) {
	            my $entry = $self->schema->resultset('Entry')->find_or_new(
	                {   feed => $feed->id,
	                    link => $feed_entry->link,
	                }
	            );
	            $entry->$_( $feed_entry->$_ )
	                for qw/title author date summary body rate icon/;
	            $entry->insert_or_update;
	    
	            # meta
	            $entry->meta->delete_all;
	            for my $k ( keys %{ $feed_entry->meta } ) {
	                $entry->add_to_meta( { key => $k, value => $feed_entry->meta->{$k}, } );
	            }
	    
	            # tag
	            $entry->tag_mappings->delete_all;
	            for my $entry_tag ( @{ $feed_entry->tags } ) {
	                my $tag = $self->schema->resultset('Tag')
	                    ->find_or_create( { name => $entry_tag } );
	                $entry->add_to_tag_mappings(
	                    { entry => $entry->id, tag => $tag->id } );
	            }
	        }
	    }
	
	    1;

	config.yaml は

	     - module: Store::DBIC
	       config:
	         schema_class: 'Plaggerer::Schema'
	         connect_info: [ 'dbi:SQLite:/home/murase/plaggerer/db/plaggerer.db' ]

	Schema ファイルを置く場所もまた問題。

	この場合はPlugin指定のSchemaしか扱えないから普通にこのプラグイン以下に置けばいいのかも知れんけどなぁ。

	* 15:36  [life]:
	svk 重過ぎる！

	800個くらいファイルある上の階層だとすべてのコマンドが重い。やっとごろうさんの気持ち理解。

	svk st だけでもすげー待たされてまじつかいものにならねー。

	* 04:18 どろんさんが [life]:
	[perl 書いてる](http://d.hatena.ne.jp/drawnboy/20060227/1140976109 "Nowhere Near - Plagger")！！

	そいえば僕も perl を始めたのは blosxom 弄りからだなぁ。

	似てるね！！

	* 00:47 OSX [life]:
	で、マウス操作とかをマクロみたいな感じで自動化したいんだけど、どうすりゃいいんだろうー。

2006-02-26 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 21:48 やりたかったことリスト [plagger]:

	 * Plugin::Store::DBIC
	 * Plugin::Publish::SVN
	 * plagger_backtick.pl

	1個目は Publish のほうがいいんかな、よくわからん。けどとりあえず DBIC で保存する。独自ビューワ作りたい時用。

	2個目はそのまま。permalink 別になんか個別ファイル名作ってそれをコミット。更新されたフィードの diff が取れるようになるというメリット。古いエントリーが新着であがってきたとき何が更新されたんだYO! ってのがあるので欲しい。

	3個目はあれです、screen のやつです。

	* 21:02  [life]:
	今週末こそ plagger 弄りたい＞＜

	* 20:29  [life]:
	出社。

2006-02-25 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 03:29  [life]:
	退社。

	* 00:33  [life]:
	今週末こそ plagger 弄りたい。

	* 00:30  [idea]:
	携帯自身が bluetooth ヘッドセットとして機能すればいいのに。

	Skype の着信も携帯で出られる、みたいな、ね。

2006-02-24 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:07  [life] [clon]:
	ここのコメント認証に TypeKey を追加して、んでユーザー名の横にそれぞれの favicon 出して区別とかカッチョ良いかなとおもったんだけど、TypeKey だと buddyicon がなー。

	* 22:03  [life]:
	[あれ](http://unknownplace.org/memo/2006/02/22#e003 "CLON - 2006/02/22 http://unknownplace.org/memo/2006/02/22#e003")、再送した。ガクガク、二の舞になりませんように。

	* 21:53  コモドドラゴンブレンド 100g [life] [starbucks]:
	コーヒーパスポートとかいうのもろた。

	* 10:38  [life]:
	出社。

	* 00:28  [life]:
	退社。

	花粉症やベーよ、もー。

2006-02-23 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:27  [lighttpd]:
	> [Link: CLON - 2006/02/23 - backend fastcgi プロセスが落ちている場合の挙動 | Typemiss.net](http://www.typemiss.net/blog/kounoike/20060223-72)
	>
	> lighttpd-1.4.10ではsocket, host:portともに500 Internal Server Errorで返ってきています。lighttpd-1.4.9のNEWSで「fixed endless loops in mod_fastcgi if backend is dead」とあるので1.4.9での変更ではないでしょうか。

	1.4.8 でした、テスト環境。あざっす。

	* 17:40 なんか [life] [web]:
	Bloglines のフォルダアイコンが変わった。

	っていうかフォルダアイコンなかったんだっけ？あれ。。

	* 15:39 backend fastcgi プロセスが落ちている場合の挙動 [lighttpd]:
	fastcgi プロセスをスタンドアローンで動かしていて、Webサーバーからそれを使うという場合、apache であれば fastcgi プロセスが落ちていたら 502 Bad Gateway が出るらしいのだけど、lighty だとでないみたい。

	lighty から fastcgi へつなぐ方法 2 種類試した。

	1. socket ファイルで fastcgi へ
	2. host:port で

	1 の場合、対象 socket ファイルが有効になるまで待ち続ける(!)

	fastcgi プロセス再起なんかなどでは起動したらそのまま実行されるため便利かもしれないけど、downtime が長いとクライアントを溜め込んでしまうことになりそう。

	2 の場合、指定ポートへの接続が reject されると lighty もクライアントの接続を切る。えー。ここで 502 とか返せばいいのに。

	どっちにしろあんまり行儀が良くなくて使いにくいという感じ。1 よりは 2 のほうがいいかな。

	* 10:44  [life]:
	出社。

	* 02:18  [life]:
	退社。

2006-02-22 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 14:37 fb2k 0.9 [software] [foobar2000]:
	Release Condidate になってるー。もうあれだけど。

	* 13:58 MySQL の DATETIME 型 [perl] [dbic]:
	って、タイムゾーン情報ないから、deflate するとき set\_time\_zone してタイムゾーンそろえたほうがいいと思った。

	あと、inflate 時も floating timezone で帰ってくるから、保存時のタイムゾーンをセットしてあげたほうが良い。

	    inflate => sub {
	        DateTime::Format::MySQL->parse_datetime(shift)
	            ->set_time_zone('local');
	    },
	    deflate => sub {
	        DateTime::Format::MySQL->format_datetime(
	            shift->set_time_zone('local') );
	    },

	と思うんだけどどーなんだろ。

	決めうちでしかつかわないならいいんかな。

	* 10:45  [life]:
	DBICのlistに投稿したメールが配信されてこねー

	nekokak現象。

	* 10:36  [life]:
	出社。

	* 01:50  [life]:
	退社。

2006-02-21 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:27  [life]:
	出社。

	* 02:44  [life]:
	退社。

	* 01:39  [life]:
	ふとサイト見たら [lame](http://lame.sourceforge.net/) のロゴが！

	いつの話だよ、という感じぽい。

2006-02-20 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 15:00  [life]:
	アプリだけ再起動したいこと多いし、全部 ProcManager 使ったほうがいいかも知らんね。

	* 14:30 lighttpd+fastcgi時のメモリ共有 [perl] [lighttpd] [fastcgi]:
	このサーバーで動いてるアプリはほとんど lighty+fastcgi で動いているけど、アクセス数的に余裕まくりなのですべて1プロセスで動かしていていままで意識していなかったのだけど、仕事で使うことになったので調べてみた。

	まず、Catalyst 製アプリケーション MyApp をlighttpd.conf で以下のように設定。

	    fastcgi.server = (
	        "" => (
	            "myapp" => (
	                "socket" => "/tmp/myapp.socket",
	                "check-local" => "disable",
	                "bin-path" => "/path/to/script/myapp_fastcgi.pl",
	                "max-procs" => 5,
	            ),
	        ),
	    )

	これは割りと一般的な方法。これでMyAppプロセスが5つ立ち上がる。うちもこんなようなのの max-procs を 1 にしたのを使っている。

	でも lighttpd.conf で bin-path を指定すると lighty がプロセスを5つ立ち上げてる感じになり、メモリは共有されてないっぽい。pstree はこんな感じ。

	    |-lighttpd---5*[myapp_fastcgi.pl]

	なんかテストしてるPCだとCatalystアプリを立ち上げるときにFile::Slurpのwarningがでまくりなんだけど、上記設定でlighttpd立ち上げるとプロセス数分warningが出ることからもuseまくってんだなぁということがわかる（適当だなオイ

	これじゃー微妙なので、もう一つの方法を試す。

	Catalyst の fastcgi.pl は FCGI::ProcManager での動作もサポートしていて、

	    ./script/myapp_fastcgi.pl -l /tmp/myapp.socket -n 5

	とすれば MyApp が FCGI::ProcManager 経由で fastcgi プロセスが 5 つ立ち上がる。これだと

	    |-myapp_fastcgi.pl---5*[myapp_fastcgi.pl]

	こんな感じで賢い風味。File::Slurp の warning も1回しか出ない！（そこで判断かよ

	これを lighty から使うにはさっきの設定から bin-path をはずせば OK。

	    fastcgi.server = (
	        "" => (
	            "myapp" => (
	                "socket" => "/tmp/myapp.socket",
	                "check-local" => "disable",
	            ),
	        ),
	    )

	こんなんで。

	で、結論としては複数プロセス立ち上げるときは FCGI::ProcManager 使わないと損ということですかね。

	時間があるときに追試はしてみたい。

	* 13:37  [life]:
	いつのまにか Debian testing の mysql-server が 5.0 系になっとう。

	MySQL は virtual package でいれないほうがいいんだなぁとかいまさら思った。

	* 12:04 会議でもっと脳のトレーニング [life]:
	会議とかブレストとかって、頭活性化するなぁ。

	なんでだろうー。話してる何かがトリガーになってるとは思うのだけど、議題と全然関係ないこと閃くからメモが欠かせないという。

	* 09:52  [life]:
	出社。

2006-02-18 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 20:23  [life]:
	12時間以上寝た。。

	* 04:46  [life]:
	日本語かどうかもわからないくらいの日本語力で日本語のページを開いて意味を理解しようとするってのすげーなぁ。

	* 03:38  [life]:
	退社。

2006-02-17 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:53 はてなのインタフェース [web] [hatena]:
	とりあえずログインすると問答無用でトップに飛ばされるのやめてほしい。手抜きとしか思えないのだけど。

	* 16:11 ユーコンブレンド 100g  [life] [starbucks]:
	なんかコーヒーのパッケージが一新してて、全部真っ白いのになってた。

	<a href="http://www.flickr.com/photos/typester/100709060/" title="Photo Sharing"><img src="http://static.flickr.com/35/100709060_1fb06a462c_m.jpg" width="240" height="180" alt="new coffee package" /></a>

	* 11:52  [life]:
	出社。

	* 02:01  [life]:
	とくひろむのポッドキャストが結構おもろい件。

	つか、声あんなに渋かったですっけ。

	* 01:21  [life]:
	退社。

2006-02-16 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 09:24  [life]:
	出社。

	* 00:22  [life]:
	退社。ねむい

2006-02-15 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:29 奴2006 [life]:
	ちょっと奥さん、鼻水でまくりなんですけど、奴がもう来ましたか？

	エエエエェェ。

	* 11:05  [life]:
	出社。

	* 05:50  [life]:
	退社。

	* 05:11 今日のBK [catalyst]:
	Catalyst 組み込みのテストサーバーは `-k` オプションをつけて keepalive を有効にしないと IE でリダイレクトがうまく動かないことがある。

	* 01:27 会議スペース [life]:
	で仕事するとはかどるなぁ。

	もう自分の席は家化してるからだめかもしれんね。

2006-02-14 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 20:16  [catalyst]:
	> [hide-k.net#blog: Catalyst::Model::DBIC::Schemaを使ってみた](http://blog.hide-k.net/archives/2006/02/catalystmodeldb_1.php)
	>
	> と、とっても便利なC::M::DBIC::Schemaなんですが、既存のプラグインとあまり相性がよくありません。
	> 特にC::P::Authentication::Store::DBICは全く動かなくなるので注意です。(今、パッチが作られているみたいです。)

	今作ってるアプリではめちゃくちゃとりあえずの対応としてトップレベルの auto アクションで

	    sub auto : Private {
	        my ( $self, $c ) = @_;
	    
	        # dirty hack for Auth::DBIC and Model::DBIC::Schema
	        $c->config->{authentication}->{dbic}->{user_class} = $c->model('Schema::User');
	    
	        1;
	    }

	などとしてたりとか。

	はやく対応してくんないかな。

	* 14:42  [life]:
	びっくりまんチョコもらった。

	* 11:05  [life]:
	出社。

	* 03:22  [life]:
	退社。

	* 03:20 盗聴 [life] [perl]: 
	> Term::ReadPasswordてのもある

2006-02-13 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:13  [life]:
	隣の人のtypoはよく見つけられる法則。

	* 20:05 盗聴 [life] [perl]:
	> `Term::ReadKey`
	>
	> password とか入力するときに Linux のコマンドラインっぽく画面の出力を隠して入力文字列をとりたいときにいいモジュール

	* 05:22 mmm-mode 悪戦苦闘 [emacs]:
	みやーんととくひろむが教えてくれた mmm-mode をためしてるのだけど、html-mode 内で ecmascript-mode 使おうとするとエラーる。

	mmm-mode-on して C-c % C-r してリージョンを ecmascript-mode にしてからその中で Tab かなんかで整形させようとすると

	    c-looking-at-decl-block: Wrong type argument: stringp, nil

	こんなのでる。

	うう、cc-mode の何かとの関係？ 全然わからん。

	ちなみに同じく html-mode 内で css-mode ならちゃんと動く。

	CSS とかまったくインラインでかかねっつの！！ もう眠いので今度にしよう。

2006-02-12 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 23:30 ヴィエニーズブレンド 100g [life] [starbucks]:

	* 23:01  [life]:
	出社。

	なんか手裏剣とかお菓子とかコロッケとかもらった。誕生日だ。

	* 18:25  [music]:
	uinona と 小松未歩 の区別が付きません。

	* 17:46 refactored [perl] [dbic]:

	    sub fuzzyfind {
	        my ( $self, $id ) = @_;
	
	        $id and $id =~ /\D/
	            ? ( $self->find( { uuid => $id } ), 1 )
	            : $self->find($id);
	    }

	こうか。

	* 16:27 fuzzyfind [perl] [dbic]:

	    sub fuzzyfind {
	        my ( $self, $id ) = @_;
	    
	        my ( $exist, $uuid );
	        $exist = $self->find( { uuid => $id } ) and $uuid++
	            if $id and $id =~ /\w/;
	    
	        defined $exist ? ( $exist, $uuid ) : $self->find($id);
	    }

	namingsence by 2ndlife.

	 \* 16:46 コード修正

2006-02-11 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 23:01  [life]:
	今日起きて会社の iTunes につなごうとしたら

	<img src="http://static.flickr.com/25/98240606_367d5ee110_o.png" width="444" height="124" alt="iTunes notice" />

	とかいわれて音楽なし生活。。

	今ためしたらつなげるようになってた。

	退社する前に iTunes 再起動するようにすればいいんかなぁ。

	* 06:33  [life]:
	退社。

	* 04:44 https+svk [life]:
	相性悪いきがする。svk内でブランチ切ってsmergeしようとしたら(svnで大量にファイルがaddされる感じになる)

	    RA layer request failed: PUT of '/svn/...' ...

	とかってなんかSSL関係のエラー。ブランチ切って帰ろうと思ったのに＞＜＞＜

	よくわからないのでsshでトンネルほってhttpでsmergeしといた。

	* 00:28 $age++ [life]:
	いよいよ四捨五入すると30に＞＜

2006-02-10 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:31 Plugin::FillInForm [perl] [catalyst]:
	の finalize

	    sub finalize {
	        my $c = shift;
	        if ( $c->isa('Catalyst::Plugin::FormValidator') ) {
	            $c->fillform
	              if $c->form->has_missing
	              || $c->form->has_invalid
	              || $c->stash->{error};
	        }
	        return $c->NEXT::finalize(@_);
	    }

	`$c->stash->{error}` があると問答無用で fillform る。あー何この余計なお世話機能。

	小一時間はまったよ。。

	* 06:33  [life]:
	久しぶりに徹夜る、というか会社に泊まる。今から寝る。

	timeline ものすごい勢いでオレ色に埋まったZE!!

	* 01:44  [life]:
	なんかメール流れすぎで全然読めてない。

2006-02-09 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:20 $c->form の名前がだめ [perl] [catalyst]:
	ごろうさんが CGI.pm の param の扱いがいけてねーとかいってて、オレは validator がほしいよ、とかいってたんだけど、よく考えたら普通に validator つかえるじゃんか。

	なんかページング処理とかで `$c->req->params->{page}` を自前でごにょっと処理してて嫌な感じだったんだけど

	    $c->form( page => [ ['GREATER_THAN', 1] ] );

	とかしとけば `$c->form->valid('page')` で綺麗な値がとれると。

	多分、めちゃくちゃ常識だと思われますが、僕は form という名前にだまされたのかこういう用途につかうということをまったく思いつかなかった。

	`$c->validator` とかにすればいいのに！！

	* 21:55 NDSの [life]:
	GBAスロット、使わないからここにDSのカートリッジうまいこと収納できるといいと思った。

	* 17:54 Debian での trac webadmin メモ  [debian] [trac]:
	etch での話ですよ。

	    $ sudo aptitude install python-setuptools

	で python のパッケージインストーラが入るが、コマンド名がDebian独自のものになってるため注意が必要。

	んで、webadminのページより.eggファイルをダウンロードし、

	    $ sudo easy_install TracWebAdmin-0.1.1dev_r2765-py2.3.egg

	とすればインストール完了。DLしなくてもeasy_installにURL渡してもいいぽい。

	Debian独特なのは以上で、あとは同じ。 trac.ini を編集すれば、TRAC_ADMIN権限ユーザーでwebadmin機能が使用可能になる。

	んー便利だ。これだけで0.9にあげた価値ある。家のほうでも使おう。

	* 14:02  [life]:
	英語漬け届いた。

	* 12:31  [life]:
	出社。

	* 03:47  [life]:
	退社。

2006-02-08 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:23  [life]:
	`Content-Type: application/xhtml+xml` だと cocomment の Bookmarklet うまく動かないな。

	はてなリングのページに貼るタグも同様。

	* 17:06 メモ  [life]:
	> 1人用プレスは寿命が短い

	コーヒーのやつね。買うなら3人用がいいらしい。

	なんか急にほしくなってきた。捜索！

	* 15:01  [life]:
	coComment、ブックマクレトクリックするのわすれるなぁ。。ｄｍｐ

	* 14:20  [catalyst]:
	`Catalyst::Model::DBIC::Schema` カコヨス！

	* 10:06  [life]:
	出社。

	* 05:41 coComment のブックマークレットのアイコンをfaviconに [firefox]:
	coComment の favicon.ico を `プロファイルディレクトリ\chrome\cocomment.ico` とかで保存しといて以下を userChrome.css に追加。

	    /* CoComments! */
	    #personal-bookmarks toolbarbutton[statustext*='http://www.cocomment.com/'] {
	        padding-left: 22px !important;
	        background-image: url("cocomment.ico") !important;
	        background-position: 2px 2px !important;
	        background-repeat: no-repeat !important;
	    }
	    #personal-bookmarks toolbarbutton[statustext*='http://www.cocomment.com/'] > image {
	        display: none !important;
	    }

	<img src="http://static.flickr.com/28/96878190_baa9bbec54_o.png" width="325" height="113" alt="cocomment bookmarklet" />

	* 05:32  [life]:
	まーコメントがないわけですがね！！

	* 05:21 coComment に対応 [clon] [web]:
	> [\[225\] (changeset) - Public Projects - Trac](http://dev.unknownplace.org/public/changeset/225)

	使えねーといいつつここのコメントを [coComment](http://www.cocomment.com/) 対応にしてみました。

	    <script type="text/javascript">
	        var blogTool              = "CLON";
	        var blogURL               = "[% base | html %]";
	        var blogTitle             = "[% name | html %]";
	        var postURL               = "[% base _ c.req.path | html %]";
	        var postTitle             = document.title;
	        var commentAuthor         = "[% c.user.username | html %]";
	        var commentAuthorLoggedIn = true;
	        var commentFormID         = "comment_form";
	        var commentTextFieldName  = "comment";
	        var commentButtonName     = "submit";
	    </script>

	みたいな JavaScript コードを埋め込めば良いよう。しかし名前空間もちょっと考えてほしいですよね。しかも思い切り普通の変数名だし。

	詳しいことは

	> [TeamBlog ≫ Blog Archive ≫ Standard Blogs](http://www.cocomment.com/teamblog/?p=21)

	を参照のこと。

	* 04:50  [life]:
	今日はすぐそばに人が寝てるのにうっかりいつものように音楽をかけててしまった。

	ふつうにずっとかけていて寝る前の今ようやくそれに気づいた。

	ごめん！！

	* 01:41  [life]:
	退社。

	* 00:16  [life]:
	採用バナーをageてみるテスト。

	* 00:11  [perl] [catalyst]:
	Hash::Merge とかつかえばいいんじゃねとか、一瞬思ったけど、それだと上書きは楽だけど消すのがめんどい罠。

	まぁ別に今の実装でもわかってれば特に不便ってわけでもないか。

2006-02-07 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:46 Catalyst の config [perl] [catalyst]:
	基本的なものは `MyApp.pm` ないで

	    __PACKAGE__->config( ... );

	で指定し、deploy 先で違うものなんかの設定を myapp.yml に書いて上書きとかってやろうとおもっても、現状の `Catalyst.pm` では

	    $class->config( { %$oldconf, %$conf } );

	ってなってるだけだから普通に深い階層になるのがデフォな Catalyst 設定ではいまいち使えないあるね。

	たとえば myapp.yml に

	    session:
	       cookie_name: session

	とか書くと、`$c->{config}->{session}` のほかのキー消されちゃう＞＜

	こういう使いかたしてる人いねってことかしら？

	* 23:18  [game]:
	マリカーのタイムアタックにはまる。

	スタッフゴーストつええよ。エイトクロスだけ勝てた。

	* 10:26 cocomment [web]:
	何だよ招待製かよとか思いつつも、メアド登録しておいたらすぐに invitation メールが送られてきた。

	使えるコメントフォームが有名サービスのもの限定されているのが微妙。

	もう、bookmarklet おしたらすべてのフォームに適用しちまえばいいのに。んで、未知のフォームの場合自分で本文とかのパラメータを選択する感じでさ。

	そうなればかなり良いサービス。現状ではあまり使えない。

	* 10:01  [life]:
	出社。

	* 03:19  [dbic]:
	下記 CLON::Model::DBIC だと `use CLON;` な使い方でも warning はでないんだ。唯一の利点かｍ

	clon_server.pl で warning がでるのは require してるせい。どうしようもねーな。

	* 01:50  [life]:
	退社。

	* 01:38  [dbic]:
	ためしに CLON の `CLON::Model::DBIC` を `Schema::Loader` ベースにしてみた。

	[CLON::Model::DBIC Rev.224](http://dev.unknownplace.org/public/file/CLON/trunk/lib/CLON/Model/DBIC.pm?rev=224&format=txt)

	    sub table {
	        my ( $self, $table ) = @_;
	        __PACKAGE__->resultset( $self->loader->monikers->{$table} );
	    }

	こんなコードを入れておくことにより、`Catalyst::Model::DBIC` 互換な `$c->model('DBIC')->table('table_name')` がそのまま利用でき、CLON はこの書き方をしていたのでこのファイルを書き換えるだけで他は何も変更しなくて良かった。

	といってもこれじゃ別に Schema の恩恵にまったくあずかれないし、相変わらず Class::C3 はうるさいし、あんまりいいことない。

	* 00:58  [life]:
	[シイラ](http://hmdt-web.net/shiira/)でここ見えなくね？

	まいいか。

2006-02-06 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:53 cpanrecent_crawler を Schema::Loader にスイッチ [perl] [dbic]:
	今朝かいた [Catalyst の Model を Schema::Loader でロード](http://unknownplace.org/memo/2006/02/06#e003)ってやつを、CPAN Recent Changes のクローラでやってみた。

	今までは `use MyApp;` 方式でロードしていて、それからの変更は以下のような感じ。

	> [\[223\] (changeset) - Public Projects - Trac](http://dev.unknownplace.org/public/changeset/223)

	こんな感じで割りとすぐ移行可能。`Class::C3` の warning が消えたのがかなりうれしいなぁ。

	* 14:04 カフェベロナ 100g [life] [starbucks]:
	そのままで、といったのに挽かれてしまった。

	* 13:52  [life] [kayac]:
	<a href="http://www.kayac.com/recruit/"><img src="http://www.kayac.com/img1/banner0623.gif" alt="人材大募集中！" width="402" height="63" /></a>

	We're Hiring!

	* 11:11  [catalyst]:
	見たけど問題なさげ。

	yml では `$c->config->{session}` と `$c->config->{authentication}->{flickr}` を上書きしてるんだけど、後者だけしか上書きされてなかったという謎現象。

	とりあえず yml ファイルのパスを自動指定ではなくて、明示的に `$c->config->{file}` に書いたら直った。

	* 11:03  [catalyst]:
	`$c->config->{session}` に clon.yml の内容が反映されてない。

	というか反映されているけど、Session プラグインはそれ読んでないみたいだ。つか気づくのおせー。会社着て `verify_address => 0` がうごいてなくて気づいた。

	んー？ あとで Session プラグインを読む。

	* 10:38  [life]:
	出社。

	* 05:34 IE7 起動スクリプト [life]:
	前に書いたレジストリファイルを ie7fix2.reg という名前でIE7と同じところに保存しさらに同じところに

	    // ie7.js
	    var WshShell = WScript.CreateObject('WScript.Shell');
	    
	    WshShell.Run('.\\iexplore.exe', 1, 1);
	    WshShell.Run('regedit /S ie7fix2.reg');

	とかいう感じで ie7.js を作る。

	これで ie7.js ダブルクリックで IE7 が起動し、終了後自動でレジストリを削除してくれる。

	クイック起動ツールバーとかにそれのショートカットを

	<img src="http://static.flickr.com/32/95926473_e4cbacc607_o.png" width="211" height="28" alt="taskbar" />

	こんな感じにアイコン指定して置いとくと隣の席の人に自慢できるかもしらん。

	* 04:41  [perl] [dbic]:
	[こないだ書いた](http://unknownplace.org/memo/2006/01/24) Catalyst の DBIC モデルを外部スクリプトから利用するっていうやつ、DBIx::Class::Schema::Loader つかえばいいね。

	    use FindBin;
	    use lib "$FindBin::Bin/../lib";
	    
	    {
	        package MyApp::Model::DBIC;
	        use base qw/DBIx::Class::Schema::Loader/;
	    
	        __PACKAGE__->load_from_connection(
	            dsn => 'dbi:...',
	        );
	        __PACKAGE__->load_classes;
	    }

	こんな感じにすれば、`MyApp::Model::DBIC::*` をロードしてくれる。

	全部ロードしてもいいなら `use MyApp;` で終わりなんだけど多分ほとんどの場合外部スクリプトから必要なのはモデル部分だけだと思われる。

	<ins>22:55: `load_classes` 書いてなかったので追記。ロードされてねーよ。</ins>

	* 04:32  [life]:
	RW完全初期化してからやったらいけた。

	smpカーネル入れてsshつなげるようにしたら飽きた。後は暇なときにやろう。。

	* 02:37 放置してたSC430 [life]:
	に手をつけようかと思ったのだけど、なんかCD-RW読んでくれないんですが！！

2006-02-05 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 22:25 changelogmemo.g.hatena.ne.jp [life] [clmemo]:
	あれ？消えてる？

	#### 追記@ 2006-02-06 17:54

	ring だよ！ なにいってるの。誰も突っ込んでくれないし＞＜

	気づくのおせぇ。。

	* 20:51  [life]:
	> [akiyan.com : IE7 beta2 previewをアンインストール後に、IE6でページが開けなくなってしまったときの対処法](http://www.akiyan.com/blog/archives/2006/02/ie7_beta2_previ.html)
	>
	> さっそく試してみたところ見事解決！とても助かったので、はてなポイントを進呈させていただきたい思いです。

	しまった！ Account Auto-Discovery とかすっかりわすれてた！！

	* 20:38 Data::Clmemo [perl] [clon]:
	CLON の作成にあたり [Data::Clmemo](http://svn.unknownplace.org/public/CLON/branches/CLON2.0/lib/Data/Clmemo.pm) などというものができちゃったわけですが、激しくオレフォーマットな Changelog memo しかパースできないため、CLON の公開にはこれの拡張が必至。

	フォーマットの定義を Data::Clmemo::* でやればいいのかね。DBIC::Loader とかのイメージで。

	* 17:26 daap_proxy.pl [trickster]:
	> [はてなブックマーク - updated daap_proxy.pl](http://b.hatena.ne.jp/entry/http://unknownplace.org/memo/2006/02/04#e003)
	>
	> クロスフェードを長めにして回避してます。

	それだ！

	何で再現する環境とそうじゃない環境があるんだろうとおもったらクロスフェードを有効にしてるかどうかという違いでした。

	iTunes 設定でクロスフェードを有効にしてあると、たとえクロスフェードの長さが 0 であっても次の曲を読みに行くときに TCP コネクションを貼りなおすみたいで、うまく動きます。

	根本的な解決ではないですが、一応はこれで大丈夫みたいです。

	* 17:13  [clon]:
	日付がおかしいの直した。日付として扱う DateTime はちゃんと truncate しましょうということ。

	コメントのフィルターおかしいの直した。

	* 08:56 コメント実装 [clon]:
	した。

	これで思う存分NDOメソッドれるぜ！

	* 04:31 find_or_new [perl] [dbic]:

	    sub find_or_new {
	        my $class  = shift;
	        my $attr   = @_ > 1 ? {@_} : $_[0];
	        my $exists = $class->find($attr);
	        return defined $exists ? $exists : $class->new($attr);
	    }

	`find_or_create` はあるのにこれはないとか謎い。NOT NULL なカラムもってるテーブルだとあんまりつかえねーよ＞`find_or_create`

	* 04:01  [life]: 
	まともにというか熟読したというか。

	* 03:48 まともに読んだプログラム本 [life]:
	高校のとき買った

	 * [Java 1.1 プログラミング](http://www.amazon.co.jp/exec/obidos/ASIN/4797302453/)
	 * [基礎からわかる TCP/IP Java ネットワークプログラミング](http://www.amazon.co.jp/exec/obidos/ASIN/4274063216/)

	ぐらいだなぁ。

	当時はこの二つを見まくりながら AWT でスタンドアローンアプリ作ってました。アプレットとかから入らなかったあたり、当時のオレのこだわりを感じます。

	二個目のネットワークプログラミングの本はすごく良くて、ネットワークがどんな仕組みになってるかめちゃくちゃわかりやすく書いてあってよかった。今の知識の基礎はこれだなーという感じ。

	他に家にあるのは、Windowsプラグラム関係の本くらいしかない気がする。。

2006-02-04 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 22:28  [life]:
	うーむわからん。

	* 19:18 updated daap_proxy.pl [perl] [trickster]:
	> [\[66\] - Trickster 2.0 - Trac](http://trickster.bulknews.net/trac.cgi/changeset/66)

	<del>TCP Keepalive を有効にしました。1曲終わると rebuffering のまま次の曲に行けないのがなくなったと思います。</del>

	うごいてなかった。違う環境でテストしてたよ。。

	* 02:27  [life]:
	退社。

2006-02-03 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:32  [life]:
	そそのかされてえいご漬け注文した。

	* 17:44  [life]:
	[YAPC::Asia 2006 Japan](http://tokyo.yapcasia.org/blog/ja/) のスピーカーすごすｇ

	たのしみだなぁ。

	* 16:50  [life]:
	なんか重いなぁとおもったら自鯖のロードアベレージ 7 超えてた。7 て。

	なんか全然トラフィックないのに apache2 がめちゃくちゃCPU食ってた。trac と svn でつかってるだけなんだけどな。。

	* 11:30  [life]: 
	出社。

	* 08:04  [life]:
	退社。

	* 01:56 More Helper! [life]:
	ファイルを新規作成するヘルパーだけじゃなくて、既存のファイルを書き換えるヘルパーほしいよなぁ、やっぱ。

2006-02-02 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:46 IE7 beta2 preview をインストールしないで使う [windows]:
	IE7 をインストールすると IE6 を上書きする形で入るのではげしくうざいので調べてみた。

	まず、IE7 をスタンドアローンで動くようにする

	 1. IE7のセットアップファイル (IE7B2P-WindowsXP-x86-enu.exe) をダウンロード
	 2. 上記は自己解答形式の圧縮ファイルなのでなんかで解凍する
	 3. 解凍してできたディレクトリの shlwapi.dll を削除し、iexplore.exe.local という空ファイルを作る

	これでiexplore.exe起動すればIE7が立ち上がる。

	ただこれで一度IE7を起動するとIE6でアドレスバーにURL入力するとIEではなくデフォルトブラウザで開くようになってしまう。(IE6がデフォルトブラウザな方は下記作業はいらないのかもしれない)

	なので、IE7終了したらIE7が追加したレジストリエントリを削除する必要がある。

	    Windows Registry Editor Version 5.00
	    
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\{C90250F3-4D7D-4991-9B69-A5C5BC1C2AE6}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{000214E5-0000-0000-C000-000000000046}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{000214F1-0000-0000-C000-000000000046}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{00610046-C71A-4EB4-B585-6D20492D608E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{02305531-F76F-4A4D-A760-B1192E72C6D5}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{02468693-E7E5-4C6B-9995-64CE5F51CEC4}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{02BA3B52-0547-11D1-B833-00C04FC9B31F}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{04F0C07F-463C-492C-900E-0FB6910B5A65}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{06091FFE-0B9B-4B2A-B933-0AB0FEA8B26D}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{07B3B2BA-90EE-4464-9F6F-A824B13B91C1}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{0A498932-D65C-4E0C-80DA-8A2CA8F25320}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{0AD364CE-ADCB-11D3-8269-00805FC732C0}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{10339516-2894-11D2-9039-00C04F8EEB3E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{169DB284-8361-4BE4-BDB0-0B73AD8764F1}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{176C11B1-4302-4164-8430-D5A9F0EEACDB}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{18459F6F-10F8-4979-923C-CF86C1614A10}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{193215BF-3815-441A-98BC-589DB62452A6}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{1C9CD5BB-98E9-4491-A60F-31AACC72B83C}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{1D3293BC-EC01-400F-8179-8DE5D53ABEB7}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{1D34CEFB-3901-46A5-94FA-1E91163D5D7E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{1E61BA50-BFAE-42A1-9276-D2E877B589F7}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{1F6E41E5-25B1-49CE-A00A-2DA5A99EE4F5}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{22C440DF-4720-4B3A-A472-0CCB6E6CDD97}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{23D62F16-9AFF-49D2-917E-AA8A56B2B0CD}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{240A7174-D653-4A1D-A6D3-D4943CFBFE3D}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{241C033E-E659-43DA-AA4D-4086DBC4758D}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{2659B475-EEB8-48B7-8F07-B378810F48CF}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{289E924C-9FA1-4B1F-B8AE-A8B7AD9D74A7}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{2C06EAB7-1814-4DEF-9625-0F3EC1EF0BC7}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{2C1C7E2E-2D0E-4059-831E-1E6F82335C2E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{2D43C5B0-EA54-4B64-AB09-11C1B436D7AD}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{3050F679-98B5-11CF-BB82-00AA00BDCE0B}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{3050F6DC-98B5-11CF-BB82-00AA00BDCE0B}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{321A6A6A-D61F-4BF3-97AE-14BE2986BB36}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{32A86A13-5A3D-49E6-8FAC-46512ADC339A}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{3552E971-528C-4988-BE75-64952F5F85A6}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{36116642-D713-4B97-9B83-7484A9D00433}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{3C44BA76-DE0E-4049-B6E4-6B31A5262707}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{3C708557-C99D-4FA3-9231-56518418B4E4}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{3E481212-DFE0-4756-A033-0928214904BC}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{3EC36F3E-5BA3-4C3D-BF39-10F76C3F7CC6}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{4037D137-0045-44F8-9FF9-3D1B931D70D0}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{48F8A5B1-82B4-47A3-8A7A-A097BC5E349D}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{4B7272AE-1955-4BFE-98B0-780621888569}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{504C9F82-0F68-47F4-8F63-083E58C88412}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{50C852B0-C95F-4FEE-BE00-87DC18B2661B}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{52B14A6A-58F1-45BD-B00A-DCE7403D951E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{52BBC746-9F9C-44B4-8D7C-0AAAB79BC7DC}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{53326B4A-E949-41FA-AE2C-9293FF144A50}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{54A8F188-9EBD-4795-AD16-9B4945119636}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{56887418-C996-4EE6-95E2-FA03776E10B3}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{59007C49-CB25-4BD5-AAD9-6943F08F4F9E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{5CD52983-9449-11D2-963A-00C04F79ADF0}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{5EA5DE37-3D26-4BC0-A90C-F24EDC74FB7E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{5EBC8D33-D04E-4576-AE40-0A8631F319E6}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{5FF4DE38-0DE2-45F5-B6EE-8223CAF82347}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{60CE96BB-B6F9-42DC-B84E-5E5D9C370A6F}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{6295DF2A-35EE-11D1-8707-00C04FD93327}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{6295DF2C-35EE-11D1-8707-00C04FD93327}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{6295DF40-35EE-11D1-8707-00C04FD93327}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{6295DF41-35EE-11D1-8707-00C04FD93327}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{6295DF42-35EE-11D1-8707-00C04FD93327}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{64A1CBF0-3A1A-4461-9158-376969693950}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{650BE65D-DF09-4028-97A0-40B74C150A50}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{66994203-1CA4-464F-A70B-C0A17584E7FD}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{66A9CB08-4802-11D2-A561-00A0C92DBFE8}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{6CB95A6A-88B6-4DC4-B3EA-3A776D1E8EFF}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{6D1B6FF1-BADD-440F-B85D-C6A491FB405C}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{736D8A2B-6895-4944-9567-DA67D00B0DCA}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{75EEA680-DF51-4984-883F-5A5CED99330D}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{77E425FC-CBF9-4307-BA6A-BB5727745661}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{77F295D5-2D6F-4E19-B8AE-322F3E721AB5}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{792C7DAB-C434-4945-BF8D-042C439C460C}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7AC7492B-C38E-438A-87DB-68737844FF70}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7AF4B09B-7312-4A4E-ADED-342D15E8EF1D}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7AF4B09C-7312-4A4E-ADED-342D15E8EF1D}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7BC28AC2-0D9C-4941-BB9A-72BECB184FAC}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7C32FA17-30A4-42D5-B7DA-FFE8FCFCCE45}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7C9E512F-41D7-11D1-8E2E-00C04FB9386D}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7D903FCA-D6F9-4810-8332-946C0177E247}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7EBFDD80-AD18-11D3-A4C5-00C04F72D6B8}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7EBFDD85-AD18-11D3-A4C5-00C04F72D6B8}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{7EBFDD87-AD18-11D3-A4C5-00C04F72D6B8}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{8016B7B3-3D49-4504-A0AA-2A37494E606F}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{85DB95DF-8879-4EF3-B9BD-86CE79737D5A}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{87CC5D04-EAFA-4833-9820-8F986530CC00}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{8C85B440-D8F7-48C3-98E0-A91513F7D829}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{90B4135A-95BA-46EA-8CAA-E05B45CD801E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{91A565C1-E38F-11D0-94BF-00A0C9055CBF}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{96E5AE6D-6AE1-4B1C-900C-C6480EAA8828}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{9737CC15-CADC-4694-B628-0D52D930F610}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{98CD9153-D326-41A1-9D0C-C3DCB8A6E6B8}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{A6087428-3BE3-4D73-B308-7C04A540BF1A}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{A7254510-9427-4D22-9EBE-0E88C2CBC800}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{A73CE67A-8AB1-44F1-8D43-D2FCBF6B1CD0}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{B20CECC1-655E-4397-8C6E-E5BB61D77434}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{B3DCB623-4280-4EB1-84B3-8D07E84F299A}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{B824B49D-22AC-4161-AC8A-9916E8FA3F7F}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{B9075C7C-D48E-403F-AB99-D6C77A1084AC}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{BC245C43-4BB9-47AA-AF6F-AE7B0F33295F}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{C339211E-E4B5-4A2C-AD84-4042F8956AE9}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{C35456E7-BEBF-4A1B-86A9-24D56BE8B369}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{C8F026DA-8F7D-40AA-A780-41525EBDCC1F}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{C8F945CB-327A-4330-BB2F-C04122959488}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{CA59707B-4C62-4D1E-ADB0-2367D96EE4E9}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{CAB55631-A36C-4E5C-971B-B5C1980C6593}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{CEDAC0B3-E828-40CC-9E5C-E2F4E9B447C4}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{CEF04FDF-FE72-11D2-87A5-00C04F6837CF}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{D0191542-7954-4908-BC06-B2360BBE45BA}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{D57C7288-D4AD-4768-BE02-9D969532D960}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{D72FF553-AE8F-4DAE-9EE8-833A9E025CB0}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{D8EC27BB-3F3B-4042-B10A-4ACFD924D453}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{D8F6AD5B-B44F-4BCC-88FD-EB3473DB7502}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{D926E764-B7F6-4992-BEAE-4B587CF46223}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{D9BC0C86-6141-4F32-8CD4-79FA9E9BA88E}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{DD62F5AC-737D-4506-8015-A871779E8624}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{DF14A364-AFC9-45DB-B702-020CEF09473C}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{E03333E1-C840-46C2-B032-D3466DFBEBE4}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{E157C3A1-A532-4DE2-9480-1452B7426EEE}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{E76B8E13-485F-4ED3-8D27-2FA4930CF236}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{EB6339BF-EB6A-437A-82DA-A56E7E4F9CDC}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{ECF43B3A-724A-46BB-BAD3-6AFE0BEF0728}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{ED4F9ADD-3CC4-46B7-A416-2FF54D7156BB}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{F0009734-E8DE-48E5-B603-BFA5966A8F7C}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{F46EDB3B-BC2F-11D0-9412-00AA00A3EBD3}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{F4E26C7B-0D88-4F41-87E2-B01BD0AA96D6}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{F6F95A83-0AF5-464D-A105-7296D61C9E68}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{F7041E23-1A6C-41BB-89B2-B3425C51CCD5}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{F7C40885-2506-4EB9-B4AB-0E1E3D3FD5F9}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{F7DA33A5-FD27-4FF1-B8E9-05C7535BE52B}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{FECE3DD3-B657-4FC1-B2DF-532A1BDF43AC}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{FF8C9B9C-C90F-4F30-B5B2-77C3D56BD125}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{FFF994DD-E785-11D6-8F9F-00065BBD32BD}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{FFF994DF-E785-11D6-8F9F-00065BBD32BD}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{FFF994E9-E785-11D6-8F9F-00065BBD32BD}]
	    [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Interface\{FFF99648-E785-11D6-8F9F-00065BBD32BD}]

	上記を ie7fix2.reg などいう名前でと保存しダブクリすれば削除完了。

	元ネタは [IE7 Standalone Launch Script](http://weblogs.asp.net/jgalloway/archive/2005/12/28/434132.aspx) でここで同じような方法で ie7fix.reg というのが紹介されているが、これは beta2 preview ではうまく動かないよう。

	ie7fix.reg でも IE6 の問題は修正されるが IE7 が起動直後に落ちるようになる。

	* 16:28  [life]: 
	出社。

	* 03:14  [life]: 
	退社。

	* 03:00 IE7 [life]:
	少し試した。

	CSS周り

	 * 子セレクタ使える
	 * アンダースコア無視するバグなくなった

	っぽいので、切り分けるほうほうがわからなく。IE6ともGeckoともボックスモデル解釈ちがうっぽくうざい予感。

	* 00:15 f おしっぱ @ Bloglines [life]:
	ごろさんの日記みてて他人事のようにばかだなぁとか思ってたけど、やっちゃったよ。。

2006-02-01 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:44  [perl]:
	> [のみまくし日記 - 配列を一気にハッシュへ変換](http://diary.godtomato.net/takefumi/2006/01/31_01.html)

	ここに出てきたコードがわからなかったので perldoc ってみた。

	    @days{'a','c'}      # same as ($days{'a'},$days{'c'})

	基本っぺーorz

	* 18:04 忘れてた [life]:
	@Nifty の Outbound Port25 Blocking の開始もうすぐだ。今日からかと思ってあせったけど違った。

	SmartHost で Nifty の SMTP 使うようにすればいいんかな。

	* 15:58  [life]: 
	英雄ほりえもんが倒され、世界は絶望に包まれた。

	しかしそこに立ち上がった一人の男、片栗X!

	おめでとうございます。しかしいまだに通勤する姿を想像することができません。

	* 11:16  [life]: 
	出社。

	* 04:06 2月！ [life]: 
	キター！

	* 04:00 Uninitialized value in pattern match [perl]:
	例えば

	    push @plugins, 'Static::Simple' if $ENV{CATALYST_ENGINE} =~ /^HTTP/;

	などとしたときに `$ENV{CATALYST_ENGINE}` が未定義だとタイトルのように怒られるわけです。

	    $ENV{CATALYST_ENGINE} and $ENV{CATALYST_ENGINE} =~ /^HTTP/;

	とか

	    $ENV{CATALYST_ENGINE} || '' =~ /^HTTP/;

	とかするわけですがいまいち冗長！

	これはどうするのが普通なのか。

	* 00:12  [life]: 
	退社。

2006-01-31 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 13:59 日本語ロケールなFirefox [life]:
	ってパスワード保存するかしないかのポップアップダイアログのボタンにアクセスキーなくない？？ 不便すぎ。

	それともKDEの所為かしら。

	<a href="http://www.flickr.com/photos/typester/93446016/" title="Photo Sharing"><img src="http://static.flickr.com/25/93446016_cb19ad2afd_o.png" width="368" height="118" alt="There are no access keys !" /></a>

	こんななので、マウス使わないとクリアできない。

	* 12:11 個人利用では mod_perl [life]:
	という気もする。fastcgiよりも。

	アプリが増えてくると1アプリごとにメモリを使うfastcgiは不利になる。

	* 11:11  [life]: 
	出社。

	* 02:14  [life]: 
	退社。

2006-01-30 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 16:34 MUA [life]: 
	僕はというと、下記ではランク外の Mew を愛用中。

	    Mew version 4.2.52 on Emacs 22.0.50 / Mule 5.0 (SAKAKI)

	* 15:39 MUA集計 [life]:
	なんとなく気になったのでメールボックスのメールのMUA分布を調査してみた。

	メアドごとの最新メールのMUAを集計した。

	1091人中

	1. Thunderbird 131人
	2. GMail 121人
	3. Microsoft Outlook 108人
	4. Apple Mail 81人
	5. Mutt 72人
	6. Becky! 53人
	7. KMail 25人
	8. Evolution 21人
	9. Microsoft Entourage、Yahoo!メール 9人
	10. Gnus, Sylpheed 7人

	X-Mailer, User-Agent ともにないのが 342 件。

	GMail すげーなぁ。

	* 10:52  [life]:
	出社。

	* 02:11  [life]: 
	ブレーカー落ちた。ここに引っ越してから初。

	50A あるんだけどなぁ。。なにしたんだろ。

2006-01-28 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 05:59  [life]:
	Net::DNS::ValueDomain::DDNS 更新。

	つかバグってたよ。。ずっと。。。

	* 04:41  [life]: 
	退社。

2006-01-27 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 11:43  [life]: 
	出社。

	* 03:52  [life]: 
	退社。

	* 03:48  [life] [game]:
	gumonji、この時間になってやっとプレイできる軽さになったのでいろいろあそぶ。

	前と違っていきなりいろいろできるようになっていて、最初からいろいろ遊べるようになってる。

	いろいろいろいろ。

	あとなんかSNSっぽくなってて日記が書けたりいろいろ。ノートでも重いけどまーうごくので暇なときに。

2006-01-26 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 16:06  [life] [perl]: 
	Catalyst 5.33 いれたら CPANPLUS とかいれられちゃったのでこの際移行してみる。

	ちょっとつかってみて CPAN よりいいところ

	 1. アンインストールコマンドがある
	 2. ユーザー権限でモジュールをインストールできる (内部でsudo使用らしい)
	 3. p コマンドで履歴というかログをページャで開ける (ファイルに保存も可)

	2 が地味にいいなー。

	* 11:14  [life]: 
	出社。

	* 01:10  [life]: 
	退社。

2006-01-25 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:28 KDE 日本語関係 [debian] [kde]:
	メモ。

	    sudo aptitude skkdic skktools uim uim-skk uim-xim uim-gtk2.0 uim-qt

	~/.uim

	    (define default-im-name 'skk)

	~/.xsession

	    export GTK_IM_MODULE=uim
	    export QT_IM_MODULE=uim
	    export XMODIFIERS=@im=uim
	    
	    uim-xim &
	    uim-toolbar-gtk-systray &
	    uim-toolbar-qt &
	    
	    x-session-manager

	* 18:06  [life]:
	会社PCのWindows削除してDebianいれた。

	デスクトップ環境とか久々に入れるなぁ。とりあえずKDEとemacs-snapshotとfirefoxいれた。

	めちゃ快適な雰囲気。IMは何入れようかなぁ。SKKに挑戦してみようか。

	* 11:13  [life]:
	出社。

	* 01:13  [life]: 
	退社。

	* 00:45  [life]: 
	やばい、風邪っぽい。

2006-01-24 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:05  [life]: 
	下記スクリプト、今思ったけど Catalyst App の Model を外部から使うときも便利かも。

	    use FindBin;
	    use lib "$FindBin::Bin/../lib";
	    
	    use DBIx::Class::Loader::Pluggable;
	    
	    DBIx::Class::Loader::Pluggable->new(
	        dsn => 'dbi:...',
	        namespace => 'MyApp::Model::DBIC',
	    );

	とかでテーブルクラスもロードしてくれる。

	* 19:59 下書き [perl]: 

	    package DBIx::Class::Loader::Pluggable;
	    use strict;
	    
	    use base qw/DBIx::Class::Loader/;
	    require Module::Pluggable::Fast;
	    
	    sub new {
	        my $class = shift;
	        my %attr  = @_;
	    
	        my $self = $class->SUPER::new(@_);
	    
	        Module::Pluggable::Fast->import(
	            name    => '_components',
	            require => 1,
	            search  => [ $attr{namespace} ],
	        );
	        __PACKAGE__->_components;
	    
	        $self;
	    }
	    
	    1;

	* 11:17  [life]: 
	出社。

2006-01-23 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:31  [life]: 
	退社。

	* 11:38 イタリアンロースト 100g [life] [starbucks]: 

	* 09:41  [life]: 
	出社。

	* 06:16 updated CPANRecent [life]: 
	> [\[210\] (changeset)](http://dev.unknownplace.org/public/changeset/210)

	RSS に Diff page へのリンク追加。次の新着モジュールから有効、なはず。

	テンプレート変更したのでBloglinesとかの新着に再UPしてくるかもしれないですがごめんなさい。

2006-01-21 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 17:21 FireBug [firefox]:
	バグレポート系のかと思って見ないでスルーしてたら、deliciousでもはてブでもホッテントリになってたので見てみたら全然違った。

	* 06:20 GnuPG [life]:
	メールにGnuPG署名を導入した。

2006-01-20 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:49  [life]: 
	退社。

	* 22:32 自動再起動系 [life]: 
	auto-save-buffers 使ってるとまったく使えないのよねぇ。Catalyst とかエラーのまま再起動しなくっちゃうし。

	* 21:59  [life]: 
	いまは svn だけのために apache2 を入れてる状況で、なんとかしたいんだけどーと思ってたら一応 [lighty の mod\_dav\_svn も開発中](http://trac.lighttpd.net/trac/ticket/123)みたい。

	あとこないだの OPTIONS が通らないのもチケットになってた。

	* 18:49  [life]:
	> [遅レス。 - XKeymacs 環境](http://d.hatena.ne.jp/babie/20060113/p2)
	>
	> 増井さんオススメの ";" を [Enter] にしてみた

	そいや、そんなこと聞いたなぁ。

	いいのかな。僕は前書いたような[ホームポジション](http://unknownplace.org/memo/2005/11/24#e006 "CLON - 22:20  ホームポジション")なのでので、; は普通薬指で押すけども。

	小指があまる予感！

	* 11:49  [life]: 
	出社。

	* 11:05  [life]: 
	そっかCDBIはイテレータ使うときもあらかじめデータ持ってきてるんだった。

	* 03:09 DBD::SQLite のバグ？ [perl] [dbic]: 
	DBIx::Class つかっていておかしな現象に遭遇、list に投稿してみたら、DBD::SQLiteの制限とかいう。いやでもCDBIじゃ普通に使えるやん？

	DBIC::Loader の blblack さんが綺麗なサンプルを返信してくれたのでそれを書くと、

	    my $test_ite = DBIC::Test->search;
	    
	    while ( my $test = $test_ite->next ) { # Fails
	    ###foreach my $test ($test_ite->all) { # Works
	        $test->text( $test->text . ' updated' );
	        $test->update;
	    }

	とかで、イテレータでまわそうとするとupdate時に死ぬ。(searchで複数の行が帰ってくる場合)

	配列で全部とってきてまわしたときは普通に動く。

	ちなみに、DBIC::Test->search->all というのは CDBI でいうリストコンテキストでの search と同じことです。もちろん CDBI と同じように

	    my @tests = DBIC::Test->search;

	ともかけるす。というか僕は最初そやって投稿したので、上の例が帰ってきたときにネイティブDBIC使いとの違いを知らしめられたという感じです。

	* 01:05  [life]: 
	退社。

2006-01-19 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 21:06 カメラ業界 [life]: 
	このタイミングで、どっかがポジティブなプレス打ったら人気でまくりなきがす。

	* 16:17 daap_proxy.pl の使い方 [life] [trickster]: 
	わかりにくいっぽいので、メモを書いておく。

	> 環境1:
	>
	>  * 自宅サーバー unknownplace.org:3689 で mt-daap だとかそれ系の iTunes サーバーが動いている
	>  * それをリモートのクライアントWindowsPC(ここではThinkPad)からみたい

	1. [Bonjour for Windows](http://www.apple.com/jp/ftp-info/reference/bonjourforwindows.html)インストール
	2. svk co http://svn.bulknews.net/repos/trickster/trunk/Net-Rendezvous-Publish-Backend-BonjourWin32/
	3. 1 でインストールされた dns-sd.exe をどっかパスの通ってるところか、examplesディレクトリにコピー
	4. examplesディレクトリで `perl daap_proxy.pl --remote-server unknownplace.org` 実行

	> 環境2:
	>
	>  * 1と同じだが自宅サーバーの3689ポートは空けてなくsshポートフォワードを使う場合

	1. 上記の3までやる
	2. ssh -L 9999:unknownplace.org:3689 とかしてポートフォワードる
	3. `perl daap_proxy.pl --port 9998 --remote-port 9999`

	> 環境3:
	>
	>  * 1と同じだがクライアントにOSXを使う場合

	1. Net::Rendezvous::Publish::Backend::Apple インストール
	2. svk co http://svn.bulknews.net/repos/trickster/trunk/Net-Rendezvous-Publish-Backend-BonjourWin32/
	3. `./examples/daap_proxy.pl --remote-server unknownplace.org`

	とかいう感じ。

	POE 周りのモジュールのインストールも必要。

	BonjourWin32 周りはもっとなんとかしたいかなぁ。

	あと、サーバーに miyagawa さんの [daap-mirror-proxy.pl](http://svn.bulknews.net/repos/trickster/trunk/samples/daap-mirror-proxy.pl) を使うとリモートのiTunes共有をローカルのiTunes共有にマージできて、なかなかすばらしげ。

	* 14:17  [life]: 
	出社。

	* 11:35  [life]: 
	寝坊。

	* 00:12  [life]: 
	さっきのスクリーンショットは Net::DAAP::Server な DAAP 鯖につないだもので、正規の iTunes だと外部アドレスからの接続を受け入れてない可能性があるらしいので、そのままでは使えないかもしれない。

	* 00:02  [life]: 
	退社。

2006-01-18 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:50 daap_proxy.pl その後 [perl]: 
	[POE の Cookbook](http://poe.perl.org/?POE_Cookbook) にのってる [TCP Forward サンプル](http://poe.perl.org/?POE_Cookbook/TCP_Port_Redirection)を元に、とりあえず動くのをつくって[コミット](http://trickster.bulknews.net/trac.cgi/browser/trunk/Net-Rendezvous-Publish-Backend-BonjourWin32/examples/daap_proxy.pl "trunk/Net-Rendezvous-Publish-Backend-BonjourWin32/examples/daap_proxy.pl")。

	<img src="http://static.flickr.com/30/88182148_5d2b492c3f_o.png" width="176" height="163" alt="daap fwd" />

	これで家の iTunes を会社の iTunes 共有に追加できたりする。

	    GET daap://address:3689/server-info HTTP/1.1

	とかって通信してるはずなのに、それをそのまま中継して動く不思議。

	ちゃんとDAAPしゃべって中継したい！ 共有名変えたり、認証かけたり。

	現状は daap\_proxy.pl というよりは daap\_fwd.pl か。

	* 13:46  [life]: 
	今日は出社ってかかれねーなーとかおもってるあなた、スルドイ。

	実は昨日の帰還報告時からずっと会社にいます。。

2006-01-17 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:31 帰還 [life]: 
	富士山ちょーきれいだった。

2006-01-16 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 12:37  [life]: 
	山梨キター

	* 08:44 宿泊施設の注意書きに [life]: 

	> スパムメール送信・ハッキング・クラッキング行為は絶対に行わないでください。

	はっくできない！＞＜

	* 08:40 山梨ってどこよ [life]: 
	山梨と群馬の違いすらよくわからないけれども、今日明日と山梨です。あれ、群馬だっけ？

	山梨hackthon!

	うそです。

	でも時間を見つけてはっくりたいとおもいます。

2006-01-15 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 19:44  [life]: 
	あぁ、CPANRecent のクローラとめたままだった。Sorry!

	* 19:35 DBIC の Trigger [perl]: 
	よくわかんないんだが、CDBIのtriggerぽいことをするには

	    sub insert {
	        my $self = shift;
	        $self->created_date( DateTime->now ) unless $self->created_date;
	        $self->SUPER::insert(@_);
	    }

	みたいな感じでいいんかなぁ。

	* 18:32 Static::Simple と StackTrace のロード [perl] [catalyst]: 
	はこんな感じでどう。

	    __PACKAGE__->setup(
	        do {
	            my @plugins;
	            push @plugins, 'StackTrace' if $ENV{CATALYST_DEBUG};
	            push @plugins, 'Static::Simple' if $ENV{CATALYST_ENGINE} =~ /^HTTP/;
	            @plugins;
	        }
	    );

	* 15:59 あげた [life]: 
	1.4.9 に。相変わらず mod_proxy 経由で svn のコミットできない

	svn 側

	    svn: Commit failed (details follow):
	    svn: OPTIONS request failed on '/public/stuff'
	    svn: OPTIONS of '/public/stuff': 400 Bad Request (http://svn.unknownplace.org)

	lighty 側

	    2006-01-15 15:57:02: (request.c.985) GET/HEAD/OPTIONS with content-length -> 400

	うーむ。OPTIONS ってこのlighttpdの挙動でいいんだっけ？

	* 15:34 lighttpd 1.4.9 [life]: 

	>   * added server.core-files option (sandy )
	>   * added docs for mod_status
	>   * added mod_evasive to limit the number of connections by IP ()
	>   * added the power-magnet to mod_cml
	>   * added internal statistics to mod_fastcgi
	>   * added server.statistics-url to get internal statistics from mod_status
	>   * added support for conditional range-requests through If-Range
	>   * added static building via scons
	>   * fixed 100% cpu loops in mod_cgi ("sandy" )
	>   * fixed handling for secure-download.timeout (jamis@37signals.com)
	>   * fixed IE bug in content-charset in the output of mod_dirlisting (sniper@php.net)
	>   * fixed typos and language in the docs (ryan-2005@ryandesign.com)
	>   * fixed assertion in mod_cgi on HEAD request is Content-Length ()
	>   * fixed handling if equal but duplicate If-Modified-Since request headers
	>   * fixed endless loops in mod_fastcgi if backend is dead
	>   * fixed Depth: 1 handling in PROPFIND requests on empty dirs
	>   * fixed encoding of UTF8 encoded dirlistings (Jani Taskinen )
	>   * fixed initial bind to a unix-domain socket through server.bind
	>   * fixed handling of lowercase filesystems
	>   * fixed duplicate request headers cause by mod_setenv

	* 15:04 寝坊 [life]: 
	打ち合わせすっぽかした。うう。

	* 07:27 CPANRecentアップデート [perl]: 
	namespaceフィルタに加えてauthorフィルタも追加した。

	[/author/miyagawa](http://unknownplace.org/cpanrecent/author/miyagawa)

	とかで特定の人のログを追えるように。手抜きなので namespace フィルタと併用は出来ない。キーはCPAN IDです。

	miyagawa+naoya+tokuhirom とかすれば複数人を対象にできるます。

	* 01:36 CVS [life]: 
	そういや昔はCSVをCVSとかtypoしてたけど、今は逆だなぁ。

2006-01-14 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 02:44  [perl]: 
	つーかPOEよくわからねえええｋつ

	* 02:37  [perl]: 
	昨日の DAAP Proxy は POE::Component::Proxy::TCP はなんかLinuxでしかうまく動かんので、適当に実装してる。

	sekimura さんので iTunes の共有に表示出すのは簡単にできて、そっから DAAP の server-info content-codes login まではいくんだけど、そのあと updates で固まる。

	土日マター。

	* 02:13  [life]: 
	退社。

2006-01-13 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:51 雨の歌 - ムローヴァ [music]: 
	<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00005FGGB/unknownplace-22/ref=nosim/" title="ブラームス : ヴァイオリン・ソナタ 第1番 ト長調 作品78「雨の歌」"><img src="http://images-jp.amazon.com/images/P/B00005FGGB.09.MZZZZZZZ.jpg" alt="ブラームス : ヴァイオリン・ソナタ 第1番 ト長調 作品78「雨の歌」" title="ブラームス : ヴァイオリン・ソナタ 第1番 ト長調 作品78「雨の歌」" width="130" height="127" /></a>

	これも購入。

	バイオリン曲の中でも多分一番すきなんじゃないかなってくらいのブラームスのバイオリンとピアノのためのソナタ第一番。繊細な演奏家ムローヴァがかなり良い感じに弾きこなしてます。

	高校の文化祭で視聴覚室借りてこれ弾いたなぁ。立ち見出るくらい人集まってびびった、良い思い出。

	* 16:01  [life]: 
	POE::Component::Proxy::TCP が、手持ちのWin、OSXマシンにはいらん＞＜

	* 13:08 MY FOOT - the pillows [music]: 
	<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000BV7S5I/unknownplace-22" title="MY FOOT - the pillows"><img src="http://images-jp.amazon.com/images/P/B000BV7S5I.01.LZZZZZZZ.jpg" alt="MY FOOT - the pillows" title="MY FOOT - the pillows" width="176" height="176" /></a>

	ゲッツ。

	pillows、[en.wikipedia.org に](http://en.wikipedia.org/wiki/The_pillows "The pillows - Wikipedia, the free encyclopedia")のってんだな。。

	* 11:57  [life]: 
	出社。

	* 02:31 daap-proxy.pl [perl]: 
	sekimura さんが Net::Rendezvous::Publish::Backend::BonjourWin32 とかいうアツイモジュールを作っているのを見てこんなの思いついた。

	実行できる環境にないので適当に書いてみただけで多分動きませんが、

	    #!/usr/bin/perl
	    
	    use strict;
	    use warnings;
	    
	    use Getopt::Long;
	    use FindBin;
	    use lib "$FindBin::Bin/../lib";
	    
	    use POE qw/Component::Proxy::TCP/;
	    use Net::Rendezvous::Publish;
	    use Net::Rendezvous::Publish::Backend::BonjourWin32;
	    
	    my $server_name   = 'daap proxy';
	    my $server_port   = 9999;
	    my $remote_server = 'localhost';
	    my $remote_port   = 3689;
	    
	    GetOptions(
	        'n|server-name=s'   => \$server_name,
	        'p|port=i'          => \$server_port,
	        'r|remote-port=i'   => \$remote_port,
	        's|remote-server=s' => \$remote_server,
	    );
	    
	    POE::Component::Proxy::TCP->new(
	        Alias       => "ProxyServerSessionAlias",
	        Port        => $server_port,
	        OrigPort    => $remote_port,
	        OrigAddress => $remote_server,
	    );
	    
	    my $service = Net::Rendezvous::Publish->new->publish(
	        name => $server_name,
	        type => '_daap._tcp',
	        port => $server_port,
	    );
	    
	    $poe_kernel->run;

	目的はLANの外にあるDAAP ServerをiTunesの共有で聞きたい、てのがしたいということ。

	家にも会社にも音楽ファイル置いててめんどいのでこゆのほしかった。

	これで動くといいけどなぁ。詳しくは明日。

	* 01:16  [life]: 
	退社。

2006-01-12 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 11:13  [life]: 
	出社。

	* 03:45  [life]: 
	退社。

	* 03:43  [life]: 
	Cred::FlickrのbasicテストかいてCPANにあげた。

	次はSampleかな。速攻つくれて、かつなんかおもしろげなネタはないものか。

	* 01:35 テストスクリプトが綺麗にかけない [perl]: 
	というかすごい汚くなる。うう。

	抜粋

	    my $req        = Test::MockObject->new;
	    my $res        = HTTP::Response->new;
	    my $user_class = Test::MockObject->new;
	    my $params     = {};
	    $res->{success} = 1;
	    $req->fake_module('Catalyst::Request');
	    $req->mock( params => sub {$params} );
	    $user_class->fake_module('Fake::User::Class');
	    $config->{user_class} = 'Fake::User::Class';
	    $c->mock( req                => sub {$req} );
	    $c->mock( default_auth_store => sub { } );
	    $c->mock( set_authenticated  => sub { } );

	きも。。

2006-01-11 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:10 StashLex [catalyst]: 
	やべー。もう `$c->stash->{foo}` とかしなくていいよ！

	    my $foo : stashed;

	で！

	* 10:53  [life]: 
	出社。

	* 00:38  [life]: 
	退社。退社間際にけんたろさんがIRCにへんなタイピングサイトはったので、それにちょっとはまってしまう。

	580とかむりすｇ。慣れれば500はいけそうな感じだけど。。

2006-01-10 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 11:27 幻聴 [life]: 
	トラックがアイドリングしてるみたいな低い音が響いていて気持ち悪いのだけど、周りの人は誰も感じていないとか。。なんだこれ

	* 09:40  [life]: 
	出社。

	* 08:34 連休 [life]: 
	いろいろ予想外のことばかりしてた。やろうと思ってたこと何も出来ず。

	なぜかブレンパワードを10話まで見た。

2006-01-09 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 12:00 Catalyst::Plugin::I18N 0.5 [catalyst]: 
	きたっぽい。後で使い方を書く。

2006-01-07 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 19:38 複数起動WScript [firefox]: 
	えむもじらで紹介されてるような bat ファイルによる起動だとDOS窓がうざいので下記のようなWScriptで対処。

	    // firefox.js
	    var WshShell = WScript.CreateObject('WScript.Shell');
	    var WshEnv   = WshShell.Environment('PROCESS');
	    
	    WshEnv('MOZ_NO_REMOTE') = 1;
	    WshShell.Run('"C:\\Program Files\\Firefox\\1.5\\firefox.exe" -p 1.5alternate');

	* 19:01 複数Firefox [firefox]: 
	> [複数の Firefox を同時起動する - えむもじら](http://level.s69.xrea.com/mozilla/index.cgi?id=20060107_DupFirefox)

	いまさら何いってんだとか思ったけど、メインのほうに `MOZ_NO_REMOTE` をセットしなければ通常通り関連付けでURLやファイル開けるのか。

	* 04:06 [life]:
	退社。

	* 00:08 HTTP::Body 0.6 [life]: 
	やっときたー。

	その調子でI18Nもおねがいします。

2006-01-06 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 18:41 Class::Data::Inheritable [life]: 
	データどこにもってるかわかんなくて、くらうだーのひとやいなもでのひとにいろいろ聞いてたらなんとなくわかった。

	アクセサの中で参照してるから参照カウンタが 0 にならなくて `$data` はずっとのこるということらしい（？）。クロージャというらしい。

	個人的にはキモイので嫌かも。

	つかでもやっぱり Perl の本ちゃんとよまなきゃだめかなぁ。買うかなぁ。

	* 15:47  [perl]: 

	    --- /Library/Perl/5.8.6/HTML/FillInForm.pm      2005-10-14 05:49:09.000000000 +0900
	    +++ lib/HTML/FillInForm.pm      2006-01-06 15:45:37.000000000 +0900
	    @@ -83,6 +83,7 @@
	       if(my $file = $option{file}){
	         $self->parse_file($file);
	       } elsif (my $scalarref = $option{scalarref}){
	    +    $self->utf8_mode(1);
	         $self->parse($$scalarref);
	       } elsif (my $arrayref = $option{arrayref}){
	         for (@$arrayref){

	とかしちゃった。その場しのぎ。

	* 15:40 HTML::Parser の warning [perl]: 
	HTML::FillInForm 使うたびに

	> Parsing of undecoded UTF-8 will give garbage when decoding entities at /Library/Perl/5.8.6/HTML/FillInForm.pm line 86.

	とかってのが input エレメントの数だけ出てうぜええ。

	* 11:49  [life]: 
	出社。

	新年早々寝坊とは！

	* 03:20  [life]: 
	退社。

	* 02:12 #catalyst-ja @ ircnet [catalyst]: 
	Catalyst::Plugin::LocaleUtils とかって名前で、I18N プラグインと連携させた DateTime のいろいろ作ったりしてて、実装まとまんなくて相談したいけど現状ここに書くか、もしくはいきなり英語領域突入という状況でわりとめんどくさかったり、なんか日本人のCatalystコミュニティがない気がするので IRC wide系列に #catalyst-ja とか作ってみた。

	ので、よかったらいらしてください。

2006-01-05 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 20:47 ユーコンブレンド 100g [life] [starbucks]: 

	* 13:19 NDS の CONTACT [game]: 
	> [DS to get first online RPG // Nintendo DS /// Eurogamer](http://www.eurogamer.net/article.php?article_id=62298)
	>
	> It's been revealed that Contact, a new game currently in development for the DS, will work with the Nintendo Wi-Fi Connection service - making it the handheld's first online RPG.

	[これ](http://www.mmv-i.net/game/ds/contact/ "コンタクト")のことかな？

	普通におもろげ。

	* 10:03  [life]: 
	出社。

2006-01-04 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:43 鎌倉に帰還 [life]: 

2006-01-03 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 19:50 raelity.org が [blosxom]: 
	なんかいっぱい更新されてるなーとか思ったら、typoに移行してるよ。

2006-01-01 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 02:11 ISDN - ネット格差 [life]: 
	実家は田舎すぎてISDNがネットの速度限界。

	ほんと64Kとかなんにもできない。。ssh すら少しいらいらする。少しね。

	高校時代まだこっちにいたときは56Kのアナログ回線が主流でISDNはすごく新しかった。だからまだよかったけど、今僕が高校生でここに住んでたらこの業界これなかったんじゃないかなぁ。

	* 02:01 あけまして [life]: 
	あけましておめでとうございます。

	今年は英語をがんばりたい。

2005-12-31 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 16:41  [life]: 
	帰省に向け、svk sync しまくり中。

	あとCPANモジュールも同期取っとかないと死ぬな。

	* 04:53 helper [life] [perl]: 

	    __PACKAGE__->config(
	        name => 'AdminPage',
	    
	        authentication => {
	            dbic => {
	                user_class         => 'AdminPage::Model::DBIC::Account',
	                user_field         => 'username',
	                password_field     => 'password',
	                password_type      => 'hashed',
	                password_hash_type => 'MD5',
	            },
	        },
	    
	        authorization => {
	            dbic => {
	                role_class           => 'AdminPage::Model::DBIC::Role',
	                role_field           => 'role',
	                role_rel             => 'map_account_role',
	                user_role_user_field => 'account',
	            },
	        },
	    
	        session => {
	            expires => 3600 * 14,
	            storage => __PACKAGE__->path_to( 'session', 'session' )->stringify,
	            cookie_name => 'ap_sid',
	        },
	    
	        validator => {
	            plugins        => [qw/DBIC::Unique/],
	            options        => { dbic_base_class => 'AdminPage::Model::DBIC', },
	            messages       => __PACKAGE__->path_to('validator.yml')->stringify,
	            message_format => qq{<span class="error">%s</span>},
	        },
	    
	        'View::TT' => {
	            CONTEXT     => undef,
	            PRE_PROCESS => 'inc/macro.tt',
	        },
	    );

	こんな config をちょくちょく書くんだけど、いまいちうまくヘルパーつくれなくてめんどいのよね。ううう。

	なんつか、もうちょいアプリかかないとどこが共通でどこが変わるかとかがうまくわからんよ。パターん

	* 00:56 SUPER MARIOBROS [life]: 
	貸してもらった！

	やべー、こんなむずかったっけ。Bダッシュむずい。

2005-12-30 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 21:16 ツメ仕事 [life]: 
	[Time Tracker](http://www.formassembly.com/time-tracker/) 良いね。

	これ社内用に共有というか他人の見えるやつ作ったら楽しそうだ。

	* 19:29 for better, for worse [music]: 
	<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00027LITI/unknownplace-22" title="heartstrings - for better, for worse"><img src="http://images-jp.amazon.com/images/P/B00027LITI.01._OU09_PE0_SCMZZZZZZZ_.jpg" title="heartstrings - for better, for worse" alt="heartstrings - for better, for worse" /></a>

	ちょっと前に audioleaf のトップになってて知ったんだけど、なかなかかっちょよい。

	公式サイトがアレなのがあれ。

	* 12:48  [life]: 
	Bloglines にもう補足されてる。はや。。

	* 12:43 applied [life]: 
	tokuhiro のひとから要望パッチきてたので[適用](http://dev.unknownplace.org/public/changeset/196 "[196] (changeset) - Public Projects - Trac")。サンクス！

	* 01:58 screen とスクロール [life]: 
	 1. screen導入したて、画面ロールバックできなくてこまる
	 2. コピーモードを覚える、が使いにくいと思う
	 3. PuTTY の Alternate 端末画面への切り替えを無効にするのオプションを知る。便利ジャン！
	 4. 徐々にコピーモードしか使わなくなる。
	 5. スクロールバーが邪魔になり、スクロールバーを表示しなくなり、コピーモードのみになる。(←いまここ

	この後どうなるんでしょうか。

2005-12-28 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:01 CPAN Recent Changes  [life] [perl]: 
	CPAN の Recent RSS は更新チェックにはつかえるけど、名前空間で絞りこみたかったり、何が変わったのか知りたいので、更新された部分の Changelog つきで RSS をはくツールを作ってみた。

	[CPAN Recent Changes](http://unknownplace.org/cpanrecent/)

	[/cpanrecent/Catalyst/Plugin](http://unknownplace.org/cpanrecent/Catalyst/Plugin/ "CPAN Recent Changes - Catalyst::Plugin")

	などとすれば Catalyst::Plugin のみの更新もチェック可能。CPAN ウォーチャー必携！

	ソースはこちら： [http://svn.unknownplace.org/public/CPANRecent/trunk/](http://svn.unknownplace.org/public/CPANRecent/trunk/)

	* 20:27  [life]: 
	[はてなブックマーク - Catalyst::Plugin::Flavour](http://b.hatena.ne.jp/entry/http://search.cpan.org/~typester/Catalyst-Plugin-Flavour-0.01/lib/Catalyst/Plugin/Flavour.pm)

	hatena タグ？

	* 20:15  [life]: 
	起きた。

	昨日仕事納め→忘年会→二次会→つぶれた人と漫喫で休憩→帰還→寝

2005-12-27 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 12:06 日付フィルタ [perl] [catalyst]: 
	ここみたいに Path が /2005/12/27 とかからはじまっていた場合、それを日付情報としてパースし、それ以降の Path とともに default コントローラを呼ぶには

	    sub day : Regex('^(\d{4})/([01]?\d)/([0-3]?\d)(?:/(.*))?') {
	        my ( $self, $c ) = @_;
	    
	        ( $c->stash->{yr}, $c->stash->{mo}, $c->stash->{da} )
	            = @{ $c->req->snippets };
	        $c->forward( '/default', [ split '/', $c->req->snippets->[-1] ] );
	    }
	    
	    sub month : Regex('^(\d{4})/([01]?\d)(?:/(.*))?') {
	        my ( $self, $c ) = @_;
	    
	        ( $c->stash->{yr}, $c->stash->{mo} ) = @{ $c->req->snippets };
	        $c->forward( '/default', [ split '/', $c->req->snippets->[-1] ] );
	    }
	    
	    sub year : Regex('^(\d{4})(?:/(.*))?') {
	        my ( $self, $c ) = @_;
	    
	        ( $c->stash->{yr} ) = @{ $c->req->snippets };
	        $c->forward( '/default', [ split '/', $c->req->snippets->[-1] ] );
	    }

	とかしなくちゃいけなくて(思い付かなくて) DRY すぎるのでなんとかしたい。

	がんばればまとめられそうだけど、ううむ。

	つか関係ないけど Regex コントローラはマッチした部分がコントローラの引数で飛んでくるって感じならいいのに。

	* 11:08  [life]: 
	出社。

	ThinkPad がサスペンドから復帰しねえええええ、とか思ったらディスプレイが外部出力のみのモードになってるだけだった。

	* 02:41  [life]: 
	退社。

2005-12-26 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 10:56 現実逃避 素晴らしい洞察 [life]: 
	宇宙の人にはてぶで現実逃避とかコメントされてた。

	* 10:31  [life]: 
	出社。

2005-12-25 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 19:37 フェアトレードブレンド 100g  [life] [starbucks]: 
	<a href="http://www.flickr.com/photos/typester/77129999/" title="Photo Sharing"><img src="http://static.flickr.com/37/77129999_371091e569_m.jpg" width="180" height="240" alt="ニュー袋" /></a>

	もっていった豆袋があまりにもぼろぼろだったので、店員が見るに見かねて新しいのにかえてくれた。袋値引きのまま！

	* 17:37 ニューカメラ [photo] [life]: 
	ゲッツ！！

	* 13:30 むむ [perl]: 

	    create table playlist (
	           id integer not null,
	           song integer not null,
	           timestamp integer not null,
	           primary key (id)
	    );
	    
	    create table song (
	           id integer not null,
	           name text,
	           artist integer not null,
	           album integer not null,
	           parimary key (id)
	    );
	    
	    create table album (
	           id integer not null,
	           name text,
	           artist integer not null,
	           primary key (id)
	    );
	    
	    create table artist (
	           id integer not null,
	           name text,
	           primary key (id)
	    );

	とかって DB(SQLite) 構成で、

	    package DBIC::Playlist;
	    use base 'DBIx::Class::Core';
	    __PACKAGE__->belongs_to( song => 'DBIC::Song' );
	    
	    package DBIC::Song;
	    use base 'DBIx::Class::Core';
	    __PACKAGE__->has_many( playlists => 'DBIC::Playlist' );
	    __PACKAGE__->belongs_to( artist => 'DBIC::Artist' );
	    __PACKAGE__->belongs_to( album  => 'DBIC::Album' );
	    
	    package DBIC::Album;
	    use base 'DBIx::Class::Core';
	    __PACKAGE__->has_many( songs => 'DBIC::Song' );
	    __PACKAGE__->belongs_to( artist => 'DBIC::Artist' );
	    
	    package DBIC::Artist;
	    use base 'DBIx::Class::Core';
	    __PACKAGE__->has_many( songs  => 'DBIC::Song' );
	    __PACKAGE__->has_many( albums => 'DBIC::Album' );

	こうしたとして、ここで最新10件の playlist を取得したいとするとき、

	    my $playlists = DBIC::Playlist->search( {}, { order_by => 'timestamp desc', rows => 10 } );

	とかすると `$playlists->first->song` とか他のテーブルのもの読みにいくときにいちいち SQL が発行されるのであれよね。

	ここで

	    my $playlists = DBIC::Playlist->search( {}, { order_by => 'timestamp desc', rows => 10, prefetch => [qw/song/] } );

	とかすれば song テーブルは最初の SQL で JOIN して一緒に持ってきてくれる。

	それはいいんだけど、その先の song.album とかもとってきてほしいんだけど、むりっすか！

	この状況でたとえばテンプレート内で

	    [% WHILE (playlist = playlists.next) %]
	      album: [% playlist.song.artist.name %]
	    [% END %]

	とかやると毎回 artist テーブルにクエリ投げる SQL がよばれるわけですよ。かっけぇ。。

	どーすんのがいいのだろう。

	* 07:53 あー [life]: 
	FormValidator::Simple のあれがイメージしてたのと違った（いまごろ使ってみた

	ううむ。

2005-12-24 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 22:09 emacs で設定ファイル [life]: 
	いじりまくりだぜ？

	* 21:50 サブテク忘年会 [life]: 
	いやーおもろい話がいっぱい聞けた。

	感想：

	 * Yappo さんはすごい
	 * tokuhirom はメモ魔。メモ魔に悪いやつはいない
	 * にぽたんさんのいろんな話 (眠くて最後のへんあんまり聞いてなかった！)

	つーかかけないことおおすｇ

	* 21:48  [life]: 
	Bloglines/3.0-rho 君はクロール間隔短すぎじゃないかね。

	* 20:42  [screen]: 
	jじゃないほうのnaoyaたんのとこからのアクセスが！！

	そこの[まとめ](http://d.hatena.ne.jp/naoya/20051223/1135351050 "naoyaのはてなダイアリー - GNU screen いろいろまとめ。")で紹介されてる id:hideoki 製 ssh 設定

	    function ssh_screen(){
	     eval server=\${$#}
	     screen -t $server ssh "$@"
	    }
	    if [ x$TERM = xscreen ]; then
	      alias ssh=ssh_screen
	    fi

	なんだけど、これいいなぁとか思ったけど、screen で ssh 直起動すっと keychain つかえなくねっすか？ というのも zshrc で keychain のスクリプトよんでるので、zsh 上で ssh 起動しないといけない。

	つか `x$TERM = xscreen` て何の意味がｗ

	なので、こないだ[ごろうさんにおしえてもらった](http://unknownplace.org/memo/2005/12/11#e002 "CLON - 14:27  zshで埋まって悲しいとき")のの `case cd` のところを

	    cd|ssh)
	            if (( $#cmd >= 2)); then
	                cmd[1]=$cmd[2]
	            fi
	            ;&

	とかしてみた。これでまぁサーバー名(というかsshコマンドの最初の引数)がウィンドウ名になる。

	つかそういえば screen 上での keychain についてちゃんと調べようと思ってたはずなのにすっかり忘れてたｗ

2005-12-23 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 17:30  [life]: 
	退社。

	* 16:35  [life]: 
	出社。

	* 06:18  [life]: 
	退社。

2005-12-22 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 22:41  [life]: 
	そろそろ id:typestar につっこんどいたほうがいいきがしてきた！

	* 10:38  [life]: 
	出社。

	* 03:58 VC 2003 入れ中 [life]: 
	ちょっとしたツール書く必要があったんだが、なんとノートに開発環境いれてなかった。

	世間は 2005 2005 うるさいけど、当分買わない予定。.Net とかかかねーし、2003 で現状十分っすよ。

2005-12-21 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 20:15  [life]: 
	[「ゲド戦記」監督日誌](http://www.ghibli.jp/ged_02/)見てたら読みたくなったんだけど、文庫はないのかな、なんか見つかんね。

	* 15:52  [life]: 
	忘れてた。多分11時ごろ出社。

	で、さっき退社。自宅作業。

	* 03:36  [life]: 
	退社。

	* 02:45 FormValidator::Simple [perl]: 
	Validator 使う機会があったら試してみようと思っていた FormValidator::Simple。やっと試してみた。

	すげーいい！

	けど、とりあえず軽く使ってみて一つ不満が。エラーメッセージを全体の集合でしか取れないこと。`Data::FormValidator` みたいに個別かつフォーマットされた物もほしい。

	とりあえず現状使う上では(Catalystの場合)、

	    MyApp->config(
	        'View::TT' => { PRE_PROCESS => 'inc/macro.tt', },
	        validator  => {
	            messages       => 'conf/messages.yml',
	            message_format => qq!<span class="error">%s</span>\n!,
	        },
	    );

	などとし、macro.tt に

	    [%-
	    
	    MACRO ERROR(action, key) BLOCK;
	        c.form.message.get(action, key, c.form.error(key)) | format(c.config.validator.message_format);
	    END;
	    
	    -%]

	とかしておいた上で、フォームのテンプレートで

	    <input type="text" name="user" id="login_form_user" value="" />
	    [%- ERROR('login', 'user') -%]

	とかすげーめんどいことしてる。

	モジュールのほういじろうかとおもったけど、いまいちうまい方法が思いつかなかったので。。

	けどそれでも `Data::FormValidator` よりは断然良い。

2005-12-20 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 14:13  [life]: 
	4月にかった DELL の激安サーバーの uptime が 200 days に。いい買い物した！

	* 13:44 dnsmasq [debian] [life]: 
	社内ネットワークが調子悪くてうんうんいってて、挙動的に DNS 周りがネックになってるっぽかったので、ローカルの Debian マシンで簡易 DNS サーバー作ってそっち使うようにしたら普通になった。

	Debian で DNS はどうやるのが普通なんだろうと思って [Debian GNU/Linux System Administration Resources](http://www.debian-administration.org/) 内検索したら簡易なのは dnsmasq 使うとめちゃ簡単！ とかいうのをコメント欄で見つけたのでやってみた。

	ほんとすげー簡単。

	名前引きの設定は `/etc/hosts` から、外部 DNS サーバーの設定は `/etc/resolv.conf` から読むようになっていてほとんど設定不要。

	いやー、これ家でも使おう。OPT100 の EasyDNS 機能がどうしようもなくつかえなくてこまってたとこ。

	* 10:56  [life]: 
	ThinkPad X41 の Fn キーは Release 時に WakeUp キーコードを送ってくる。

	* 10:33  [life]: 
	出社。

	* 00:33  [life]: 
	退社。

2005-12-19 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:12  [life]: 
	del.icio.us とかおちててつかえねーからそゆとき用のフロントエンド作ろうかと思ったけど、del.icio.us 落ちてたら作れないことに気づいた。

	* 15:51  [life]: 
	隣の人が Thinkpad 買おうかなーとかいっててレノボのサイト見に行ったら、X40 とかも新しくなっててオレの X41 よりスペック高くなってやがるすよ！！ (X41も新しくなってるんだけど)

	つことは secondlife な人のはオレのよりスペック高げだなぁ。くぅ。

	* 14:36  [life]: 
	体調よくなった。土日寝まくったからかな。

	* 10:05  [life]: 
	出社。

2005-12-18 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 18:35 MochiKit [life] [javascript]: 
	IRC で [MochiKit](http://mochikit.com/) とかいう JavaScript ライブラリがすげぇみたいな話題になっていて、見に行ったらほんとすげぇ。

	とくに対話式のインタプリタや、デバッグ用のブックマークレットとかがアツイ。全体的な印象(まだscreencast見たくらいだけど)としては prototype よりもかなり関数的だなぁという感じ。

	JSAN にもあがっていてびっくり。JSAN とか忘れてたよ。。

2005-12-17 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 03:39  [life]: 
	退社。

	* 03:22 サードアイ - the pillows [music]: 
	異常にかっこいい。つーか出てたの知らなかったZE!?

	* 01:07 カメラ熱 [life] [photo]: 
	再燃。新しいの買おう。

	Pen-F 気に入ってるけど、露出計ないのが苦しい。ハーフだから段階露出しまくりでも枚数的には結構大丈夫でそこはいいんだけども。

	欲しいのは、マニュアル一眼で、かこよくて、露出計ついてる(＆ちゃんと動く)やつ。

	かっちょいいのは OLYMPUS OM-1 か PENTAX MX とかそれ系なんだけど、古すぎてあれ。OMシリーズならレンズも豊富だしよさそうだけども。

	んで Nikon FM2 とか中古でいいのあったら買おうかなとか。ちょっとサイズがでかくなっちゃうけど Nikon ならまだマニュアル一眼の生産しててレンズも普通に新品で手に入るんだよね(新品は手が出ませんが。。)。

	* 00:50  [screen]: 
	> [subtechグループ - 'hceT'.sub(/\Z/,'bus').reverse - screen emacs風bind](http://subtech.g.hatena.ne.jp/secondlife/20051216/1134741917)
	>
	>     bind -c REGION 2 split
	>     bind -c REGION 1 only
	>     bind -c REGION 0 remove
	>     bind -c REGION o focus
	>     bind -c REGION ^ resize
	>     bind x command -c REGION

	キタコレ！ THX!!!!!

	最後は `bind ^x` のが個人的にはいいな。

2005-12-16 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:29 気持ち悪いのは [life]: 
	マリカーで車酔いしてるから説。

	* 19:30 吐き気 [life]: 
	起きてすぐすごい吐き気が。ってのが2,3日続いてる。

	なんだろなぁ。風邪？

	咳とか鼻水とかはまったくなくて、吐き気だけなんだけど。

	* 18:50  [screen]: 
	> [はてな GNU screen を使い始めて数ヶ月が経ち、ようやく慣れてきました。それで、screenrc による設定方法などを調べているのですが、「こういうときはこうす・・](http://www.hatena.ne.jp/1134693287)

	encoding ネタを紹介してみた。

	で、上記URLで紹介されていた下記バインド

	    bind 2 split
	    bind o focus
	    bind 1 only
	    bind 0 remove

	一瞬便利！ とかおもったけど、ちょ、これ 0, 1, 2 のウィンドウセレクトする時どすんだよｗ

	`bind ^1 select 1` とか別キー割り当てしてある？とかかしら。

	* 17:40 カフェベロナ 100g [life] [starbucks]: 
	袋をラベルでふたされた。

	<a href="http://www.flickr.com/photos/typester/74060818/" title="Photo Sharing"><img src="http://static.flickr.com/41/74060818_e4ae76f206_m.jpg" width="180" height="240" alt="caffe verona" /></a>

	* 14:39  [life]: 
	出社。

	* 03:25  [life]: 
	退社。

2005-12-15 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 12:33 deladdict [life]: 
	del.icio.us 落ちてて何にも出来ないよ

	* 10:39  [life]: 
	出社。

	* 04:44 podのあれ [life]: 
	 * 指定dir（及び `@INC`）から `{ モジュール名 => pod ファイル名 }` のリスト作る
	 * pod パースして html にする
	 * その html 内のメソッドなどのところにそのメソッドの生ソースを埋め込む
	 * そのソースのシンタックスハイライト

	とかやるやつまで作った。もちょい

	* 04:43  [life]: 
	退社。

	* 01:53 English [life]: 
	チャットでうまく言葉( or 文章)が出てこなかったとき、それメモってあとで英語できる人にどういえばよかったか聞こう。

	それでだいぶ語彙増えそう。

2005-12-14 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 16:08 typo [life]: 
	> [blog.xole.net : script language="php"](http://blog.xole.net/article.php?id=372)
	> 
	> ひげぽんさんのトコで紹介されてる、perl と javascript の typo 話。これってPHPの方が typo しやすいよ！。とかいってみる。<br />
	> ref - [ひげぽん OSとか作っちゃうかMona- - プログラミングtypo](http://d.hatena.ne.jp/higepon/20051213/1134445541)

	ほんと、perl と javascript やってて、たまに PHP 触るとまじわけわからなくなる。なにあれ。

	perl5 と javascript のみなら全然いけるな。perl6 になったらわからんが。

	typo 以前の問題。

	* 15:12 Feedburnerのアレ [life]: 
	もしかしてアレが更新されるたびにその記事が Bloglines に上がるんだろうか。うぜぇ！

	* 13:51  [life]: 
	あーもー。

	よく、Synergy で左 PC で emacs、右 PC で Firefox つかってるとき、右にカーソルあるのにemacsのつもりでC-nおしっぱとかしちゃったりして大惨事になる。

	* 10:01  [life]: 
	出社。

	* 02:57  [life]: 
	退社。

2005-12-13 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 15:49  [life]: 
	あーー。[api.rails2u.com](http://api.rails2u.com/) みたいのほしー。

	grep まくるの飽きたよ。

	* 13:15 CLON Plugin [clon]: 
	<a href="http://www.flickr.com/photos/typester/73062314/" title="Photo Sharing"><img src="http://static.flickr.com/20/73062314_aa38071d4e_o.png" width="560" height="310" alt="CLON Plugins" /></a>

	Blosxom みたいなプラグインディレクトリにプラグイン置くだけでプラグイン動くとか言うことがしたかったので、わざわざ別に作った。
	Catalyst の各メソッドをラップしてるだけだけど。

	* 10:43  [life]: 
	出社。

	* 01:04 マリカー [game]: 
	なんか全然やる気にならないなぁ。飽きたわけじゃないと思うけど、他にやりたいことがあるとか？で。

	* 00:08  [life]: 
	退社。

	* 00:06 Flickr の Authentication [life]: 
	思ったより使える。

	Catalyst::Plugin::Authentication が結構素敵な実装でおどろいた。でもなんかものすごくソースが読みにくい。まだなんかよくわからない部分があるよ。。
	あと、やっと先週末に投稿した I18N プラギンのパッチがコミットされたのでやっとCLONの作業すすめられる！！

2005-12-12 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 15:13 クリスマスブレンド 100g [starbucks] [life]: 

	* 11:28 せばすちゃん Loader [life]: 
	(注: Class::DBI::Loader と DBIx::Class::Loader をまとめてせばすちゃん Loader と言う)

	で、思いもよらないトラブル。

	他の技術者(not Perler)がなんかプライマリキーもたないテーブルとか追加してて、Loader はそれないとテーブル読み込めなくてエラーるのでこっちのプログラムが動かなくなってた。

	古い Catalyst::Model::CDBI 使ってたのでエラー原因も出なくてちょっとはまったり。テーブル追加したら教えてくれよう。

	* 11:25 should or IMHO [life]: 
	この選択肢が多い Catalyst の利用法において、should should いうやつはなんだろね。

	好きなように使えばいいんすよ。

	Catalyst やプラギンの実装自体に対して言うならわかるのだけど。

	* 11:21  [life]: 
	出社。ってほんとは9時前に出社してたんだけど！忙しくてこの時間に。

	* 06:53  [life]: 
	A::C::Flickr アップした。

	まだ仕様未確定なとこあるのでデベロッパリリース＆メソッドのドキュメントなし。[ヘブライ語の人](http://search.cpan.org/~nuffin/ "search.cpan.org: nuffin")にメールまくり！

	* 05:56 tidy [life]: 
	ティディって呼んでたよ！ 辞書引いたらタイディだった（ta'idi）。

	人前でも言いまくってたよ。。はずい＞＜

	* 05:49 Authentication::Credential::Flickr [catalyst]: 
	作った。あとでドキュメント書いてでべろっぱりりーすでCPANにあぷする。

	これ使うためには

	    Authentication
	    Authentication::Credential::Flickr
	    Session
	    Session::Store::FastMmap
	    Session::State::Cookie

	と、いっぱいプラグインロードしなくちゃいけなくてなんかださい。

	* 00:24 libディレクトリ使え！！ [life]: 
	Catalyst::Plugin::I18N がトップディレクトリに I18N.pm とか置いてあってうぜー。

	[こないだ書いた方法](http://unknownplace.org/memo/2005/12/10#e003 "CLON - 01:21  PERL5LIB")じゃ `@INC` にはいらん。

2005-12-11 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 22:41 酒とコーヒー [life]: 
	どっちも飲まなかったら結構金浮くんじゃないか。と思ったけどどうせやめられないので計算するのやめた。

	* 21:16 EmacsClient with screen [emacs] [screen]: 
	EmacsWiki に載ってたよ。

	> [Using EmacsClient with screen](http://www.emacswiki.org/cgi-bin/wiki/EmacsClient#toc6 "EmacsWiki: EmacsClient")

	* 15:15  [f1]: 
	super ugly が来期参戦するには、全他チームの承認が必要。

	でも、あくまでも琢磨獲得にこだわってる（ように見える）ミッドランドが承認するのかなー。

	* 14:48  [life]: 
	正直、ちゃんと lisp 勉強するべきだと思った。

	* 14:31 emacsclient で emacs のウィンドウをアクティブに [emacs] [screen]: 
	↓の zshrc の case で処理わけているところに

	    emacsclient)
	        screen -X eval "select 1"
	        return
	        ;;

	とか追加してみる。僕は emacs は常に window 1 で開くので、select 1 でおｋ。

	んでこのあと `C-x #` したら元のウィンドウにもどってくれたらかっけーんだけど、elisp で `screen -X other` とかよべばいいかなとか思ったけど、emacs 画面いってからファイル閉じる間にウィンドウ切り替えしたらうまく動かんし。どーやるんだろう。

	`alias ec='emacsclient -n'` とかしててほとんどこっちしか使わないので戻んなくてもいいのだけど、svn(k) コミット時とかで便利そうだなぁ。

	* 14:27 zshで埋まって悲しいとき [screen]: 
	[ステータスライン - ari's Diary](http://www.nijino.com/ari/diary/?20020614&to=200206141S1#200206141S1) で紹介されているのをつかうと screen の window 名を自動的に最後に実行したコマンドに置き換えてくれる。すっばらしい。昨日ごろさんに教えてもらった。

	* 00:45 perltidy-region [emacs]: 
	`indent-region` じゃ vim の整形にかてなそうだったので、perltidy-region を導入した。

	    (defun perltidy-region ()
	      "Run perltidy on the current region."
	      (interactive)
	      (save-excursion
	        (shell-command-on-region (point) (mark) "perltidy -q" nil t)))

	これを `\C-ct` とかに割り振っておいた。ちょーーー便利なんだけど！

	perltidy の<del>パラメータ</del><ins>設定</ins>は Best Practices 参照。

2005-12-10 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 22:05  [life]: 
	某大食いの人と幹事の人が弊社を訪れる。

	 * gorou's vim すげぇ（オレ emacs レベルじゃほとんど対抗できなかった
	 * 鎌倉すげぇ（大仏初めて見た
	 * 鎌倉には武器屋があった
	 * テスト駆動開発入門
	 * 五臓六腑

	* 03:32  [life]: 
	退社。

	* 03:01  [life]: 
	下記はすでに Clouder の人が作成済みだった罠！

	* 01:35 Catalyst::Plugin::XFramework [catalyst]: 
	なんか流行ってるらしい！

	    package Catalyst::Plugin::XFramework;
	    
	    sub finalize {
	        my $c = shift;
	    
	        $c->res->header('X-Framework' => 'Catalyst/'.$c->version);
	        $c->NEXT::finalize(@_);
	    }
	    
	    1;

	こんな感じか。

	    $ HEAD http://localhost:3000/
	    200 OK
	    Connection: close
	    Date: Fri, 09 Dec 2005 16:43:26 GMT
	    Content-Length: 10981
	    Content-Type: application/xhtml+xml; charset=utf-8
	    Last-Modified: Fri, 09 Dec 2005 16:31:19 GMT
	    Client-Date: Fri, 09 Dec 2005 16:43:26 GMT
	    Client-Peer: 127.0.0.1:3000
	    Client-Response-Num: 1
	    Status: 200
	    X-Catalyst: 5.62
	    X-Framework: Catalyst/5.62

	* 01:21 PERL5LIB [perl] [zsh]: 
	一時的に trunk 使いたいときとか

	    export PERL5LIB=`echo ~/workdir/Catalyst/**/lib(/) | sed -e 's/ /:/g'`

	とかしてんですが、もっと簡単に書ける？＞zsh

	* 00:23 週末TODO [life]: 
	 * Catalyst::Plugin::Authentication::Credential::HTTP 関係あれこれ
	 * Catalyst::Plugin::Authentication::Store::HTTP::Remote(?)
	 * Catalyst::Plugin::Authentication::Credential::Flickr
	 * Catalyst::Plugin::Authentication::Credential::WSSE

	あと ACL もどうなってるか見たい。WSSE はスルーでいいかなぁ。

	ひぃい。gorou さんとか出迎えてるよゆうｎ（ｒｙ

	* 00:03 英語ログ [clon]: 
	始める。今から CLON に実装する。

	IRC で相手の言ってることはわかってるのに(わからないことも多いですが)こちらの言葉が出ないのは、普段から英語を書いてないからだと思ったので。

2005-12-09 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:09 iTunes Music Signature [music]: 
	[iTunes Signature Maker](http://www.jasonfreeman.net/itsm/) とかいう面白げなもの見つけたので作ってみた。

	[ITSM-2005-12-09-13-49-20.mp3](/misc/itsm/ITSM-2005-12-09-13-49-20.mp3)

	 1. Black Tambourine - BECK (Guero)
	 2. Above me - Rufio (Perhaps, I Suppose...)
	 3. WAKE UP - Rage Against The Machine (Rage Against The Machine)
	 4. How I Could Just Kill a Man - Rage Against The Machine (Renegades)
	 5. Ride on shooting star - the pillows (Fool on the planet)
	 6. QUICKSAND - Belvedere (FAST FORWARD EATS THE TAPE)
	 7. WONDERFUL WORLD - Hawaiian6 (ACROSS THE ENDING)
	 8. PHOTO - WRONG SCALE (triangle to square)
	 9. S.S - WRONG SCALE (Upstairs for the bed)
	 10. white lights - Rufio (MCMLXXXV (1985))
	 11. 45 - WRONG SCALE (effort for scale)
	 12. イエロウ - Syrup 16g (HELL-SEE)
	 13. The Saddest Song - The Ataris (so long, astoria)
	 14. fool proof - band apart (K.AND HIS BIKE)

	ITSM サイトの gallary にアップしようとしたんだけど、なんか Safari じゃできないくさい？ のであきらめた。

	* 12:25  [life]: 
	神器って「じんぎ」なのか。「じんき」じゃ変換できなかった＞＜

	* 12:11 小山さんの apache スライド [apache]: 
	> [MODULE.JP - 「自信を持ってApacheを操るために」スライド公開](http://module.jp/blog/internet_week_2005T16.html)
	>
	> Internet WeekのWebサイトでも後々資料の配布とビデオ配信される予定ですが、少し時間がかかると思うので先行してこちらに置いておきます。

	ビデオ配信！ 楽しみ。

	とりあえずスライドながめた。

	 * 最低1回はマニュアルを全部読め
	 * コンテキストを意識
	 * highperformance.conf
	 * apache 三種の神器 (mod\_setenvif, mod\_rewrite, mod\_log\_config)

	* 11:18  [life]: 
	出社。

	* 00:29  [life]: 
	退社。

2005-12-08 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 13:48 マリオ [life]: 
	いきなり対戦してるけど結構いけてる。むずいコースだとだめだけど。

	アイテムとかの駆け引きのが重要。サブディスプレイで相手の場所と持ってるアイテム確認できる。

	あとはマリオのBダッシュ以外かっちょいいマシンがなくて使う気にならないという問題。

	* 13:16  [life]: 
	My MarioKart DS ID is <span class="mario-kart-ds-id">356543031527</span>

	* 12:47 mario [life]: 
	キター

	<a href="http://www.flickr.com/photos/typester/71363038/" title="Photo Sharing"><img src="http://static.flickr.com/34/71363038_71b26bfa02_m.jpg" width="240" height="180" alt="Mario kart DS" /></a>

	* 12:32 xyzzy 0.2.2.235 [life]: 
	> Wed Dec 07 2005 Version 0.2.2.235
	>
	> * なんとなくライセンスなどを。

	* 12:15 本間病 [life]: 
	まじもう今日眠くてどうしようもないと思ったけど、コーヒー沸かしたら復活した。

	本間さん(誰)も飲むといいと思った。

	* 10:57  [life]: 
	出社。

	* 02:25 盗聴 [catalyst]: 

	    if ( defined $fh ) { binmode $fh; $c->res->body( $fh ); }

	* 01:49  [life]: 
	退社。

2005-12-07 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 21:37 マリカー [life]: 
	発送メールきた。

	* 12:46  [life]: 
	コードブロックが Mac で見づらかったので Monaco 追加してみた。

	* 10:52  [life]: 
	出社。

	* 02:50  [life]: 
	退社。

	* 02:18 うおー [life]: 
	`text-align: justify;` きもいよう。

	* 01:29  [life]: 
	`$flavour !~ /^(search|tag|\d{4})$/` とかハードコードしてるのだせぇ。

	* 01:13 flavour on Catalyst [clon] [catalyst]: 
	URLパスの一番最初を [Blosxom](http://www.blosxom.com/) でいう flavour のように使ってみるという試み。

	    sub prepare_action {
	        my $c = shift;
	    
	        if ( my $path = $c->req->path ) {
	            my ($flavour) = $path =~ m!^([^/]+)!;
	    
	            if ( $flavour !~ /^(search|tag|\d{4})$/ ) {
	                $c->stash->{flavour} = $flavour;
	                $c->stash->{_path}   = $c->req->path;
	    
	                $path =~ s!^$flavour/+!!;
	                $c->req->path( $path );
	            }
	        }
	    
	        $c->NEXT::prepare_action(@_);
	    
	        $c->req->path( delete $c->stash->{_path} ) if $c->stash->{_path};
	        $c->stash->{flavour} ||= $c->config->{default_flavour} || 'html';
	    }

	こんな感じ？

	これで、パスが search, tag, 2005 とか以外は flavour としてあつかわれて、

	    /flavour/tag/clon

	とかでも /tag/clon と同じコントローラが呼ばれる。わかりにく！

	Blosxom は index.flavour とか拡張子で切り分けてたけど、なんか変な flavour 作ると URL がダサいので。

	でもこっちはコントローラで使ってる文字を使えないというのもあるし。

2005-12-06 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:23 よし [clon]: 
	cd ~/workdir/CLON

	したオレがきましたよ。

	* 21:39 flickr [web]: 
	pro アカウントにしたらなんかすごいページ読み込み速くなったんですが。

	tamatama?

	* 19:21 IRC でよばれたら表示 [screen]: 
	<a href="http://www.flickr.com/photos/typester/70807075/" title="Photo Sharing"><img src="http://static.flickr.com/18/70807075_27e5ae20c9_o.jpg" width="280" height="58" alt="GNU screen hardstatus" /></a>

	なんで caution とかいわないで。なんとなく。

	んで elisp は [33rpmさん](http://rhyme.33rpm.jp/blosxom/ "Uno, dos, tres, quatro!") に教えてもらって

	    (add-hook 'riece-keyword-notify-functions
	          (lambda (keyword message) (call-process "touch" nil nil nil "/tmp/riece")))
	    (add-hook 'riece-after-switch-to-channel-functions
	          (lambda (last) (call-process "rm" nil nil nil "/tmp/riece")))

	こんな感じのを .riece/init においておく。これでIRCでキーワード流れると /tmp/riece ができる。
	チャンネルかえると消える。

	    #!/usr/bin/perl
	    
	    use strict;
	    use warnings;
	    
	    $| = 1;
	    
	    while (1) {
	        if (-e '/tmp/riece') {
	            print " Caution!! \n";
	        }
	        else {
	            print "\n";
	        }
	    
	        sleep 1;
	    }

	こんなんを riece.pl として .screenrc には

	    hardstatus alwayslastline "[%02c] %0`%-w%{=b bw}%n %t%{-}%+w %= %?%{=b rw}%2`%{-} %?%1`"
	    
	    backtick 0 0 0 ${HOME}/.screen/backtick.pl
	    backtick 1 0 0 ${HOME}/.screen/netstat.pl
	    backtick 2 0 0 ${HOME}/.screen/riece.pl

	こんな感じで。`%?` でくくられてるところはそのなかのエスケープ文字(この場合 %2` )が展開されるときだけ中を表示するやつ。

	んでこれ消すのにチャンネル変えなきゃいけないのはめんどいこともあるとおもうので

	    #/bin/sh
	    rm /tmp/riece

	とかを delriece.sh とかにして screenrc に

	    bind r exec $HOME/.screen/delriece.sh

	とかしといた。

	* 18:34  [clon]: 
	コードのシンタックスハイライトつけたいなぁ。ここ見ててもコード頭に入らんｗ

	* 18:14 screenrc 読み込みなおし [screen]: 

	    :source $HOME/.screenrc

	知らなかった。いちいち screen 再起してたよ。。

	なんできねーかなとおもって :reload とか適当にいろいろためしてたらみっけた。(man 読みましょう)

	* 17:49 通信状態表示 [screen]: 
	<a href="http://www.flickr.com/photos/typester/70793693/" title="Photo Sharing"><img src="http://static.flickr.com/34/70793693_30fa457611_o.jpg" width="532" height="67" alt="GNU screen hardstatus #3" /></a>

	意味ねええええ。ので多分すぐあきる。

	    #!/usr/bin/perl
	    
	    use strict;
	    use warnings;
	    
	    $|=1;
	    
	    {
	        package StatQue;
	    
	        sub new { bless {}, shift }
	    
	        sub add {
	            my $self = shift;
	            push @{$self->{que}}, shift;
	    
	            shift @{$self->{que}} if @{$self->{que}} >= 11;
	        }
	    
	        sub avg {
	            my $self = shift;
	            my $total;
	            $total += $_ for @{$self->{que}};
	    
	            $total / @{$self->{que}};
	        }
	    }
	    
	    my $in_que  = StatQue->new;
	    my $out_que = StatQue->new;
	    
	    my @stats = grep /.+/, split /:|\s/, qx{ cat /proc/net/dev | grep eth0 };
	    my ( $old_in, $old_out ) = ( $stats[1], $stats[9] );
	    
	    while (1) {
	        sleep 1;
	    
	        @stats = grep /.+/, split /:|\s/, qx{ cat /proc/net/dev | grep eth0 };
	        my ( $new_in, $new_out ) = ( $stats[1], $stats[9] );
	    
	        $in_que->add( $new_in - $old_in );
	        $out_que->add( $new_out - $old_out );
	    
	        printf("in: %.1fKB/s out: %.1fKB/s\n",
	                $in_que->avg / 1024,
	                $out_que->avg / 1024);
	    
	        $old_in  = $new_in;
	        $old_out = $new_out;
	    }

	こんなのを netstat.pl とかしておいて screenrc に

	    backtick 1 0 0 ${HOME}/.screen/netstat.pl

	とする。hardstatus も

	    -hardstatus alwayslastline "[%02c] %`%-w%{=b bw}%n %t%{-}%+w"
	    +hardstatus alwayslastline "[%02c] %0`%-w%{=b bw}%n %t%{-}%+w %= %1`"

	こんな感じで。

	昨日の backtick.pl が ID0 で netstat.pl が ID1 ってことね。

	* 11:00 うおお [life]: 
	vim 関係の日記なにいってるかさっぱりわかんねえええ。

	* 10:44  [life]: 
	出社。

	* 02:41  [life]: 
	退社。

	* 02:37 Clmemo [clmemo] [idea]: 
	clmemo-mode に C-c C-c でタイトルヘッダ行に [s] が入る機能があって、これを改造して [en] とかはいるようにし、そこに英語ログを書くと言うアイデア。

2005-12-05 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:02 caption も always [screen]: 
	[これ](http://linuxlog.de/viewimage.php?image=images/Deifl_07052005081755_netbar.jpg "Deifl_07052005081755_netbar.jpg")いい。

	caption も hardstatus もどっちも always !

	* 20:48 lighttpd's load balancer [lighttpd]: 
	lighttpd のロードバランス機能って誰も試してないのかなぁ。

	一応 fair, hash, round-robin と3種類あって、

	 * fair
	   * 負荷によって振り分ける(デフォルト)
	 * hash
	   * URLのhashで振り分ける(同じURLは必ず同じホストにわけられる)
	   * [Cache Array Routing Protocol](http://www.microsoft.com/japan/Proxy/techinfo/carp.asp "Microsoft Proxy Server - 技術情報 - Cache Array Routing Protocol (CARP) と Microsoft Proxy Server 2.0") ていうアルゴリズムを使ってるらしい。
	 * round-robin
	   * リクエストごとに違うホストへ振り分ける

	設定も非常に簡単。

	    $HTTP["host"] == "www.example.org" {
	      proxy.balance = "fair"
	      proxy.server  = ( ".pl" => ( ( "host" => "192.168.0.2", "port" => 8080 ),
	                                ( "host" => "192.168.0.3" ),
	                                ( "host" => "192.168.0.4" ),
	                                ( "host" => "192.168.0.5", "port" => 81 ) ) )
	    }

	みたいな。バックエンドホストでも普通に VirtualHost が使えるのも○

	[svn.unknownplace.org](http://svn.unknownplace.org/public/)、[dev.unknownplace.org](http://dev.unknownplace.org/public/) でも

	    $HTTP["host"] =~ "^(dev|svn)\.|unknownplace\.org)$" {
	        proxy.server = ( "/" =>
	                          ((
	                           "host" => "127.0.0.1",
	                           "port" => 8080,
	                          ))
	        )
	    }

	とかしてバックエンドの apache2 にそのままとばしてるけど、後ろでも VirtualHost 普通に使えてうまー。

	まぁ、lighttpd の mod_proxy だと svn メソッドとばないので commit できねーのだけど（だめ

	* 18:02  [life]: 
	[33rpmさん](http://rhyme.33rpm.jp/blosxom/ "Uno, dos, tres, quatro!")に elisp おしえてもろた！あとで試す。

	ありがとうございます！！

	* 17:06 エントリ [life]: 
	書くのめんどいなぁ。

	自分にしかわからなくていいこういうメモは本当に楽だね。

	* 15:53 問題 [screen]: 
	1. IRC でキーワード(名前とかね)流れたら hardstatus に出したいけど elisp(riece) わからん。
	  * → elisp わからんけどログ監視すればできそう
	2. カレントウィンドウの encoding を常に表示しときたい。
	  * → まったくわからん

	ボスケテ

	* 15:43 複数 backtick [screen]: 
	hardstatus で `` %0` `` とか `` %1` `` とかで backtick の ID 指定する。

	* 15:38  [screen]: 
	<a href="http://www.flickr.com/photos/typester/70383561/" title="Photo Sharing"><img src="http://static.flickr.com/29/70383561_99a8acdc83_o.jpg" width="300" height="55" alt="GNU screen hardstatus #2" /></a>

	色変えるようにしてみたり。

	    -hardstatus alwayslastline "[%02c] %`%w"
	    +hardstatus alwayslastline "[%02c] %`%-w%{=b bw}%n %t%{-}%+w"

	ボールドにしてるのは PuTTY の色設定との兼ね合い。

	・・メールたまってきた。仕事せねば。

	* 14:53  [life]: 
	イチョウ撮ってきた。

	フィルム最後まで巻ききったときバリッとかっつって根元から切れちゃった模様。カメラごと持ってったら、普段使ってるショボイプリント屋では処理できないとかいわれたのでこわいおっちゃんがいる写真屋で替えカートリッジに入れてもらう。ほんとは現像もやってもらいたかったんだけどこわくていいだせｚ

	昼飯買いに行くついでにカメラもって出たんだけど、昼飯買うの忘れたよ。

	* 12:48 cd -(tab) [zsh]: 
	gorou さん教えてもらう。知らなかった。

	便利すぎ！！

	* 12:40 ユーコンブレンド 100g  [life] [starbucks]: 
	本日のコーヒーきいたらコロンビア（あんまり好きじゃない）だったので。

	今日すっげーいい天気＆なんかイチョウがいい感じ。あとで撮影タイム入れる。

	* 12:21  [screen]: 
	昨日の、こんな感じ。

	<a href="http://www.flickr.com/photos/typester/70321127/" title="Photo Sharing"><img src="http://static.flickr.com/18/70321127_6d9e8259ca_o.jpg" width="300" height="41" alt="hardstatus" /></a>

	エントリかこかな。

	* 11:46 のむヨーグルト 和歌山温州みかん [life]: 
	怖いもの見たさで買ったらまじまじいいいいいいいいいいいいい。

	* 11:23  [life]: 
	会社PCのWindows消してLinux入れようと思う！

	けどどしよっかなぁ。Windowsに戻すときなんかノートンのアカウントとかまた買わなきゃいけない？かも？

	まぁいいよねそんくらい。

	* 11:13  [web]: 
	[hack a day](http://www.hackaday.com/) を subscribe しようとしたら [5022 total subscribers](http://www.bloglines.com/userdir?siteid=568612 "Bloglines | Blog Directory") とかなっててびびる。

	購読してるフィードで一番なんじゃなかろうか。

	* 10:48  [life]: 
	出社。

	* 05:37 恋愛心理診断 [misc]: 
	[@恋愛心理診断](http://www.renaikekkon.com/member/test_psy/gtest01.php)
	
	> [08.unique](http://www.renaikekkon.com/type_psy_g/type08.htm)
	> 
	> きわめて個性的、不思議味わいなヒトです。
	> 
	> いつも直観で稼動中です。
	> 何事もその気にならないと頑固なほど興味を示しませんが、一度ハマるとヒトと違う輝きを発します。
	> たいていは、なんだかわがままっぽいのに不思議と周りから愛されているヒトです。
	> 
	> * 恋愛に関して「あんまり考えたことないなぁ…」と思っています。
	> * 平凡で単調なコトを好みません。
	> * 彼氏（彼女）と自分の好きなように付き合いたい…と思っています。
	> * 天然キャラと思っていると突然大胆なコトができるヒトです。

	* 04:45 $| [perl]: 
	`$| = 1` したらちゃんとうごいた。

	* 04:38  [screen]: 
	さっきのやつだと 60 秒おきの実行以外にも hardstatus を更新するタイミング(新しいウィンドウつくったりとか)のたびに backtick.pl が実行されて重いので

	    #!/usr/bin/perl
	    
	    use strict;
	    use warnings;
	    
	    use LWP::UserAgent;
	    
	    $| = 1;
	    my $ua = LWP::UserAgent->new;
	    
	    while (1) {
	        my ($newmail) = qx{ find $ENV{HOME}/Maildir/new -type f | wc -l } =~ /(\d+)/;
	        my ($newbloglines) =
	            $ua->get('http://rpc.bloglines.com/update?user=Bloglines登録メアド&ver=1')
	               ->content =~ /(\d+)/;
	    
	        print "Mail($newmail) Feed($newbloglines) |\n";
	        sleep 60;
	    }

	とかにして

	    backtick 0 0 0 ${HOME}/.screen/backtick.pl

	としてみる。

	<del>でもなんか screen 起動してすぐは hardstatus にうまくでない。なんでだろうなんでだろう。</del>
	<ins>print 後 STDOUT をフラッシュしなくちゃだめだった。$| を nonzero にセットすればOK！</ins>

	* 04:08 今日のscreenrc [screen]: 
	下記のようなスクリプトを書き

	    #!/usr/bin/perl
	    
	    use strict;
	    use warnings;
	    
	    use LWP::UserAgent;
	    
	    my ($newmail) = qx{ find $ENV{HOME}/Maildir/new -type f | wc -l } =~ /(\d+)/;
	    my ($newbloglines) = LWP::UserAgent->new
	        ->get('http://rpc.bloglines.com/update?user=Bloglines登録メアド&ver=1')
	        ->content =~ /(\d+)/;
	    
	    print "Mail($newmail) Feed($newbloglines) |\n";

	screenrc で

	    hardstatus alwayslastline "[%02c] %`%w"
	    backtick 0 0 60 ${HOME}/.screen/backtick.pl

	とかしてみた。

	mew の biff 切らないとうまく動かないのがあれ。これしてあればいらないけど。

	* 01:20  [life]: 
	なんか Ruby のひとに vim がやたら人気すぎるようなきがするんだけど。

	あの人の影響？ そんなに衝撃をうけるものなのだろうか。

2005-12-04 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 13:18  [life]: 
	うー、かえった。

	中華街で飲んでほとんど始発で帰ってきたのに何でこの時間？ なんか途中千葉とか言う文字見えたんですけどきのせいっすよね。

2005-12-03 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 06:02  [life]: 
	退社。

	* 01:04 デリファレンスのオーバーロード [perl]: 
	Catalyst のぷらぎんかいてて overload もデリファレンスとかでつかうならいいかなとか思った。

	普通の演算子のオーバーロードは C++ とかだとかっけーんだけど、Perl でやるとうまく使わない限りなんか微妙で好きじゃなかったんだけど。デリファレンスのそれは結構なかなかかも。

	    #!/usr/bin/perl
	    
	    use strict;
	    
	    package OverloadTest;
	    
	    use overload (
	        q{""} => sub { shift->{text} },
	        '${}' => sub { shift->{scalar} },
	        '@{}' => sub { shift->{array} },
	        '&{}' => sub { shift->{function} },
	    );
	    
	    
	    sub new {
	        my $self = bless {}, shift;
	    
	        $self->{text}     = 'fooooooooo';
	        $self->{scalar}   = \'heh ;)';
	        $self->{array}    = [qw/blah blah blahhh/];
	        $self->{function} = sub { "bar!!!!" };
	    
	        $self;
	    }
	    
	    
	    package main;
	    use Data::Dumper;
	    
	    my $ol = OverloadTest->new;
	    
	    print Dumper "$ol";
	    print Dumper $$ol;
	    print Dumper &$ol;
	    print Dumper [ @$ol ];

	こんなの。String参照とデリファレンスのオーバーロード。

	wantarray みたいな用途に使えそう。

	ちなみに上のの出力は

	    $VAR1 = 'fooooooooo';
	    $VAR1 = 'heh ;)';
	    $VAR1 = 'bar!!!!';
	    $VAR1 = [
	              'blah',
	              'blah',
	              'blahhh'
	            ];

	こうなる。

2005-12-02 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:56 del.icio.us/fladdict [web]: 

	[del.icio.us/fladdict](http://del.icio.us/fladdict)

	ほとんどのブクマにちゃんとコメントをつけていて非常に見やすい。

	ちゃんと内容みてからブクマしないとなかなかコメントはつけられない。いや、コメントというか自分用の要約みたいなものか。

	これは真似すべきだなぁ。あとで読む的ブクマが多すぎる。

	* 14:17 ほっとレモン [life]: 
	の季節が来ましたよ。

	Mixi でコミュ作ろうとしたらすでにあったよ

	* 13:07 pager [clon]: 
	[Data::Page::Navigation](http://search.cpan.org/~kazeburo/Data-Page-Navigation/) 使うように変更。

	すばらしなぁ。Data::Page ネームスペースでごにょってくれてるのもうれしい。

	* 12:16 super ugly [f1]: 
	なんか来期参戦できないとか。

	琢磨はミッドランドいくのかね。

	* 10:44  [life]: 
	出社。

	* 01:36  [life]: 
	退社。さびー。

2005-12-01 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 21:58 Tab Preview [firefox]: 
	とか言うの入れてみて、一瞬便利かも！ とかおもったけど邪魔なだけだった。

	* 10:55  [life]: 
	出社。

	* 05:15  [life]: 
	退社。

	* 05:03 C-q == ESC-q [zsh]: 
	しらなかったよ。。bindkey -e のときだけかもしれない。

	* 04:08 XML::Simpleのあれ [perl]: 
	って常識だとおもってたんですけど！！

	* 02:44 CLON課題 [clon]: 
	[理想はCLON](http://d.hatena.ne.jp/yseki/20051118#1132272199 "ysekiの日記")とか書いてくれてる日記を発見した。

	しかし、まだ結構未解決な課題が残っていて、なかなか公開できないところ。

	 * DBにキャッシュし、clmemo.txtのmtimeが変わっていたらclmemo.txtを読みに行くのだが性能重視のため最後の2日のデータしか読みに行かない
	   * それ以降のデータが修正された場合現状DBのキャッシュを消すという手段しかない。
	   * それの対応をどうするか
	 * コメントとかそのへん
	   * プラグインにしたほうがよさげ
	   * 仕様未確定
	   * clmemo.txt にコメントを入れるのか？ 別ファイル？ DBにだけ？
	 * Text::Markdown がなんかおかしい
	   * 追うのがめんｄ

	などなど。とか書きつつプラグインの仕様を考えていたりする、いやいやいやまだ仕事あるねんよ。

	* 01:52  [life]: 
	あとっていつだよ。

	sf を[「audioscrobbler」で検索る](http://sourceforge.net/search/?words=audioscrobbler "SourceForge.net: Search")となんかほかにもいろいろおもしろげなものでるなぁ。

	* 01:19 iScrobbler がすごい [software] [music]: 
	会社ではしょうがなく iTunes 使うようにしたのは[前書いた](http://unknownplace.org/memo/2005/11/28#e007 "CLON - 17:34  iTunes")とおりなのだけど、で、[audioscrobbler](http://www.audioscrobbler.com) のぷらぎんいれたわけですよ。

	そしたら iPodLimitarion とかいうドキュメントがついてて、！！！！！って感じに。

	ふぉお、iPod で再生したのも送信できるんだ！！ すげぇ、すげぇよ iScrobbler。

	sourceforge でソース見えるはずだからあとで読むぞー。

2005-11-30 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:41 亜久里 [misc]: 
	それに引き換え亜久里は ugly。

	* 23:39 与田 [misc]: 
	ちょ！ 英語表記 yoda とかめちゃかっけええええ。

	* 23:28 Do, or do not. There is no try. [web]: 
	Mixi から来るメールの X-Mailer。

	Perler にはスターウォーズ好きが多い説ｗ

	* 22:19  [life]: 
	毎週のようにモジュールの typo を指摘されてる今日この頃ですが。今日は自分で見つけました。

	[http://search.cpan.org/src/TYPESTER/Catalyst-Plugin-AtomPP-0.05_03/Todo](http://search.cpan.org/src/TYPESTER/Catalyst-Plugin-AtomPP-0.05_03/Todo)

	この typo 量は kyo さんにインスパイアされすぎという話。

	* 21:25  [web]: 
	下記のネタ元のさらにネタもとのことのはさんのところが興味深い。

	> [RSSリーダー使ってません。 \[絵文録ことのは\]](http://kotonoha.main.jp/2005/11/30RSSReader.html)
	>
	> 確かに「常に巡回するサイトがある程度の数で決まっていて、しかしそのすべてを読むのではなく、一部の必要な記事だけを拾い読みする」という閲覧行動をとる人には、RSSリーダーは必須なのだろう。ただ、自分のサイト閲覧行動はそのパターンに当てはまっていないので、RSSリーダーというツールが必要ないのだと思う。巡回するサイトはどんな記事でも全部読みたいし、拾い読みなら検索で充分だからだ。

	なるほどなぁ。逆に言えばたくさんのサイトを巡回したいからRSSリーダーを使うということもいえる。

	とはいえ、僕は Bloglines をつかっているけれど、Bloglines 内で記事を読んでるわけじゃないのよね。ことのはのひとの言うとおり流し読みだ。

	Bloglines で更新をチェックしつつ、気になった記事があればどんどん別タブに開いておく。それをがーっとおこなったあと、タブを閉じながらひとつづつ読んでいく。

	これは元々 GoinyMyWay メソッドとか Bulk フンフンメソッドとかよばれていたが、最近ではアルファギークメソッドとよばれるものである。

	はてなアンテナとBloglinesの組み合わせは素敵だし、これに対するスマート回答をはてながサービスとして出せる気がするのだけどなぁ。(正直言ってはてなRSSは微妙だと思う)

	* 21:02 情報収集のための11の質問 [web]: 
	[情報収集のための11の質問](http://d.hatena.ne.jp/tomozo3/20051130/1133334916) via [http://del.icio.us/ma.la](http://del.icio.us/ma.la)

	>  1. RSSリーダーを使っていますか?(y/n)
	>        1. (yの場合)何を使用していますか?また、登録サイト数は?
	>        2. (nの場合)使わない理由はなんですか?

	[Bloglines](http://www.bloglines.com/) 使ってます。347 個登録中。


	>  2. アンテナを使っていますか?(y/n)
	>        1. (yの場合)何を使用していますか?又は登録サイト数は?
	>        2. (nの場合)使わない理由はなんですか?

	[はてなアンテナ](http://a.hatena.ne.jp/) と Bloglines の E-Mail subscription 機能を組み合わせて利用中。

	40個くらい登録中。


	>  3. ソーシャルブックマーク(SBM)を使っていますか?(y/n)
	>        1. (yの場合)何を使用していますか?
	>        2. (nの場合)使わない理由はなんですか?

	[del.icio.us](http://del.icio.us/) 利用中。


	>  4. その他情報収集に使っているツールはなんですか?

	IRC ?

	とあとメーリングリスト。


	>  5. 他人にこれはお勧め!と思う方法は?

	Bloglines。


	>  6. 逆にこれはお勧めできないな、と思う方法は?

	RSSリーダーを使わない方法。


	>  7. 情報収集で良く参照するサイトは?

	Bloglines と Google。


	>  8. 自分のブログで良く言及・リンクするサイトは?

	あんまりない。あえて言えば [hail2u.net](http://hail2u.net/) かなぁ。それも少ないけど。


	>  9. 逆にここは参照してはいけない、と思うサイトは?

	宇宙の人のところ。


	> 10. WEB以外で良く情報源にするものは?

	やっべとくにないかもしらん。


	> 11. 最後にあなたが情報収集方法を知りたい人は?

	みやーん。なおやん。さぶてくの面々。

	* 20:52 Catalyst Authentication [catalyst]: 
	もろもろつくったやつ、新しいので書き直すか。

	* 18:19 SVN運用 [web]: 

	> [Sledge::Plugin::TokuLog! - えーマジCVS!!CVSが許されるのは小学生までだよね](http://d.hatena.ne.jp/tokuhirom/20051129/1133240808)
	> 
	> 新機能を全部trunkで開発して、運用をリリースごとにブランチで、というのでもOKです、というかそっちのほうがメジャーかも。

	うちはこれだ。

	ただ大掛かりな変更や新機能の追加にはブランチをきる。trunk はつねに "動くもの" にしておくというルール。

	* 16:37 必須拡張 [firefox]: 
	 * Web Developer
	 * Live HTTP Headers
	 * ScrapBook
	 * Delicious

	次点で

	 * Greasemonkey
	 * IE View
	 * LiveLines

	* 16:11 Firefoxメモ [firefox]: 
	アップデートするごとに違うディレクトリ+プロファイルでインストールするようにしている。

	1.0.3 からやってるみたいだ。つっても 1.5RC からは自動アップデート機能を使っていたのだけど。でもなぜか1.5正式版にはアップデートできなかったのでまた以下の作業をした。

	`C:\Program Files\Firefox\` 以下にバージョン名のサブディレクトリ作ってその中にインスコ。

	プロファイルもバージョン名で新規作成。`firefox.exe -p 1.5` みたいなショートカットも作成しておく。

	んで、新しくできたプロファイルディレクトリには古いプロファイルディレクトリから

	 * bookmarks.html
	 * cert8.db
	 * cookies.txt
	 * formhistory.dat
	 * history.dat
	 * hostperm.1
	 * key3.db
	 * mimeTypes.rdf
	 * prefs.js
	 * signons.txt
	 * user.js

	をコピー。それと chrome ディレクトリ内のユーザーCSSとそれで使ってるファイルもコピー。

	その後、拡張＋テーマインストールで元通り。

	* 14:33 ほりうちこむ with みやじ豚こむ [web] [life]: 
	[hori-uchi.com](http://hori-uchi.com/) の人と昨日またお会いする機会があり、一緒に[みやじ豚](http://blog.livedoor.jp/miyajibuta/)を食らった。すげーうまかった。

	* 13:14  [life]: 
	出社。

2005-11-29 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 15:58  [life]: 
	Nintendo DS と マリオカートDS セットで予約した。

	* 14:24 CLON [clon]: 
	スペイン語で clone の意らしい。

	* 10:59  [life]: 
	出社。

	* 02:40  [life]: 
	退社。

	* 02:26 今日の userChrome.css [firefox]: 

	    /* hide search label on history panel */
	    #history-panel > hbox > label {
	            display: none;
	    }

	Firefox の History Panel の Search ラベル消すの。ノートとかでサイドパネル狭くしてると検索語入力フォームがすげちっちゃくなっちゃうので。

2005-11-28 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:06  [life]: 
	ひさびさに鎌倉マッチポイントへ飯に。

	で、そば飯を注文。

	いつもなら卵抜きでとお願いするのだけど、久しぶりだったので忘れてたらなんか店の人が覚えててくれてちゃんと聞いてくれた！

	ほんと店員てすごい人たちだなぁ。

	某 Rockwells（どこ）の人たちも半端なく人覚えるし。そういえば最近いってないな。

	* 17:34 iTunes [life]: 
	ノートPCのHDD容量がきつくなってきたので、会社用音楽ファイルを Mac mini にうつしたわけだが、iTunes がうんこな件。

	とりあえず今日使ってみて、foobar2000 とくらべて iTunes がだめなところファーストインプレッション:

	 * 音量調節(揃えてくれるのね)がうんこ
	 * 無音とばせない（ボーナストラックあるやつとか無音状態が続くｗ
	 * ホットキーなしんぐ

	結構きびしめりーちゃん

	アルバムシャッフルとかできないと思ってたから思ってたよりはましだったけども。

	* 10:24 ブレックファーストブレンド 100g [starbucks]: 
	あんまうまくねーこれ。つかまｚ

	ごくたまーに飲むならいいかも。

	* 09:05  [life]: 
	出社。

	* 08:06 Blosxom 2.0.1 [blosxom]: 
	とかなんか出てるなｗ

	[http://sourceforge.net/projects/blosxom/](http://sourceforge.net/projects/blosxom/)

	2 系はいいよもうなんもしなくて。みんないじってるよ。

	* 08:00 vodafone [life]: 
	自鯖の SMTP からだと Vodafone にメール送れないみたいだ。もー。

	* 07:48 OpenGL/AL Java bindings [java]: 
	[jake2](http://www.bytonic.de/html/jake2.html) でしったけど、[JOGL](https://jogl.dev.java.net/) とか [JOAL](https://joal.dev.java.net/) とかあんのね。

	* 07:38 delicious拡張 0.5.10 [firefox]: 
	> Changed hotkeys to accommodate Firefox 1.5's Bookmark All Tabs (ctrl+shift+D). The extension's hotkeys are now alt+shift+D (toggle sidebar), alt+shift+S (post current page), and alt+shift+Z (find current page).

	改悪すぎ。サイドバーのほうだけでいいよ。つかわないからなんでもいい。

	alt-shift だとアクセスキーのが優先されてしまう。

2005-11-26 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 05:40 はてなRingのRSS [web]: 
	`<dc:subject>` 消さないでほすぃ。

	* 05:38  [life]: 
	退社。

	* 04:29 dotfiles [life]: 
	編集したらコメント書いておくこと。

	.emacs にはかいてんだけどな。.zshrc 今となってはわからないもの多すぎｗ

2005-11-25 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 16:42 サイコロ [life] [work]: 
	6キター！

	* 12:21 lighttpd 1.4.8 [lighttpd]: 
	debian ディレクトリなくなったー。しょぼーん。

	* 10:52  [life]: 
	出社。

	* 01:30  [life]: 
	退社。

2005-11-24 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:40 clmemo multi language [clmemo] [clon]: 
	日本語でメモすると同時に英語でも書いて、Accept-Language みて切り替えるようにしたい。

	んで、問題になるのが、ファイルフォーマット。

	めんどうなので1ファイル、同じclmemo.txtでできるようにしたい。

	* 22:20 ホームポジション [life]: 
	あんちぽの人が修行してるみたいなの。

	ホームポジションて意識したことないんだけど、僕の場合自然にキーボードに手をおいたとき、左手の小指から順に A E R G に、んで右手の人差し指から順に J I O P というところに置かれてるみたいだ。

	普通は人差し指が F と J ？ になるのがホームポジションらしい。

	* 21:56  [life]: 
	会社メンとタッチフット、じゃなくて、フットサルしてきた。

	うえー、つかれた。こんな体力なくなってるとわ。明日チャリもって3Fまであがれるか怪しい。

	* 16:49 ignore case [zsh] [emacs]: 
	zsh とか emacs の補完で大文字小文字区別しないようにする設定よくみるからちょっとやってみたけど、うざくね？

	たとえば OSX とかで /Users と /usr とか見に行こうとすると、もうっ！ってなる。

	* 13:38  [life]: 
	出社。

	* 11:29  [life]: 
	寝坊したー

	* 00:37 cpan-upload [perl]: 
	めちゃ便利！

2005-11-23 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 15:36  [clmemo]: 
	> [clmemo@aka: Emacs-w3m で複数 URL をタブで一気に開く](http://at-aka.blogspot.com/2005/11/emacs-w3m-url.html)
	>
	> ブログ記事の ChangeLog メモ技術については、まだまだ向上の余地があるので、これからもブログにちょこちょこと書いていきます。

	期待age。

	* 14:37 お [perl]: 
	HTTP::Body::OctetStream 修正された。GJ!

	* 05:02 うー [life]: 
	湿疹キター

	* 03:18  [life]: 
	けんたｒさんに pod の typo (とは言いません)を指摘されたけど、とりあえず退社。

	* 02:16 File::Temp [perl]: 
	HTTP::Body はばぐってるけど、それでつかってる File::Temp はいいな。

2005-11-22 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:59  [catalyst]: 
	んーやっぱ HTTP::Body のバグだな。。

	$self->add したときに $self->{buffer} に append してるのに、File::Temp には毎回全部書き込んじゃってるという。

	* 20:58 C::P::AtomPP 0.05_01 [catalyst]: 
	5.49世代からずっと `$c->req->body` の調子がおかしいわけですよ。

	でかい Content のときなんか変な値が入ってる。

	5.57 時点でもだめだから気づいてねーんだろな。おうのめんでー。HTTP::Body のバグな気がするけど。

	とりあえず `prepare_body_chunk` を上書きして、`$c->req->body` とは別に HTTP::Body つかわずに値を格納しておいてそれを使うようにしたVerを仮リリース。

	* 20:30  [catalyst]: 
	[naoyaのはてなダイアリー - Catalyst::Engine::HTTP::Resterter における自動再起動サーバーの実装](http://d.hatena.ne.jp/naoya/20051122/1132656350)

	こういうの、途中経過をウォッチするのも楽しい。この自動再起動サーバーの実装のときは、File::Find に文句言ったり、vim でタイプするごとに一時ファイル(?)の mtime を更新する(?)のがうんこだけど、それに対応するためにディレクトリの mtime を見るようにしたりとか。

	また、せばすちゃんがはっきり意見いいまくりなのもおもしろい。

	下記は `$c->dump_these` の名前決めのとき

	    <nothingmuch> $c->dumped_on_error ?
	    <sri> ugly
	    <nothingmuch> hmm
	    <mst> $c->dump_self ?
	    <sri> ugly
	    <nothingmuch> dumped_objs ?
	    <sri> ugly

	* 10:44  [life]: 
	出社。

	* 02:48 mini SD [life]: 
	あぶねー、[これ](http://bestkakaku.com/minisd.html "SanDisk SDSDM-1024-A10M 最安値 8790円")買っちゃうところだった。冷静に考えると必要ないのに。

2005-11-21 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:34  [life]: 
	退社。

	* 16:40 import 状況 [ximapd]: 
	    done 1862/34918(  5.3%) elapsed:  62:33 (3753 sec), ETA 1111:02 (66662 sec)

	おそ。。インデックスが大きくなるにつれて速度は落ちていくはずだから ETA はもっと大きくなるよなぁ。何時間コースだろうか。

	* 16:34 クリスマスブレンド 100g [starbucks]: 
	もうそんな時期ですか。

	店員が[この前買った豆](http://unknownplace.org/memo/2005/11/07#e007 "CLON - 13:34  カフェベロナ 226g")覚えててびびる。

	* 15:40 import [ximapd]: 
	おわんねー。3時間くらいかかって約4000通くらい。cat で渡してるのが遅い？

	とりあえずどこまで進んだのかわかんないのでいったん終了して、下記のようなスクリプトかいて import 状況わかるようにしてリトライ。

	    #!/usr/bin/perl
	    
	    use strict;
	    use warnings;
	    use Readonly;
	    
	    use Time::Progress;
	    use File::Find;
	    
	    Readonly my $Maildir => '/home/typester/Maildir/cur';
	    
	    my $count    = qx{ find $Maildir | wc -l };
	    my $progress = Time::Progress->new;
	    
	    $count =~ s/\s*//gs;
	    
	    $progress->attr( min => 1, max => $count );
	    
	    my $i = 0;
	    
	    my $find = sub {
	        $i++;
	        return unless -f $File::Find::name;
	        qx{ cat $File::Find::name | ximapd --import };
	        print $progress->report( "done $i/$count(%p) elapsed: %L (%l sec), ETA %E (%e sec)\r", $i );
	    };
	    
	    $progress->restart;
	    find( $find, $Maildir );

	* 13:47 WBS [media]: 
	本日の WBS で弊社サービスが紹介されるらしい。(もう書いていいんだよね？)

	テレビ東京の取材が来たときちょうど爆睡してて、そこを撮られたらしいが。。どうかでませんように。

	* 13:14 svk depotpath 補完 #2 [zsh]: 
	と思ったら[公式サイトにあった](http://svk.elixus.org/?SVKPathCompletion "SVKPathCompletion - Kwiki")。bash 用と zsh 用。すばらし！

	* 13:10 svk depotpath 補完 [zsh]: 
	誰か作ってないかなー。

	* 12:37 ximapd [ximapd]: 
	入れてみる。0.0.1 以来だ。

	メールなくなるの怖いので

	    $ for fn in ~/Maildir/cur/*; do cat $fn | ximapd --import; done

	とかしてインポート中。何分かかるかな。

	* 10:38  [life]: 
	出社。

	* 04:42 ふおぉ [web]: 
	[あんちぽすげー](http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/antipop/20051120/1132454885 "はてなブックマーク - antipop - Synergy マジやばい")ｗ

2005-11-20 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 15:25 Googleあな [web]: 
	Safari カウントされないな

	* 06:48 はやぶさ [life]: 
	眠いのだけど、はやぶさが気になって寝れない。

	* 06:45 cat stuff [life]: 
	\#catalyst でよく cat なんとかとかってのがよく出てきて、なんだろなとか思ってたんだけど、単純に Catalyst の略かｙ

	* 04:31 ファイル変数 [emacs]: 
	昨日の [emacs の文字化けの件](http://unknownplace.org/memo/2005/11/19#e005 "CLON - 23:35  CLON")についてメールをもらった。

	ファイル変数で文字コードを指定してやればいいのではないか、とのこと。

	試してみたが、だめだった。やっぱ化ける。( PuTTY では ? とみえる)
	そもそも <del>`C-f Enter c`</del> <ins>`C-x Enter c`</ins> して utf-8 を指定してから開いた場合でも化けるので、文字コード判別にしっぱいとかじゃなくなんかもっと根本的な理由なきもする。

	でもファイル変数自体を知らなかったのでよかった（だめ

	あと、CLON もファイル変数かかれててもそれまでパースしちゃわないようにした。
	(空行以外でかつタブで始まっていない行を無視するようにしただけだけど)

	* 01:43 屋根裏生活 [life]: 
	快適。ぽかぽか。

	でも窓がないからずっとこもってると時間がわからなくなる罠。

2005-11-19 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 23:35 CLON [clon]: 
	clmemo.txt の自体の文字コードを utf-8 にしていたけど、うちの emacs だと「→」とか「○」とかの記号がファイル開きなおすと化けるので、ファイルは euc で DB 突っ込むときに変換するようにした。

	Text::Ufyu はやっぱり機能が足りず不満を感じるようになってきたので、Text::Markdown にもどした。
	なんか挙動がおかしかった部分は、markdown に渡すデータの最初に改行入れたらなんか直った。

	* 19:26 MIME::Lite::TT::HTML::Japanese [perl]: 
	horiuchi さんの MIME::Lite::TT::Japanese を改造というか参考というかして、おんなじ様な感じで HTML メール作れるやつを作った。

	* 05:50  [baseball]: 
	石井一久にはがっかりだ。

	ヤクルトもどんねーならメジャーのこれよ。

	* 05:13 屋根裏へ移住 [life]: 
	部屋じゃ広すぎてお気に入りの[デロンギヒーター](http://www.amazon.co.jp/exec/obidos/ASIN/B000BHGFD8/unknownplace-22 "Amazon.co.jp：Delonghi オイル・ラジエーターヒーター 061221TEC X字 6枚フィン: ホーム&キッチン")が使えないので屋根裏に住むことにした。

	天井断熱材むき出しでこわいお

	* 04:57  [life]: 
	退社。
	
2005-11-18 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:24 neighborhood 機能 [idea]: 
	del.icio.us にあったらいいな。last.fm ぽいやつ。

	* 13:54 コーヒー VS キーボード [life] [device]: 

	> [スラッシュドット ジャパン | コーヒーをこぼしても平気なキーボード「頑丈打」](http://slashdot.jp/article.pl?sid=05/11/18/0419206)
	
	宿敵すぎよね。タンブラー使うようにしてからだいぶこぼさなくなったけど(それでもこないだこぼした

	我が家のキーボードにもひとつ[コーヒーをこぼしても大丈夫なの](http://www.tg3electronics.com/products/bl82.php "Backlit Illuminated Keyboards From TG3 Electronics")がいる。

	Cherryタッチになじめなくてつかってないのだけど。

	* 11:09  [life]: 
	出社。

	* 02:04  [life]: 
	退社。

	* 01:20 遅レスにまじれす [perl] [catalyst]: 
	[Rails びいきの Catalyst ファースト・インプレッション](http://d.hatena.ne.jp/babie/20051117#p6) にこっそりコメントしてみる。

	> 開発スピードがめっちゃ速い

	なんつっても開発者がにーｔ

	
	> 非互換あるし。lib/appname/C/ -> lib/appname/Controller/ とか。

	C → Controller てのは Helper で生成されるデフォルトのものが変わっただけで、今も昔もどちらの名前でもちゃんと使える。

	`-short` オプションつければ従来どおり。

	5.33 → 5.5 は Catalyst 本体内部をいじってるようなプログラム以外のアプリであれば問題なくそのまま動く。


	> 人柱感

	まだまだ開発者がすさまじくアクティブなので仕様がかわりまくるというのがありますね


	> なんでスクリプトに appname が全部ついているんだろう？　だるー。いらんだろ。

	make install したとき用です。でも正直やるやついねーので微妙です。

	このへんはもう少し話し合うべき。Catalystアプリのインストールと配布方法について。(今のMakefileはひどすぎる)


	> root以下云々

	ファイル名を省略するようなプラグインもあるし、暗黙の了解とかもないよ。好きなように使うよ。


	> URI とファイルパス・関数名が連動してない。

	これも人それぞれですよね。連動さすこともできるし、全部1パッケージに収めることもできるし。

	そんな感じで。

	Rails びいきっていうわりにあんまりたたいてない！

	* 00:30 autrijus movie on nano [life]: 
	![oscon05_autrijus](http://static.flickr.com/24/64203825_7570f6a7a4_m.jpg)

2005-11-17 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:35 iPodLinux on nano [life] [linux]: 
	試してみた。

	素晴らしい。おもちゃが増えたlol

	動画再生もすげ滑らかで、非圧縮AVIで容量食うのがあれだけど、もっとしょぼいのを想像してたので驚いた。iDoom は操作むずすぎ。

	ちゃんとブートローダーで純正 firmware と iPodLinux とを簡単に切り替えられるようになっているのもポイント高い。入れなきゃ損っていう。

	* 16:14 違った [clon]: 
	If-Modified-Since の処理がおかしくてステータス 304  にしてないのに auto で偽返してるのかと思ったけど違って、ステータス 200、$c->res-＞body にもちゃんと正しい出力がセットされてるのにブラウザから見ると表示が空になる現象。

	lighttpd の compress モジュールはずしたら動いた。なんすかなんすかー。

	* 15:29  [clon]: 
	If-Modified-Since の扱いかその周りの処理がおかしい！

	* 10:41  [life]: 
	出社。

	* 03:49 vnc2swf [software]: 
	[vnc2swf](http://www.unixuser.org/~euske/vnc2swf/)

	試した。すっげい。軽っ！

	再生コントロールを javascript でやるようになってるのも Good。

	* 03:03  [life]: 
	退社。

2005-11-16 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 18:38 perldoc perllocal [perl]: 
	モジュールのインストール履歴表示。

	* 18:22 ValueDomain [web]: 
	eNom のネームサーバーじゃなくて ValueDomain のそれを使ってる場合 TTL 値を自分で設定できるようになってる。

	いつのまに！

	* 13:43 たいよぉぉぉ [life] [game]: 
	やっと最初のボスたおせた！

	* 11:44 Google Analytics [web]: 
	> データの待機中: unknownplace.org
	> Analytics を正常にインストールし、データの収集を開始しました。 最初のレポートは 12 時間以内に表示できます。

	で、すでに40時間ほどたってる件。

	* 01:55  [life]: 
	退社。

2005-11-15 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 11:06  [life] [game]: 
	今日も太陽出てねー。あとなにこの寒さ

	* 10:34  [life]: 
	出社。

	* 01:09 ボクらの太陽 [life] [game]: 
	おいおい、太陽の光ないと1面(?)すらクリアできねーじゃねーか！

	昼間ぼくたいタイムつくるしかないかね、こりゃ。

2005-11-14 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:52  [life]: 
	退社。

	* 10:30  [life]: 
	出社。

	* 09:40 やかんからだき [life]: 
	またやっちゃったー。

	といってもうちのコンロはなんか空炊き防止装置（？）みたいなのがついてて勝手に火とまるんだけど、でも水がなくなるまで火はついてるっぽいのでガス代があれなことに。

	人のやかんなのに、このコンロじゃなかったら何回焦がしてるかわからん:P

	* 06:53 infobot [irc]: 
	irc.perl.org にいる purl っていう bot いいなぁ。

	[infobot](http://www.infobot.org/) かそれの派生な感じなんだけど。

	これでさらに日本語つかえるようになったらめちゃくちゃあついけど、日本語の構文的にかなり使いかたを限定しないと難しい気もする。

	* 06:45  [debian]: 
	なんとなく `apt-cache search irc bot` とかしてみたら

	- [madoka](http://packages.debian.org/madoka) - IRC personal proxy, stationing, logger and bot program (pirc).
	- [nadoka](http://packages.debian.org/nadoka) - IRC logger, monitor and proxy program ("bot") in Ruby
	- [plum](http://packages.debian.org/plum) - IRC proxy, stationing, logging, and bot program (pirc).

	あたりが含まれててびっくり。

	* 01:18  [life] [firefox]: 
	Space キーでスクロールというかページダウンは使ってたけど、Shift-Space で逆になるのね！

	* 01:03 伊藤智 [life]: 
	中里スレにあがってる動画(画質悪いほう)やばすぎ。

	しかしこういう球なげるやつは全員怪我で死んで行ってる気がする。与田、今中、伊藤。。
	フォームに欠陥があるのかし？

	藤川や中里もそうなっちゃうのかなぁ。

2005-11-12 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 00:55  [life]: 
	退社。

2005-11-11 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 15:25 テレ東 [life]: 
	の人が取材にきてる。

	WBS! WBS!!

	* 14:03 LocalRegex [catalyst]: 
	個人的には、Regex と LocalRegex より、GlobalRegex と Regex のがいいなぁ。

	* 13:28  [web]: 
	[http://web2.0validator.com/](http://web2.0validator.com/)

	> The score for [http://unknownplace.org/memo/](http://unknownplace.org/memo/) is 3 out of 12
	> 
	>  - Refers to mash-ups ?  No
	>  - Attempts to be XHTML Strict ?  No
	>  - Has favicon ?  No
	>  - Uses Cascading Style Sheets?  Yes!
	>  - Appears to be built using Ruby on Rails ?  No
	>  - Refers to VCs ?  No
	>  - Mentions Cool Words ?  No
	>  - Has prototype.js ?  Yes!
	>  - Actually mentions Web 2.0 ?  No
	>  - Mentions RDF and the Semantic Web?  No
	>  - Validates as XHTML 1.1 ?  Yes!
	>  - Mentions 30 Second Rule and Web 2.0 ?  No
	
	* 10:39  [life]: 
	出社。

	* 02:29  [life]: 
	退社。

	* 01:44 Catalyst 5.49_04 [catalyst]: 
	もうソース見るとぜんぜんちがってて、あれげ。

	週末みなおす。だいぶかっこよくなってることはたしか。

	* 01:00 GB micro [life]:
	購入。ファミコンver。

	ソフトは[ボクタイ](http://www.amazon.co.jp/exec/obidos/ASIN/B000BDEJ1W/unknownplace-22 "Amazon.co.jp：ボクらの太陽 (コナミ ザ ベスト): ゲーム")をチョイス。

2005-11-10 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 12:31 user.js [firefox]: 
	なんか設定戻っちゃうなとか思ったら、user.js で指定してあるところだった。

	* 12:04  [life]: 
	会議後、午前中寝て過ごしｔ

	* 09:30  [life]: 
	出社。

	* 01:55  [life]: 
	退社。

2005-11-09 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 22:52 かえった [life]: 
	なんか机が軽い[いじめ](/static/images/051109/05-11-09_22-47.jpg "いじめ")にあってた！

	世知辛い世の中だ。

	* 17:57 svn vs svk [svn]: 
	ひさびさに svn 使ったのだけど、作業コピーにいくつかファイルを追加して

	    svn add .

	とかしたら

	    $ svn add .
	    svn: warning: '.' is already under version control

	とかいいよんの！ なにこのばか。

	svk なら追加したファイルだけ賢く追加してくれるのに。

	* 16:21 仕事 [life]: 
	楽しくてしょうがないとおもってたけど、そうでない人もいるみたい。

	全員が好きなことをできる集団というのはなかなかできないの。

	* 15:54 肘掛 [life]: 
	って嫌いだったけど、あるといいね。

	* 10:36  [life]: 
	出社。ハテナオヤのいすゲットだぜ。

	* 00:22  [life]: 
	そこーねるぜ。


2005-11-08 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 23:00  [life]: 
	退社。つ、つかれた

	* 05:48 かたりすたー [misc]: 
	騙りster。

	* 05:05 Module::Build [perl]: 
	colinux (sid) では普通に使えてるが自鯖 (sarge) だと make distmeta が通らない。

	追おうかと思ったけど、Developer Release 使ったら動いたからいいや。

	つかもー5時かよ、やべー。

	* 00:27 このメモもはじめてはや 1ヶ月 [clmemo]: 
	このエントリを入れて

	- エントリを書いた日数: 33 日
	- エントリ数: 209

	6.3 エントリ / 日。 すげなぁ。

	* 00:23 だめなところ [life]: 
	時間の見積もりが甘い。

	いろんなところで期限を決めてそれを守る練習をする。

	期限を守る練習ではなく、期限を適切に決められるようにする練習。

2005-11-07 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 22:31 はてなring [web]: 
	よっしゃー、subtech リングに登録したらなんか違うブログが自分のブログになった！

	* 17:49 やっぱりでかい [thinkpad]: 
	もう何ヶ月もつかってるけど、ThinkPad x41 のキーボードはでかいなぁ。うっちにっくい。

	前の ThinkPad iSeries 1124 はもう一回り小さくてちょうど良い感じだったのに。

	レノボさん、Sシリーズ復活おねがいしますぜひ。

	* 13:34 カフェベロナ 226g [life] [starbucks]: 
	袋ゲットするために置いてあるのを買う。挽いてもらうには多いのだけど。

	本日のコーヒーはスマトラだったのに試飲でくれたのはガテマラだった謎。

	* 10:50 emacs [life]: 
	結局下記のは、font-lock の設定いじった。

	`font-lock-comment-face` がおかしかったぽい。foreground と同じ色になっちゃってた。PuTTY 上では表示できない色になってたのかな？

	それでわかったこと:

	- PuTTY 経由で `M-x list-colors-display` すると 8 色しかでない。
	- bold は別の色を割り当てるように PuTTY 側で指定しているので実質16色使える。

	* 10:03 のーーー [life]: 
	洗って乾かしてあったスタバの豆袋を誰かにすてらてたorz

	ありえない。。

	* 09:11 ぎゃーー [life] [emacs]: 
	自鯖の emacs のバージョン古くて、cperl-mode でコメント(pod部分)いろわけされねー。もーなんだよ。

	関数ごとに

	    =item name
	    
	    =cut

	とかつけてるから、これすげみにく。リビルドっすかリビルドっすか。

	ちなみに今の自鯖に入ってるのは

	    GNU Emacs 22.0.50.3 (i686-pc-linux-gnu) of 2005-04-19

	colinux のは

	    GNU Emacs 22.0.50.1 (i486-pc-linux-gnu, X toolkit, Xaw3d scroll bars) of 2005-11-04 on pacem, modified by Debian

	あれ。。？

	* 08:59 ほんたった [life]: 
	使いこなせません :(

	* 08:56  [life]: 
	つわけで出社。

	途中バスの運転手がいい感じに道を譲ってくれて気分が良い。鎌倉の車はチャリにやさしいなぁ。

	* 08:21 自鯖 [life]: 
	普段はすべてノートのcolinux上の emacs ( + shfs ) で作業していたのだが、先週ずっと会社のネット状態がわるく切れまくり、emacs で shfs 経由で何か開いていると回線が切れるたびにしばらく固まるとかいう、すばらしく作業効率のいい状態になっていたので、今週は自鯖で作業すべく、環境構築した。

	つっても dot ファイルと elisp 同期取っただけ！

	つーか、emacs が軽すぎな件。やっぱ colinux だと重いんだなぁ（いまさら

2005-11-06 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 21:54  [life]: 
	集中できない。会社いこっかなぁ。

	* 19:42  [life] [music]: 
	OCEANLANE 聞いてたら Savege Garden 思い出した。

	けど CD 2枚とも行方不明 [:悲しい:]

	> I knew I loved you before I met you.

	とかよく聞いてたなぁ。若かった（ｗ

	* 18:55 Firefox 1.5RC [firefox]: 
	挙動不審。

	アドレスバーとページ内検索周り。beta2 のが安定してるきがすｒ

	* 08:53 LocalRegex [catalyst]: 
	キター

	* 08:40 はてなRSS [web]: 
	[はてなRSS](http://r.hatena.ne.jp/) って description 空だと適当に全文のほうから生成して表示してくれるのか。

	めんどくてここの RSS を <description>...</description> とかしてたのいみねーので変更した！

	* 06:37 Tropyクローン [life]: 
	出遅れた感まんさいですが、とりあえず作っとけっていう流れなのでつくっといた。

	[Clypy](http://clypy.unknownplace.org/help "Help - Clypy")。

	30分くらいでできるかと思いきや、なんかいろいろ変更してたら1時間くらいかかった。楽しようとして Textile つかったら全然楽じゃなかったという。

	Catalyst 5.49 で作ってるのでそのままじゃ動かないかも。といいつつ実際動かしてるところは 5.33。

	新しい親クラスの Catalyst::Controller::Base とかを Catalayst::Base にかえるのと `$c->forward('View::TT')` を `$c->forward('Clypy::View::TT')` にすれば動く。めどい。

	オレが見たときはすでに本家はみえなくなってたのでなおやさんとことごろうさんとこのまねっこ。

2005-11-05 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 21:04 Catalyst 5.49_03 [catalyst]: 
	    $c->forward('View::TT')

	とかできるようになった。

	* 06:01 もー [life]: 
	また余所行きの口調でメモ書いてたな？

	* 05:30  [life]: 
	退社。

	あ、

	* 05:20 サブテクウォチャー [subtech]: 
	[Subtech Watcher](http://unknownplace.org/subtechw/) とか作ってみた。

	サブテクっぽい人のブクマトラッカー。すげー適当に作ったなぁ。

	ソースは[この辺](http://svn.unknownplace.org/public/Alpher/trunk/ "svn.unknownplace.org : /Alpher/trunk")。alpher_job.pl を CRON でまわしてます。

	* 00:32 複数dc:subject [perl] [rss]: 
	はてなブックマークみたいな dc:subject が複数ある RSS は XML::Feed とか XML::RSS じゃうまくパースできないので超ハックしてみた。

	    while ($rss =~ s!<dc:subject>(.*?)</dc:subject>\s*<dc:subject>(.*?)</dc:subject>!<dc:subject>$1, $2</dc:subject>!gs) { }

	とかしてから渡す（ぉ

	かっこよすぎ。もっとうまい書き方ないのかな。

	でもいまさら RSS パーサーとかかくのめんどいしね。XML::Simple ですらめんどい。

2005-11-04 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:45 だめだ [life]: 
	おなかいっぱいで集中できない。もーあそぶぞ！

	そいや、[この辺](http://unknownplace.org/memo/2005/10/23#e003 "CLON - 12:10  FF4")でやってた FF4 は まどうせん 手に入れたとこで止まってる。

	なんかいきなり敵とか強くなるし！ でも LV 上げとかだるいし。

	FF は全滅すると前のセーブまで戻されるのがつらいねー。ドラクエならとにかく突っ込んでけば、全滅しても経験値は無駄にならないし（ぉ

	* 14:38  [life]: 
	そろそろ仕事しなければ！！おしゃー

	夜やること:
	 - [SVN レポジトリ](http://svn.unknownplace.org/public/)の XSLT 書く。
	 - CLON で 404 のときなんかコンテンツ出すようにする。
	 - 他

	* 14:13 lighttpd 1.4.7 [lighttpd]: 
	debian ディレクトリ更新されてないよ！！

	* 13:07 // 演算子 [perl] [perl6]: 
	javascript 書いてて思ったが、コメントアウトと混同しそう。

	* 12:25 OCEANLANE - KISS&KILL [music]: 
	隣の人が速攻ゲットしてたので速攻借りる。

	[freedb 日本語](http://freedbtest.dyndns.org/) に登録されてる情報が OCEANKANE とかって typo してる。あせりすぎ！

	* 10:46  [life]: 
	出社。

	* 05:19 Catalyst 5.49_03 [catalyst]: 
	変更されまくり、ぜんぜん RC じゃねーなｗ

	* 04:12  [life]: 
	退社。

	* 01:39 Y!Maps API [web] [yahoo]: 
	Flash からつかえる API は素敵だなぁ。

	* 00:46 CLONの読み [clon]: 
	特に考えてなくて自分では くろん とか呼んでたのだけど、しーえるおん説もあるらしい。

2005-11-03 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 18:54 検索機能 [clon]: 
	適当につけました。SQL::Abstractドリルとかほっし。

	検索結果ないときページでないのは仕様。

	* 18:06  [clon]: 
	そろそろ検索必要

	* 16:44 shibuya.pm #6 感想 [perl] [shibuya.pm]: 

	Perl で ICFP
	
	- 道に迷って遅刻して最初から聞けなくて残念。なんか面白そうだったのに。
	- Perlは遅い
	- Haskellすごい


	Six Apart and Perl

	- アメリカオフィスひろい＆かっけえ
	- その分日本オフィスが
	- foobar。やっぱ日本人とは感覚が違うなぁ。おもしろい。
	- LiveJournal の話は興味深かった。
	-- Perlbal
	-- MogileFS
	- 開発工程の段階わけもなるほどなぁ。参考にする。
	- でも subversion の使い方は微妙。


	Catalyst関係

	- すごく微妙な感じ。


	prototype.js と Perl で Ajax

	- プレゼンうまい
	- でも prototype.js 知ってる人には特に目新しい情報がなかったのが。
	- JSAN 関係に触れても面白かったかも。


	Pugs でお手軽 Perl6 入門

	- pugs いれてみようとおもった。
	- pxperl すごい
	- monadius 話には聞いてたけどあそこまでとはｗ
	- pugs 上で JSAN モジュールが動くとかって話も。。すげ
	- Haskellすｇ	


	実は初めての参加だったり(MLにも数日前に入ってみたばかり)して、新鮮だった。

	場所わからなすぎだよ。18時前に神保町ついてたのに何で遅刻しますか。

	[hori-uchi.com](http://hori-uchi.com/) の中の人はイケメン。でも持ち歩いてる iPod 動画はえろい

	[clouder](http://clouder.jp/yoshiki/mt/ "Clouder::Blogger") の人と写真撮った。

	subtech 界隈の人たちが酔っ払いに絡まれて逃げるところを他人の振りして写真撮った。

	* 15:36  [life]: 
	出社。

	* 06:54  [life]: 
	ぷむから帰還。感想はあとで。

	コーディング途中の画面がそのままになっててちょっとなえる。

	退社。

2005-11-02 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 15:22 Netscape [life]: 
	「Netscape 用がどうの…」とかいう会話が聞こえた。

	この業界でいまどき Netscape 用とかいう人がいるとは。

	* 11:06  [life]: 
	出社。

	* 04:08  [life]: 
	退社。

	* 04:06 Basic認証ぷらぎん [catalyst]: 
	つくた。C::P::Authentication::CDBI つかって Basic 認証するのね。

2005-11-01 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 22:30 document.title == undefined on Safari [javascript]: 
	Safari では application/xhtml+xml なコンテンツでは document.title は扱えないみたいだ。

	なので下記スクリプトもごちゃごちゃっと修正。めどい。

	* 17:16 片言の日本語 [life]: 
	Skype で busy にしてるにもかかわらず、日本語を勉強中だという大陸の方からチャットが。

	英語のチャットもきびしいけど、片言の日本語使いを相手にするのも大変だなぁ。

	こっちまで片言になるという（ｗ

	* 16:50 title 置換スクリプト [javascript] [clon]: 
	まらさんがここブックマークしてて気づいたけど、このサイトエントリ指定してURL飛んでもページタイトルは CLON のままでわかりにくい＆ブクマしずらい。

	とおもってとりあえずエントリ指定したURLのときはタイトルを置換するようにしてみた。これで少しはましになるかしらん。

	* 14:05  [life]: 
	ほんたったつかうのむずかしー。

	* 13:41 ほんたった [life]: 
	とどいたー

	* 12:42 弁当 [life]: 
	キムチ何とか弁当とか食ったらすげーにおいできまずい。

	* 12:41 なにこの言葉遣い [life]: 
	何でおれ個人メモなのに敬語になってますか？

	* 11:01 Catalyst with JSAN [catalyst]: 
	trunk に Catalyst::(Plugin|Helper)::JSAN とかあがってますね。

	    myapp_create.pl JSAN

	とかすると script ディレクトリに myapp_jsan.pl とかいう JSAN Shell のラッパができて、そこから myapp で使う JSAN モジュールを簡単に入れられると言う。

	これなかなかいいな。便利！ IRC のログを見る限りでは昨日 #jsan で sri と alias のディスカッションがあったみたいだ。後で読もう。

	* 11:00  [life]: 
	出社。

	* 01:22 赤い [life]: 
	空に見えるやたら赤い(つかオレンジ)星が、あれが木星ですか？

	* 01:21  [life]: 
	家ついたら鍵忘れた事に気づいて、会社まで無駄に一往復したよ。

	何かの修行ですか？

	* 00:30  [life]: 
	退社。

	* 00:26 CodingFontTobi1改造版 [font]: 
	[ナイス杉](http://beatsync.net/bayside/memo/log20051031.html "beatsync.net : trick or treat?")。これ参考に明日早起きできたらやってみる。

2005-10-31 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 14:47 ハウスブレンド 100g [life] [starbucks]: 
	飲んだことないのが結構あるけど、めんどいので、本日のコーヒーの豆を買うことにした。

	* 09:39  [life]: 
	うー。目の調子が悪い。

	* 09:13 windmove.el [emacs]: 
	    (setq windmove-wrap-around t)
	    (global-set-key "\C-\M-h" 'windmove-left)
	    (global-set-key "\C-\M-j" 'windmove-down)
	    (global-set-key "\C-\M-k" 'windmove-up)
	    (global-set-key "\C-\M-l" 'windmove-right)

	結局こんな感じに。ここだけ vi バインド！

	\C-\M-(b|f|n|p) とかしたら f や b で指が死にそうだったの。

	* 09:00  [life]: 
	出社。

2005-10-30 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 19:49 windmove.el のキーバインド [emacs]: 
	riece のために導入したはいいけど、キーバインド設定がむずい。悩む。

	(Shift or Meta) + カーソルキー ってしてる人が多いみたいだけどそれはやだなぁ。ううーん。

	* 18:12 長所診断 [misc]: 
	[あなたの長所診断します](http://www.kct.ne.jp/~success/0files/javatest.html)

	> あなたの長所は芸術的なすばらしい感性です。
	> 
	> あなたは上品さと優雅さ、ユニークな表現力と繊細な感性を持った、魅力的な人間です。きわめて同情心に厚いあなたは鋭い感性で他人の痛みをよく理解し、辛抱強く支えます。そして直感力に優れていて、創造的なので芸術や文学などの分野ですばらしい業績を上げます。
	> 
	> あなたの芸術的センスは、まわりの人も認めているはずです。

	> あなたを象徴する動物は・・・
	> 美しいクジャクです。

	> さらに長所を伸ばすには
	>
	> 平凡さや単調さを嫌うあなたは、心の浮き沈みが激しいことがあります。実際以上に大げさに表現し、落ち込みや高揚感を増大させて、周囲を困惑させることもあります。また悲観的になりやすく、うまくいかないと引きこもろうとします。
	> しかし逆に、自分の感情さえコントロールできれば、もともと芸術性の高いあなたは、人のできないような創造的な仕事をすることができます。そのためには、人が嫉妬するような自分の長所を見つけ、それに自信を持つことが必要です。自分の行った仕事を肯定的に評価すれば、自分には日頃感じているよりも、はるかにすばらしい能力があることに気づくでしょう。

	* 14:22 今日のzshrc [life] [zsh]: 
	    function viewlastlog () {
	        find ~/tiarra/log/$1 | tail -1 | xargs lv
	    }

	追加。IRC指定のチャンネルの最後の日のログひらくの

	* 05:06 メール検索 [life]: 
	mew 最新版はメール検索に namazu 以外にも [GoogleDesktop や Spotlight を利用できる](http://mew.org/beta/info/mew_65.html "Mew (Messaging in the Emacs World): dbsearch")。

	あと mew で imap 使ってると [mew-gigi.el](http://tech.yappo.jp/rast/ "Rast") がうまく動かんです。gigi 自体は使えてるのだけど。

	ソース見たら +hogehoge/.imap/inbox とかみたいにわたしてるからそこを % になるようにしたり %inbox になるようにしてみたけどだめだ。

	んーんー。そこうまく書き換えればいいだけだと思うんだけど。(mew-gigi.el:73 の format のとこ)

2005-10-29 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 18:53  [life]: 
	meadow 使うようにしてから不便なとこ

	- colinux の zsh から emacsclient できない

	なので、meadow から dired 使うわけだがなれねー。ハテナオヤとかは dired マンセーみたいなこと言ってるのでなれればいいのかなぁ。

	つっても便利なところのほうが多いので meadow 使うけど！

	* 03:45  [life]: 
	退社。

2005-10-28 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 14:13  [life]: 
	隣のい○べさんから[ハサミ男](http://www.amazon.co.jp/exec/obidos/ASIN/4062735229/unknownplace-22 "Amazon.co.jp：本： ハサミ男講談社文庫")借りた！

	* 12:38 navi2ch とか riece #2 [meadow]: 
	cygwin いらなかった！

	navi2ch は [www.gzip.org](http://www.gzip.org/) とかから Windows 用のバイナリとってきてパスとおってるとこか Meadow の bin ディレクトリに置いとけばOK!

	riece は普通に入った（ぉ

	    meadow.exe -batch -f batch-bite-compile riece/*.el

	* 10:41  [life]: 
	出社。

	* 04:06 navi2ch とか riece [meadow]: 
	いれようとしたけど、どっちも cygwin いるぽいなぁ。

	riece はインストに、navi2ch は gzip に。colinux がある今、cygwin いれたくねっす。容量無駄すぎ。

	* 02:07 謎エラー解決 [meadow]: 
	[ここ](http://unknownplace.org/memo/2005/10/28#e002 "Meadow 素敵 #2 - CLON")の謎エラーは font-lock-なんちゃらや cperl-なんちゃらというフェイス名を使う前に

	    (require 'font-lock)
	    (require 'cperl-mode)

	とか書いとけばOK!

	* 01:15  [life]: 
	退社。

	* 01:11 Mew on Meadow #2 [mew] [meadow]: 
	メール送ったら、Date ヘッダが

	    Date: Fri, 28 Oct 2005 00:52:58 +0900 (東京 (標準時))

	とかなっててびびる。環境変数で `TZ=JST-9` とかをちゃんと指定しておかないとだめみたいだ。

	`mew-smtp-ssh-server` がさり気に便利。

	* 00:31 Mew on Meadow [mew] [meadow]: 
	とりあえずサーバー上ではなくなってしまったので結局今までの Becky! と同様 imap-ssl 経由でメールを読むことになった。

	最初、

	    (setq mew-imap-server "example.com")
	    (setq mew-imap-ssl t)
	    (setq mew-imap-delete nil)

	とかしてみたら、[stunnel](http://www.stunnel.org/) がないよ！ とか言うエラー。

	stunnel ダウンロードしても一回やったら今度は証明書の検証に失敗した系のエラー。

	一応うちは [CACert](http://www.cacert.org/) の証明書を利用しているので、ここのルート証明書を stunnel に読ませられればいいはずなんだけど、やりかたわかんねの。

	結局、PuTTY の plink.exe をつかって ssh 経由でサーバーに接続してから imap、という感じになった。pageant.exe 立ち上げた状態にしておかないとだめでめんどい。(基本 ssh は colinux 経由でやっていてそっちで keychain つかってるので、Windows のほうで pageant 使ってない)

	設定はこんな感じ。

	    ; imap
	    (setq mew-proto "%")
	    (setq mew-imap-user "typester")
	    (setq mew-imap-ssh-server "typester@mail.example.com")
	    (setq mew-imap-server "mail.example.com")
	    (setq mew-imap-auth t)
	    (setq mew-imap-auth-list (list "CRAM-MD5" "LOGIN"))
	    (setq mew-imap-delete nil)
	    (setq mew-ssh-prog "plink")

	* 00:03 Meadow 素敵 #2 [emacs] [meadow]: 
	他にも、y/n とか聞かれるとこで自動で IME OFF にできたり、mew で URL 右クリすると Firefox 立ち上がったり、kill したのがクリップボード入ったりと、Windows との親和性が(当たり前だが) emacs via PuTTY と比べると全然便利。

	色分け設定もできるようになったのでいろいろいじってるんだけど(めんどくさい！)、.emacs 内で font-lockなんとかの face の色の指定しようとするとエラーになる。

	こんな感じに:

	    (set-face-foreground 'font-lock-comment-face "lime green")

	とか書いておくと、`error: Invalid face, font-lock-comment-face` とかいわれる。

	font-lock-mode になってないからだろうけど、どすんだ。[解決](http://unknownplace.org/memo/2005/10/28#e006 "謎エラー解決 - CLON")。

	つか配色設定めんどすｇｒｒｒ

	* 00:01 Meadow 素敵 [emacs] [meadow]: 
	Meadow すごい。今まで散々悩んだ [Proggy フォント](http://www.proggyfonts.com/ "Proggy Programming Fonts")と日本語フォントの組み合わせが普通にあっさり使えた。までも、xyzzyでも普通につかえるのだけど。

	フォントの部分はよくわかってないが、こんな感じに:

	    ; private-fontset作成
	    (w32-add-font
	     "private-fontset"
	     '((spec
	        ((:char-spec ascii :height 90)
	         strict
	         (w32-logfont "CodingFontTobi1" 0 -12 400 0 nil nil nil 0 1 3 49))
	        ((:char-spec ascii :height 90 :weight bold)
	         strict
	         (w32-logfont "CodingFontTobi1" 0 -12 700 0 nil nil nil 0 1 3 49))
	        ((:char-spec ascii :height 90 :slant italic)
	         strict
	         (w32-logfont "CodingFontTobi1" 0 -12 400 0   t nil nil 0 1 3 49))
	        ((:char-spec ascii :height 90 :weight bold :slant italic)
	         strict
	         (w32-logfont "CodingFontTobi1" 0 -12 700 0   t nil nil 0 1 3 49))
	        ((:char-spec japanese-jisx0208 :height 120)
	         strict
	         (w32-logfont "ＭＳ ゴシック" 0 -12 400 0 nil nil nil 128 1 3 49))
	        ((:char-spec japanese-jisx0208 :height 120 :weight bold)
	         strict
	         (w32-logfont "ＭＳ ゴシック" 0 -12 700 0 nil nil nil 128 1 3 49)
	         ((spacing . -1)))
	        ((:char-spec japanese-jisx0208 :height 120 :slant italic)
	         strict
	         (w32-logfont "ＭＳ ゴシック" 0 -12 400 0   t nil nil 128 1 3 49))
	        ((:char-spec japanese-jisx0208 :height 120 :weight bold :slant italic)
	         strict
	         (w32-logfont "ＭＳ ゴシック" 0 -12 700 0   t nil nil 128 1 3 49)
	         ((spacing . -1))))))
	    (set-face-attribute 'variable-pitch nil :family "*")

	とかで fontset 作ってから

	    ; 初期フレーム
	    (setq default-frame-alist
	          (append (list '(font . "private-fontset")
	                '(ime-font . (w32-logfont "ＭＳ ゴシック" 0 12 400 0 nil nil nil 128 1 3 49)))
	              default-frame-alist))

	とかとしてデフォルトのフォントセットにする。

	とはいえ CodingFontTobi も MS ゴシックどっちも等幅といっても縦横比が違うので、混じっているとずれますが。日本語フォントは基本、mew 用なので問題ない。(Summaryがずれずれになっちゃうけど)

	日本語綺麗になっちゃったから navi2ch とか riece とかもいれちゃおうか！

	配色設定めんどくせー。

2005-10-27 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 15:19 How Much Is My Blog Worth? [web]: 
	<div style="border: 1px solid #cccccc; background-color: white; width: 115px; text-align: center; padding: 10px 0 10px 0;">
	  <p style="margin: 0">
	    <img src="http://static.flickr.com/23/25822676_789bf55448_t.jpg" style="border:0;" width="100" height="96" alt="osa-n" /><br />
	    <span style="font-size: 11px;">My <a href="http://www.unknownplace.org/" title="UnknownPlace.">blog</a> is worth <strong>$41,775.96</strong>.</span><br />
	    <span style="font-size: 10px;">
	      <a href="http://www.business-opportunities.biz/projects/how-much-is-your-blog-worth/">How much is your blog worth?</a>
	    </span>
	  </p>
	  <p>
	    <a href="http://www.technorati.com/" style="border: 0px;" title="Technorati">
	      <img src="http://technorati.com/pix/tech-logo-embed.gif" style="border: 0px;" width="81" height="17" alt="technorati" />
	    </a>
	  </p>
	</div>

	* 13:24 Meadow [emacs]: 
	インスコしてみた。

	mew を使うようになって PuTTY 内 emacs でのフォントの問題がやっぱきついなーと。

	設定調べ中。どだろな。

	* 10:32  [life]: 
	出社。

	* 03:06  [life]: 
	退社。

	* 03:02 inbox を空に [life] [mew] [mail]: 
	メーラ変えた＆過去メール移行してないという状況なので、inbox を空にするっていうのを実践しようとしたけど無理すぎ！！

	inboxためまくり、重要なのだけ別のとこへコピー、片付けたらそれ削除。とかのスタイルのが性に合ってる。

	自分に関係のないメールが多すぎなので、どしてもこういう感じになっちゃうんだよなぁ。

	* 00:26 Catalyst講習 [life]: 
	21時から2時間くらいかけてやった。

	Perl知らない人にたいする説明は、むずかしなぁ。

	tt, cdbi の軽い説明からはじめたので結構疲れた。

	Catalyst部分は catalyst.pl から myapp_create.pl なんかの基本的な流れ、Action/Controller の解説。

	プラグイン/ヘルパーを作ることのメリットと、オレフレームワーク化の説明。プラグイン例は Authentication::Basic::Remote で既存アプリケーションに簡単Basic認証つけるもの、ヘルパー例は Scaffold。

	URL/Actionマッピングよりもこうした良く使う機能を再利用しやすいというメリットのほうが受けてたみたい。(ま、Scaffoldはおぉって言わせる用だしｗ)

	普段こんなしっかり話聞いてもらえないから楽しかった（ぉ

2005-10-26 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 13:10 Catalyst 5.5RC2 [catalyst]: 
	またメンテナかわてる。。 どゆことなんだろうかｗ

	* 10:49  [life]: 
	出社。

	* 03:40 複数設定切り替え [mew]: 
	ほぼすべての設定を複数つかいわけられる（多分

	    (setq mew-config-alist
	          '(("gmail"
	             ("name" . "typester")
	             ("user" . "typester")
	             ("mail-domain" . "gmail.com"))
	            ("perl"
	             ("name" . "Daisuke Murase")
	             ("user" . "typester")
	             ("mail-domain" . "cpan.org"))
	            ("priv"
	             ("name" . "murase")
	             ("user" . "typester")
	             ("mail-domain" . "unknownplace.org"))
	           ))

	こんなんで default 以外の設定を定義できる。この中では default の `mew-user` とかの mew- をとったものを指定するらしい。

	切り替えるには Summary/Virtual モードでは C で、メール編集時には C-c C-o で、それぞれ切り替えられる。

	* 02:33  [life]: 
	退社。

	* 01:31 mew [mew]: 
	思ったよりはいいかも。

	    (setq mew-mailbox-type 'mbox)
	    (setq mew-mbox-command "incm")
	    (setq mew-mbox-command-arg "-d /home/typester/Maildir")

	とかしたら Maildir のほうの新着メールが消えて焦った。

	    (setq mew-mailbox-type 'mbox)
	    (setq mew-mbox-command "incm")
	    (setq mew-mbox-command-arg "-b -d /home/typester/Maildir")

	としておいた。この辺は `man incm` 参照。

	実際は Maildir からコピーしてこずに直で Maildir 内のメール読めるといいんだけど。
	(できないこともないんだが inbox に 30,000 通以上溜め込んでる今の状況じゃ mew だとつらげ)

	メーラとしては全然満足だねぃ。ちょっとメインで使ってみる。

2005-10-25 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 21:45 mew [emacs] [mew]: 
	いい加減 Becky! 重いので、サーバー上で使うように入れてみる。

	と思ったら間違って colinux のほうに入れてた。とりあえずこっちで使ってみる。

	Namazu や Rast との連携もできるみたいでヨサゲかも。

	     提案パッケージ:
	      w3m-el stunnel4 stunnel wv xlhtml ppthtml compface netpbm x-face-el mu-cite mule-ucs bogofilter bsfilter spamassassin
	      namazu2-index-tools mhc

	* 18:31 Opera IRC with Tiarra [opera] [irc]: 
	普通に窓閉じたり、Opera閉じたりするとチャンネルからPartしちゃうため、Tiarra使ってるとき注意。

	明示的に `/quit` するか、サーバー右クリ → offline で落ちるように。

	* 18:29 Opera の Voice 機能 [opera]: 
	ONにすると文字列選択して `v` 押すとそこ読み上げてくれる。

	IRCでも使えて結構楽しい。

	femaleの声が微妙なのが微妙。

	* 17:43 ユーコンブレンド [life] [starbucks]: 
	ニュー豆ゲッツ。

	やっぱ買ったばっかのはうめーなぁ。

	* 17:11 amazonギフト [life]: 
	iPod nano 分の ￥2,000 となにかの ￥1,500 ゲッツ。

	* 10:21 has_many order #2 [perl] [cdbi]: 
	そうか、親テーブルの order\_by に DESC つけると has\_many のほうも逆順ソートになるのか。。

	むむん。

	* 10:12 rev.99..100 [clon]: 
	has_many で order つけると逆順にソートされるんですがががが。

	* 09:47 has_many order [perl] [cdbi]: 
	pod見ろオレ。

	    Music::CD->has_many(tracks => 'Music::Track', { order_by => 'playorder' });

	* 09:40 rev.98 [clon]: 
	複数エントリのキャッシュが同時に追加された場合に、逆順で追加されていたバグ修正。

	has_many で指定したテーブルのオーダーを指定することは無理？

	* 08:44 del.icio.us [web]: 
	日本語で検索できないのだめだなぁ。

	* 08:33  [life]: 
	出社。

	* 00:48  [life]: 
	退社。

2005-10-24 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:52 svk blackbox [svk]: 
	Catalyst の本レポジトリが壊れた。

	原因は svk の暴走。

	svk 便利だけど、まだよくわかんないこといっぱい。よく知らないまま使ってるのはきけんだなぁ。むーん。

	* 17:42  [life]: 
	1キターーーー・・・

	ニューサイコロだめだ。

	* 17:01  [life]: 
	今日はサイコロデー！

	* 14:16 Catalyst講習 [life] [catalyst]: 
	水曜に社内でやります。

	1. Template入門
	  * 軽く概要説明
	2. Class::DBI入門
	  * 概要
	  * リレーション(has\_a, has\_many, might\_have)
	  * Templateとの連携
	  * Class::DBI::Loader
	3. Catalyst入門
	  * 概要
	  * 基本的なワークフロー
	  * プラグイン、ヘルパースクリプトについて
	  * サンプルアプリケーション作成実演

	1,2 は非Perler向け内容。HTML::Prototype を使ったデモはかなりインパクトあるけど、多分キャパオーバーしまくりしそうなので、今回はやめとく。
	チラ見せはするかもしれない。

	* 12:03  [foobar2000]: 
	こないだ設定飛ばしちゃってからほとんどデフォのまま使ってるけど別にこれでもいいな。

	キーボード設定さえしちゃえば。。

	タグや ReplayGain なんかも曲ファイルに直で書き込んでたから DB 飛んでもたいしたことなかったし。一部昔取り込んだ曲で ReplayGain 設定しなおさなきゃいけなかったくらいで。

	他のカスタマイズはすべて自己満足なものと。

	* 11:52  [irc]: 
	Mac の IRC クライアントでなんか ACTION で顔文字(?)とか感情あらわす物あるのかな。

	てかそもそも ACTION てどういうときにつかうんだろう。

	* 10:50  [life]: 
	出社。

	* 00:10  [life]: 
	そろそろサンダルきつくなってきたよ。

2005-10-23 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 22:01 Bloglinesのクロール間隔 [web] [bloglines]: 
	読者数によってクロール間隔違うのかな？

	UnknownPlace.は1時間おきにくるっぽいけど、ここは2時間おきとか4時間おきとかだ。

	* 20:36 MSN Messenger [web]: 
	なんかずっとMSN Messengerでサインインできないんですが！！

	* 19:32 時間 [clon]: 
	DBに時間用カラム追加したりして、RSSにちゃんと時間情報入れるようにした。

	RSSリーダーとかで新着でまくるかもしれんけどゆるして！

	* 19:16 viぽい% [emacs] [perl]: 
	Template-Toolkitの書式で誤動作しまくってちょっとうぜーかもしらんね。

	* 12:10 FF4 [game]: 
	ちょっとやってんだけど、こんなんだっけ？ 記憶に残ってるのとはだいぶ違うなぁ。

	5人パーティだし。(4人だと思ってた)

	セシルしゃべりまくりでなえるし。

	半年くらい前にクロノトリガーやり直したときはやっぱいいなぁって思ったのに、何だこの違いは。

	今、双子が石になったところ。

	* 12:04  [web]: 
	Bloglines が s でフォルダ開くようになっちゃったのまじうざいなぁ。すぐ元に戻るかと思ったけど全然もどらないから仕様なんだな？

	* 11:49  [web]: 
	[en.wikipedia.org](http://en.wikipedia.org/) の [MVC のページ](http://en.wikipedia.org/wiki/MVC "Model-view-controller - Wikipedia, the free encyclopedia")はすげよくまとまってるのに [ja の](http://ja.wikipedia.org/wiki/MVC "MVC - Wikipedia")はなんだこりゃ。

2005-10-22 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 02:13  [life]: 
	退社。

2005-10-21 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 22:42 Scaffoldニューデモ [catalyst]: 
	DefaultEndプラギン、c.uri_for(5.5からの新機能)、DBIx::Class をつかったScaffoldの新しいデモムービーを作るとか言う噂。

	dbicはまだ全然見てないけど、デモできたらチェックしてみよう。

	* 22:41  [catalyst]: 
	せばすちゃんはどうやったらもっと日本人が#catalystにきてくれるか悩んでるらしい。(せばすちゃんの今日の独り言より

	みんなもっと入ろう！

	* 18:38 #catalyst [catalyst]: 
	    (17:39:37) draven : what's  Catalyst::Plugin::Session::Manager ?
	    (17:40:39) draven : it's a hostile takeover of nothingmuch's effort?
	    (17:41:26) sri : no
	    (17:41:35) sri : lyokato was first
	    (17:42:16) sri : but it has a bad api

	どの辺がだめなのか聞こうとしたけど気づいたときには流れてた。

	つっても Session::Manager のソース見てないからあれなんだけど。

	* 16:14 オレフレームワーク with Cataylst [catalyst]: 
	Catalystつかってるうちにオレプラギンやらオレヘルパースクリプトやらできて来て、自然にオレフレームワークが出来上がる気がする。

	やっぱBlosxomと同じにおいがするなぁ。

	* 15:42 第八回XML開発者の日 [life]: 
	行こうか迷ってたら締め切られてた！！！

	* 10:35  [life]: 
	出社。

	* 03:22  [life]: 
	まだいた！（メール書いてた

	マジ退社！

	* 02:31  [life]: 
	うそ、今がほんとの退社。

	クロノトリガーのサントラ！ 最高！ クロスのも買うぜええ。

	カエルのテーマを着信音にするぜ。

	* 01:54  [life]: 
	退社。

	* 00:04 DBI_TRACE [perl] [dbi]: 
	DBI_TRACE の見方がイマイチよくわからん。なんとなくでもなんとなくわかるからいいけどさ。

	MySQLだと最終的に実行されてるSQL文みえるけど、SQLiteだとprepare段階のやつしか見えない気がするし。むむーん。

2005-10-20 (Thu)  Daisuke Murase  <murase@kayac.com>

	* 23:52  [life]: 
	眠いなー、帰るか。

	今日はひさしぶりに都内で打ち合わせ。なんかでかい会社いくといつも天井たけーし、エレベータやたらいっぱいいろんなとこにあるし、3Dゲームっぽいなぁとか思ってしまう。

	* 09:30  [life]: 
	出社。

	* 01:08  [life]: 
	退社。

2005-10-19 (Wed)  Daisuke Murase  <murase@kayac.com>

	* 23:08 ペアプロ修行 [idea]: 
	他社との技術者交流。

	他の会社の人とペアプロする。ただそれだけ！

	でも多分みんな見栄を張るので、見られてると普段は全然使わないような難しいコマンドとか使いたくなって、すげー準備する気がする。

	で、結果めちゃ修行になると。

	* 18:37 :encoding [screen]: 
	screen て encoding の設定 window 毎にできたんだ！！！！ すげーーー便利。

	変えたい window 上で

	    :encoding utf8

	とかでOK。使えまくり。

	これ、hardstatus にカレントウィンドウの encoding 名表示できたら完璧なんだけど。

	* 14:54 Changelogメモ to はてな [clmemo] [idea]: 
	自動化してやったらよさげかもと思った。
	
	* 10:00 次期初期画面 [catalyst]: 
	[http://dev.thefeed.no/welcome.html](http://dev.thefeed.no/welcome.html)

	いらねーーー。

	* 09:35  [life]: 
	出社。

	* 00:20  [life]: 
	退社。

2005-10-18 (Tue)  Daisuke Murase  <murase@kayac.com>

	* 10:37 Self restarting test server  [catalyst]: 
	trunk の myapp_server.pl が `-r` オプションをつけることでファイルの修正に合わせて自動で再起動してくれるようになった模様。

	正直 Wiki の Restarting の tips 見てても。Syntax エラーとかあったときは結局再起しないしかえってめんどいやん、とかおもってたんだけど、

	> It will monitor your files in a 1 second interval and restart the server when files matching the regex (defaults to '\.yml$|\.yaml$|\.pm$') are modified.
	>
	> Syntax errors are catched and presented in the logs.

	てことで、すっげ便利そうな予感。

	* 10:33  [life]: 
	出社。

	掃除のおばちゃんがまたビルのセコムかけ忘れてる。。

	* 00:50  [life]: 
	退社。

	* 00:16 testing [perl]: 
	テストって書いてみると楽しいな意外と。今まで全然書いてなかったとか。

2005-10-17 (Mon)  Daisuke Murase  <murase@kayac.com>

	* 23:14 zsh補完定義リスト [zsh]: 
	デフォルトの補完リストは `/usr/share/zsh/4.2.5/functions/Completion` 以下にいろいろ定義されているらしい。(gorouさん情報)

	perldoc なら `/usr/share/zsh/4.2.5/functions/Completion/Unix/_perldoc` に書かれてる。自分でなんか定義するときの参考にもなる！

	* 23:08 perldoc補完2 [zsh]: 
	ちなみに perldoc -f ってうって tab 押すと

	    perl built-in function
	    abs               exec              glob              order             seek              symlink
	    accept            exists            gmtime            our               seekdir           syscall
	    alarm             exit              goto              pack              select            sysopen
	    atan              exp               grep              package           semctl            sysread
	    bind              fcntl             hex               pipe              semget            sysseek
	    binmode           fileno            import            pop               semop             system
	    bless             flags             index             pos               send              syswrite
	    caller            flock             int               precision         setgrent          tell
	    chdir             fork              ioctl             print             sethostent        telldir
	    chmod             format            join              printf            setnetent         tie
	    chomp             formline          keys              prototype         setpgrp           tied
	    chop              getc              kill              push              setpriority       time
	    chown             getgrent          last              q                 setprotoent       times
	    chr               getgrgid          lc                qq                setpwent          tr
	    chroot            getgrnam          lcfirst           qr                setservent        truncate
	    close             gethostbyaddr     length            quotemeta         setsockopt        uc
	    closedir          gethostbyname     link              qw                shift             ucfirst
	    connect           gethostent        listen            qx                shmctl            umask
	    continue          getlogin          local             rand              shmget            undef
	    cos               getnetbyaddr      localtime         read              shmread           unlink
	    crypt             getnetbyname      lock              readdir           shmwrite          unpack
	    dbmclose          getnetent         log               readline          shutdown          unshift
	    dbmopen           getpeername       lstat             readlink          sin               untie
	    defined           getpgrp           m                 readpipe          size              use
	    delete            getppid           map               recv              sleep             utime
	    die               getpriority       mkdir             redo              socket            values
	    do                getprotobyname    msgctl            ref               socketpair        vec
	    dump              getprotobynumber  msgget            rename            sort              vector
	    each              getprotoent       msgrcv            require           splice            wait
	    endgrent          getpwent          msgsnd            reset             split             waitpid
	    endhostent        getpwnam          my                return            sprintf           wantarray
	    endnetent         getpwuid          next              reverse           sqrt              warn
	    endprotoent       getservbyname     no                rewinddir         srand             write
	    endpwent          getservbyport     oct               rindex            stat              y
	    endservent        getservent        open              rmdir             study
	    eof               getsockname       opendir           s                 sub
	    eval              getsockopt        ord               scalar            substr

	とかでるよ。まんせー。

	* 23:03 perldoc補完 [zsh]: 
	perldoc って打ち込んででなんとなく癖で tab 押したら

	    zsh: do you wish to see all 2113 possibilities (1008 lines)?

	とか出て、強行したら、ずらーってモジュール一覧が出た後最後に

	    perl base pods
	    a2p             perlapi         perldebug       perlfilter      perllol         perlothrtut     perltie
	    perl            perlapio        perldelta       perlfork        perlmachten     perlpacktut     perltoc
	    perl5004delta   perlapollo      perldgux        perlform        perlmacos       perlplan9       perltodo
	    perl5005delta   perlartistic    perldiag        perlfreebsd     perlmacosx      perlpod         perltooc
	    perl561delta    perlbeos        perldoc         perlfunc        perlmint        perlpodspec     perltoot
	    perl56delta     perlbook        perldos         perlgpl         perlmod         perlport        perltrap
	    perl570delta    perlboot        perldsc         perlguts        perlmodinstall  perlqnx         perltru64
	    perl571delta    perlbot         perlebcdic      perlhack        perlmodlib      perlre          perltw
	    perl572delta    perlbs2000      perlembed       perlhist        perlmodstyle    perlref         perlunicode
	    perl573delta    perlcall        perlepoc        perlhpux        perlmpeix       perlreftut      perluniintro
	    perl581delta    perlce          perlfaq         perlhurd        perlnetware     perlrequick     perlutil
	    perl582delta    perlcheat       perlfaq1        perlintern      perlnewmod      perlreref       perluts
	    perl583delta    perlclib        perlfaq2        perlintro       perlnumber      perlretut       perlvar
	    perl584delta    perlcn          perlfaq3        perliol         perlobj         perlrun         perlvmesa
	    perl585delta    perlcompile     perlfaq4        perlipc         perlop          perlsec         perlvms
	    perl586delta    perlcygwin      perlfaq5        perlirix        perlopenbsd     perlsolaris     perlvos
	    perl587delta    perldata        perlfaq6        perljp          perlopentut     perlstyle       perlwin32
	    perl58delta     perldbmfilter   perlfaq7        perlko          perlos2         perlsub         perlxs
	    perlaix         perldebguts     perlfaq8        perllexwarn     perlos390       perlsyn         perlxstut
	    perlamiga       perldebtut      perlfaq9        perllocale      perlos400       perlthrtut
	    Perl modules and .pods
	    enc/            gmailfs/        public_html/    shfs/           temp/           win/            workdir/

	とか出て止まった。おぉ便利！

	* 23:00 気づいたら [misc]: 
	[del.icio.us](http://del.icio.us/typester "del.icio.us/typester") ポスト数1000越え！(現在1030)

	* 20:26 FF4! [game]: 
	FF4 が GBA で出るらしい。FF4 つったら クロノトリガーの次に好きなゲーム。

	GB micro とセットで買うしか！

	いまやって面白いと思うかはわからないけど。

	* 17:16 match-peren [emacs]: 
	Perl BestPractices に vi の % っぽいことをする elisp がのっていたけど emacs22 じゃそのままだとうまく動かなくて放置してたんだけど、EmacsWiki 見たら載ってた。

	    (defun match-paren (arg)
	      "Go to the matching paren if on a paren; otherwise insert %."
	      (interactive "p")
	      (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
	    	((looking-at "\\s\)") (forward-char 1) (backward-list 1))
	    	(t (self-insert-command (or arg 1)))))
	    (global-set-key "%" 'match-paren)

	これでOK。でも、なんでこれで `[]` とか `{}` でも動くのかわからん。。

	* 15:01 EmacsRuby [emacs]: 
	lisp がわけわからないので、call-process とかで外部の Perl スクリプトでごにょごにょさせようとおもって call-process についてぐぐってみたら発見。

	これを使うと lisp のかわりに Ruby を使って emacs を拡張することができる。よすぎ。。

	Perl 版さがしたけどなさげ。

	[el4r - EmacsRuby](http://www.rubyist.net/~rubikitch/computer/el4r/)

	* 10:39 File::Data::Simple [perl]: 
	[File::Slurp](http://search.cpan.org/dist/File-Slurp/) とかいうまったく同じコンセプトのモジュールがすでにあった罠。

	消したほうがいいかなぁ。ほんと、すげ同じ。

	* 08:54  [life]: 
	メール、ニュース、サイトチェックして、コーヒー沸かしてたらこんな時間だ。

	仕事始めるまでに1時間くらいかかるらしい。

	* 08:01  [life]: 
	出社。

2005-10-16 (Sun)  Daisuke Murase  <murase@kayac.com>

	* 21:36  [life]: 
	やったら眠い。帰って朝早く来よう。

	てなわけで退社。

	* 14:59  [life]: 
	出社。

	* 03:21  [life]: 
	退社。

	* 00:56 fuseトラブル [debian]: 
	10日ぶりくらいに PC 再起したら encfs で

	    fusermount: failed to open /dev/fuse: No such file or directory

	とか言う fuse のエラーが出てマウントできなくて困った。秘密鍵とかいろいろ encfs 内に保存してるからマウントできないとなんもできない。

	そいや最近 fuse アップグレードしてたきもするなぁ。それが原因かしら。

	いろいろぐぐったところ

	    sudo mknod /dev/fuse -m 0666 c 10 229 

	として何かよくわからないファイルを作ったら動くようになった。。

2005-10-15 (Sat)  Daisuke Murase  <murase@kayac.com>

	* 19:28 File::Data::Simple [perl] [cpan]: 
	ちょっとしたスクリプトなんかかくときに、いちいち `FileHandle` とか使うのめんどいので、シンプルに読み書きできるものを探してみたんだけど、なんかなさげなので作った。

	無駄に `wantarray` とか使ってみたりしてるので、

	    my $text = File::Data::Simple->read('test.txt');

	とか書くと普通に読み込んだデータを返し、

	    my @lines = File::Data::Simple->read('test.txt');

	とか書くとデータを読み込んで、改行で分割した配列を返す。

	* 16:59 ぼのぼの [web] [anime]: 
	やべー、[ぼのぼのが GyaO で](http://www.gyao.jp/anime/)見えるよ。

	* 16:37 [life]: 
	出社。

	* 15:42 FILTER null [template-toolkit] [perl]: 
	これを忘れていた。何も出力しないフィルタ。

	    [% clmemo.reset %]

	とかしてて、RSS に変なの紛れ込んでた。

	    [% clmemo.reset | null %]

	とかしなきゃだめ。( clmemo は Class::DBI::Iterator オブジェクト )

	* 14:19 Bulkfeeds API [bulkfeeds] [perl]: 
	gorou さんがうごかねっつってるので触ってみた。

	    #!/usr/bin/perl
	    
	    use strict;
	    use LWP::UserAgent;
	    use HTTP::Request::Common;
	    use FileHandle;
	    use Readonly;
	    
	    Readonly my $url     => 'http://bulkfeeds.net/app/terms.xml';
	    Readonly my $api_key => 'my key';
	    
	    my $ua = LWP::UserAgent->new;
	    
	    # read test.txt
	    my $text = q{};
	    if ( my $fh = FileHandle->new('test.txt') ) {
	        $text = join q{}, <$fh>;
	        $fh->close;
	    }
	    else {
	        die 'text read error';
	    }
	    
	    # call api
	    my $res = $ua->request(POST $url, [ apikey => $api_key, content => $text, ]);
	    
	    if (not $res->is_success) {
	        die $res->status_line;
	    }
	    else {
	        print $res->status_line, qq{\n\n};
	        print $res->content;
	    }

	で、結果

	    200 OK
	    
	    <?xml version="1.0" encoding="utf-8"?>
	    <terms>
	    <term>クリッパーズ</term>
	    <term>臥</term>
	    <term>NBA</term>
	    <term>プレシーズン</term>
	    <term>初戦</term>
	    <term>開幕</term>
	    <term>田</term>
	    <term>アシスト</term>
	    <term>リバウンド</term>
	    <term>サンズ</term>
	    <term>ユーイング</term>
	    <term>リビングストン</term>
	    <term>95</term>
	    <term>勇</term>
	    <term>4Q</term>
	    <term>俊敏</term>
	    <term>＞？</term>
	    <term>無得点</term>
	    <term>得点</term>
	    <term>ベンチ</term>
	    </terms>

	動いてる！ あーこれおもしろいかも。
	
	* 03:40  [life]: 
	退社。飲みに行っていたので遅くなった。

2005-10-14 (Fri)  Daisuke Murase  <murase@kayac.com>

	* 18:51 font-family for css [css]: 
	下の diff がずれてて気になったのでしょうがなく monospace に。

	びみぇ。

	* 15:23 時間 [clmemo]: 
	自動で時間が挿入されるように clmemo.el 弄った。

	    --- /home/murase/temp/clmemo.el
	    +++ /usr/share/emacs/site-lisp/clmemo.el
	    
	    @@ -334,7 +334,7 @@
	           (end-of-line))
	         ;; Insert item-heading separater after title.
	         (unless (string= "" title)
	    -      (insert title ": "))
	    +      (insert (concat (format-time-string "%H:%M " (current-time)) title ": ")))
	         (clmemo-mapc (lambda (func) (funcall func buf)) clmemo-buffer-function-list)
	         (run-hooks 'clmemo-new-title-hook)))

	`clmemo-titlle-format-function` とか `clmemo-new-title-hook` とかでやろうとしたけど、どっちも微妙にうまくいかないので直接書き換えた。

	Lisp むずいなぁ。。

	* 10:00 [life]: 
	出社。

	* 00:47 [life]: 
	退社。

	* ChangeLogメモ [clmemo]: 
	時間だしたいな。

	* できるだけシンプルに [think]: 
	何事においてもシンプルなのに越したことはない。サイトもここで使ってるようなほんとにシンプルなスタイルでやっていこうと思う。

	今はここだけだけど、徐々に XREA においてるコンテンツを移行させていく。

	さらば XREA。ありがとう XREA。

2005-10-13 (Thu)  Daisuke Murase  <murase@kayac.com>

	* SQL::Abstract [perl] [cdbi]: 
	サーバーの [SQL::Abstract](http://search.cpan.org/dist/SQL-Abstract/ "search.cpan.org: Nathan Wiger / SQL-Abstract") が古かったらしく、タグの AND 検索がなんか OR 検索になってた。最新版にしたら直った。

	つーか [Class::DBI::Sweet](http://search.cpan.org/dist/Class-DBI-Sweet/ "search.cpan.org: Matt S Trout / Class-DBI-Sweet") はほんとに Sweet だなぁ。手放せないよ。

	* Catalyst::Plugin::UploadProgress [catalyst]: 
	混みいってるなぁ。もっとシンプルにできそだけど。

	* テキストパーサ変更 [clon]: 
	Markdownがいまいち不安定なので Text::Ufyu ベースのパーサに変更。それに伴ってキャッシング処理もちょっと最適化。

	ほとんど書き直したよ。。

	* 08:23 [life]: 
	出社。

	* 00:29 [life]: 
	退社。

2005-10-12 (Wed)  Daisuke Murase  <murase@kayac.com>

	* Flash8 [flash]: 
	のサイトってローディング長いのばっかでうんざりだ。もっとロード画面自体をインタラクティブにしてほしいな。

	* wantarray [perl]: 
	関数の戻り値にリストが期待されているかどうかを調べるビルドイン関数。
	
	これを使えば [Class::DBI](http://search.cpan.org/dist/Class-DBI/) の retrieve_all みたいに

	    my $ret = CDBI::MyTable->retrieve_all;

	とすると `$ret` にはイテレータが入り、

	    my @ret = CDBI::MyTable->retrieve_all;

	とすると `@ret` には実際のデータの配列が返されるような関数を書ける。

	* Text::Ufyu [perl] [text]: 
	Markdown おかしいので
	
	[kyo](http://hail2u.net "hail2u.net")さんの Blosxom 用プラグイン ufyu をコピペして Text::Ufyu とか作ってみる。

	 - [Text::Ufyu 0.00_01](http://unknownplace.org/pub/lib/Text-Ufyu-0.00_01.tar.gz)
	 - [Text::Ufyu 0.00_02](http://unknownplace.org/pub/lib/Text-Ufyu-0.00_02.tar.gz)

	前者はkyoさんのをそのままコピペしてモジュール化したやつ。後者は自分好みにいろいろ変更したやつ。帰ったらCLONをこれベースに切り替えよう。

	* Markdown [markdown]: 
	連続して呼び出したときの挙動おかしいなぁ。一時変数がクリアされてないとかぽいけど。

	追うのめんどい罠。

	* Xserve [server] [osx]: 
	自動アップデートで勝手に再起動するのうざ過ぎる。uptimeで日付が2桁行ったの見たことないかも。

	
	* 画面のプロパティを起動するコマンドライン [windows]: 
	
	    rundll32 /d shell32.dll,Control_RunDLL desk.cpl

	と思ったら

	[kyo](http://hail2u.net "hail2u.net")さん情報:

	    desk.cpl

	だけでいいらしい！ さらにさらに

	    desk.cpl @0,4

	とかすると開くタブまで指定可能！！ @以下は ダイアログ,タブ て感じらしい。`main.cpl` だと `@0` でマウス `@2` でキーボードのダイアログが開くとか。

	てかなんでこんなこと知ってんだろう（ｗ

	* 10:30 [life]: 
	出社。
	
	* C-sとC-qのフローコントロールを無効に [zsh]: 
	
	    setopt no_flow_control

	* 00:36 [life]: 
	退社

2005-10-11 (Tue)  Daisuke Murase  <murase@kayac.com>

	* コメント機能 [clon]: 
	日付単位のコメントって違和感あるなぁ。

	1日で1エントリだと長すぎない？ セクションヘッダからコメントに飛べるけど、真ん中あたり表示してるときはコメントの存在さっぱりわからないな。

	テンプレ書くのもだるいし。

	* FlashフレームレートのMagic number [flash]: 
	K谷君情報

	> FlashはWindowsとMacで再生速度が変わりますが、その差が少なくなる不思議な
	> フレームレート（マジックナンバー）というものがあるらしいです。
	> 
	> そのフレームレートは
	> 
	> 16、21(、24)、31、59
	> 
	> 確かな（公式な）情報ではないですが頭の片隅に入れておくといいかもです。

	後で調べる。

	* CPAN Shell で バージョン指定してモジュールを入れる方法 [cpan]: 
	
	    install A/AG/AGRUNDMA/Catalyst-5.49_01.tar.gz

	みたいな感じにする。Developer Releaseや古いやついれたいときに。

	* lighttpd の mod_proxy [lighttpd] [mod_proxy]: 
	はすごい。Host: ヘッダもちゃんとバックエンドに飛んでくからバックエンド側でもVirtualHost使用可能。

	apacheでもできるらしいけどやりかたわからねー。

	* Catalyst [perl] [cpan] [catalyst]: 
	[search.cpan.org: Andy Grundman / Catalyst-5.49_01](http://search.cpan.org/~agrundma/Catalyst-5.49_01/)

	メンテナまた変わったんだ。

	* Catalyst 5.49_01 [catalyst]: 
	きてますな。5.5RC1。

	変更点で気になるものは

	 + `$c->forward('/foo/bar', [qw/arg1 arg2/])` の代わりに `$c->forward('/foo/bar/arg1/arg2')` とかでOKになった
	 + mod_proxy 経由でバックエンドとして動いていても `$c->req->base` や `$c->req->address` をちゃんと取れるようになった
	 + myapp_server.pl が fork に対応した
	 + ストリーミング関係いろいろサポート

	などなど、なかなか良くなっている。

	Apacheエンジンは書き直して [search.cpan.org: Andy Grundman / Catalyst-Engine-Apache](http://search.cpan.org/~agrundma/Catalyst-Engine-Apache/) と別パッケージになったらしいので、apacheで利用する場合にはこれも必要。

	* 10:00 [life]: 
	出社。

	K村さんに話しかけるも無視される。[:悲しい:]

	* chalow [clmemo] [clon]: 
	[chalow](http://nais.to/~yto/doc/zb/0016.html "たつをさんによる補足説明とか") はほんとよくできてるなぁ。

	秘密メモ機能はCLONにもつけよう。つかたつをさんの文章面白すぎ。

	* Data::Pageset [perl] [cpan]: 
	[Data::Pageset](http://search.cpan.org/dist/Data-Pageset/)
	
	[Blosxom](http://www.bloscom.com/) の [paging プラグイン](http://blosxom.info/paging "all about blosxom: paging")みたいなのを簡単に作れるモジュール。

	でもなんかちょとバグってるきがする。用チェク。

	* 青ベース [css]: 
	になったのは、某hail2uのカープ色に対抗してのものである。

2005-10-10 (Mon)  Daisuke Murase  <murase@kayac.com>

	* Firefox 1.5 beta 2 [firefox]: 
	速攻入れる。1.0.xはタブ閉じてもメモリ開放されないので使わないほうがいい。betaを薦めるのもどうかとおもうけど。でも1.5b1にしてからメモリ消費量すげー減ったもんなぁ。

	今回入れた拡張:

	 - [Nightly Tester Tools](http://users.blueprintit.co.uk/~dave/web/firefox/buildid/nightly.html) 0.7.9.7
	 - [Live HTTP Headers](http://livehttpheaders.mozdev.org/) 0.10
	 - [Web Developer](http://chrispederick.com/work/webdeveloper/) 0.9.4
	 - [del.isio.us](http://delicious.mozdev.org/) 0.5.9
	 - [IE View](http://ieview.mozdev.org/) 1.2.6.1
	 - [ScrapBook](http://amb.vis.ne.jp/mozilla/scrapbook/) 1.17.4
	 - [Greasemonkey](http://greasemonkey.mozrev.org/) 0.6.2
	 - [LiveLines](http://heygom.com/extensions/) 0.4.4

	このうち Nightly Tester Tools のお世話になったのは意外にも Live HTTP Headers のみで、あとはすんなり入った。

	* CLON状況 [clon]: 
	あとはURLによって表示内容フィルタする処理つければとりあえず完成。

	SQLiteへのキャッシング処理をもちょいうまく考えないとアレゲ。

	とりあえず寝る。

	* <a title=""><img alt="" title="" /></a> のときのポップアップ表示の優先順位 [html]: 
	IE, Firefoxともにimgのものが使われる。

	* code { font-family: monospace; } [css] [font]: 
	これやめることにしよ。等幅意味ないしあんまり。

	* Markdownバグ [markdown]: 
	一行目空行で、二行目にコードブロックもってきても認識されないから気をつけろ！！

	* IMEキーバインドメモ [ime] [memo]: 

	 - 前候補 `C-e`
	 - 最前候補 `C-a`

	* SQLiteeeeee [sqlite] [catalyst] [clon]: 
	おそくねー？？？

	txtパースしてハッシュ突っ込むとこまでは一瞬で終わるのにそれをSQLiteに突っ込むと1秒とかかかる。3日分で。

	あー微妙。キャッシュ用とだけだからStorebleとかData::Dumperとかにしたほうが良いかも。

2005-10-09 (Sun)  Daisuke Murase  <murase@kayac.com>

	* CLON [clon]: 
	表示時毎回txtパースしてたんじゃ効率が悪いのでSQLiteつかってキャッシュする。
	で、mtimeみて更新されてたらまた読み込み。

	実際は更新された部分(ほとんどが新規追加だろうし)だけをキャッシュしなおすということをしたいが、Clmemoの構造上結構めんどくさいのでとりあえずは全更新する。ファイルが少ないうちは余裕だろう。

	* ChangeLogメモビューワ [clmemo] [catalyst]: 
	Catalyst+Markdownでさくっとつくってみよ。

	とりあえずChangelogのtxt読み込んでパースするのは書いた。

	ネーミングに迷う。とりあえずてきとうにCLONとかにしておいた。

	* zsh + regexp [zsh]: 
	zshでは正規表現は使えないと思っていたのだけど `[0-9]` とかは使えるらしい。

	`[a-z]{2}` とか `[a-z]{2,5}` とかも使えた。

	* emacsで文字コード指定してからファイル開く [emacs]: 
	`C-x ENTER c` で文字コード選んでから `C-x C-f`

2005-10-08 (Sat)  Daisuke Murase  <murase@kayac.com>

	* やっぱり [catalyst]:
	NEXT モジュールつかわないと挙動がおかしい。Catalyst は `no strict 'refs'` してモジュールをいろんな名前空間に読んでるからいまだによくわからない。

	もっとソース読まなくちゃ。

	* ふむ [catalyst]: 
	NEXT モジュールを使わず

	    sub new {
	        my $self = shift;
	    
	        $self->config($_[-1]);
	        $self->SUPER::new(@_);
	    }

	としたほうがよさげ。

	* Catalyst設定をばらばらに書くのが嫌 [catalyst] [perl]: 
	MyApp::M::CDBI とか MyApp::V::TT とかあったときにそれぞれの設定をそれぞれのファイルに書くのはだるい。

	これをすべて MyApp の config で行うには MyApp::(M|V|C)::Foo などというコンポーネントモジュールの new を以下のように定義してやれば良い。

	    sub new {
	        my $self = shift;
	    
	        $self->config($_[-1]);
	        $self->NEXT::new(@_);
	    }

	このようにしておけば MyApp で

	    MyApp->config(
	        'M::Foo' => {
	            some => 'settings',
	        },
	    );

	などとすれば MyApp::M::Foo の設定を MyApp 内で行える。Config::YAML と併用すれば外部ファイルの使用もOK。

	emacsにyaml-modeあれば使う気になるんだけどなぁ。。

	* だめだ [sqlite]: 
	下記方法だとupdate時にはmtimeは更新されない。`mtime timestamp default NOW()` と同じということ。

	* SQLiteでMySQLのtimestamp not nullみたいな挙動をさせる [sqlite]: 
	    create table sessions (
	        id varchar(32) not null,
	        a_session text,
	        mtime timestamp default CURRENT_TIMESTAMP
	    );

	ref: [http://www.sqlite.org/lang_createtable.html](http://www.sqlite.org/lang_createtable.html "Query Language Understood by SQLite: CREATE TABLE")より。version 3.1.0 以上。

	* 11:12 [life]: 
	出社。スリーエフの店内の配置が変わっていた。ど真ん中にアイスコーナー。チョコがどこにあるかわからずさまよう。

	* 10:18 [life]: 
	コーヒー沸かしてスタンバったらノートのバッテリーが少ないことに気づいた。

	会社行かなきゃ。

	* 正規表現の「?」 [regexp]: 
	人のプログラムに `kmd?\.sonymusic` みたいな正規表現書いたら
	`km(d|)\.sonymusic` と直されていた。わかりにくかったのかな。

	* Markdown書式でclmemo [clmemo]: 
	を書くようにする。そのうち[chalow](http://nais.to/~yto/tools/chalow/)みたいのを書く。

2005-10-07 (Fri)  Daisuke Murase  <murase@kayac.com>

	* Firefoxでdisable-output-escaping="yes" [xml] [xslt] [javascript]: 
	が効かない。ので `content:encoded` などをうまく表示することができない。
	IEだとうまく表示できる。

	[Feedburner](http://www.feedburner.com/)はその問題をJavaScriptで解決している模様。

	XSLTに

	    <div id="cometestme" style="display:none;">
	    <xsl:text disable-output-escaping="yes" >&amp;amp;</xsl:text>
	    </div>

	などと書いておいて、JavaScriptでこの部分をチェックし`disable-output-escaping`がサポートされている環境かどうか調べている。
	サポートされてない場合はデコード処理。

	* XSLTはじめた [xml] [xslt]: 
	食わず嫌いしてたけどやってみると結構面白い。

	CSSより自由度が高くて良い。Amazon ECSやRSSにXSLTを適用して遊ぶ。

	* changelogメモ [clmemo]: 
	導入

Local Variables:
mode: change-log
clmemo-mode: t
tab-width: 4
left-margin: 4
End:
